#!/bin/bash

# Project status commands
check_structure() {
    echo "Checking project structure..."
    tree -I 'node_modules|target|build|dist|.git'
}

check_git_status() {
    echo "Git status..."
    git status
    echo "Recent commits..."
    git log --oneline -n 5
}

check_builds() {
    echo "Checking builds..."
    
    echo "Frontend:"
    cd frontend && npm run build
    
    echo "Java Backend:"
    cd ../backend-java && ./gradlew build
    
    echo "Rust Backend:"
    cd ../backend-rust && cargo build
}

cleanup_project() {
    echo "Cleaning project..."
    
    # Clean frontend
    cd frontend
    rm -rf node_modules build dist
    npm ci
    
    # Clean Java backend
    cd ../backend-java
    ./gradlew clean
    
    # Clean Rust backend
    cd ../backend-rust
    cargo clean
}

# Run all checks
all_checks() {
    check_structure
    check_git_status
    check_builds
}

# Usage
case "$1" in
    "structure") check_structure ;;
    "git") check_git_status ;;
    "build") check_builds ;;
    "clean") cleanup_project ;;
    "all") all_checks ;;
    *) echo "Usage: $0 {structure|git|build|clean|all}" ;;
esac

# Initial Setup Commands

# Check current structure
tree -a -I 'node_modules|target|build|.git'

# Initialize git if not already done
git init

# Create main directories
mkdir -p parseltongue/{frontend,backend-java,backend-rust,shared}/{src,config}
mkdir -p parseltongue/frontend/src/{components,services,types}
mkdir -p parseltongue/backend-java/src/main/java/com/parseltongue/{config,controller,model,repository,service}
mkdir -p parseltongue/backend-rust/src/{config,handlers,models,services}
mkdir -p parseltongue/shared/{types,config}

# Track current files
find . -type f -not -path '*/\.*' > step98_current_files.txt


===

