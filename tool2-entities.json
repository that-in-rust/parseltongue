[
  {
    "isgl1_key": "rust:fn:build_cli:crates_llm-to-cozodb-writer_src_cli_rs:54-95",
    "temporal_state": {
      "current_ind": true,
      "future_ind": false,
      "future_action": null
    },
    "interface_signature": {
      "entity_type": "Function",
      "name": "build_cli",
      "visibility": "Public",
      "file_path": "crates/llm-to-cozodb-writer/src/cli.rs",
      "line_range": {
        "start": 54,
        "end": 95
      },
      "module_path": [],
      "documentation": null,
      "language_specific": {
        "language": "rust",
        "generics": [],
        "lifetimes": [],
        "where_clauses": [],
        "attributes": [],
        "trait_impl": null
      }
    },
    "current_code": "    pub fn build_cli() -> Command {\n        Command::new(\"parseltongue-02\")\n            .version(\"0.7.1\")\n            .author(\"Parseltongue Team\")\n            .about(\"Tool 02: LLM-to-cozoDB-writer\")\n            .long_about(\n                \"Ultra-minimalist tool for writing temporal code changes to CozoDB.\\n\\\n                \\n\\\n                Examples:\\n  \\\n                llm-to-cozodb-writer --entity \\\"rust:fn:hello:lib_rs:4-6\\\" --action edit --future-code 'pub fn hello() {}'\\n  \\\n                llm-to-cozodb-writer --entity \\\"rust:fn:new_func:lib_rs:10-15\\\" --action create --future-code 'pub fn new_func() {}'\\n  \\\n                llm-to-cozodb-writer --entity \\\"rust:fn:old_func:lib_rs:20-25\\\" --action delete --db rocksdb:demo.db\",\n            )\n            .arg(\n                Arg::new(\"entity\")\n                    .long(\"entity\")\n                    .value_name(\"ISGL1_KEY\")\n                    .help(\"ISGL1 key of entity (e.g., 'rust:fn:hello:lib_rs:4-6')\")\n                    .required(true),\n            )\n            .arg(\n                Arg::new(\"action\")\n                    .long(\"action\")\n                    .value_name(\"ACTION\")\n                    .help(\"Temporal action type\")\n                    .value_parser([\"create\", \"edit\", \"delete\"])\n                    .required(true),\n            )\n            .arg(\n                Arg::new(\"future-code\")\n                    .long(\"future-code\")\n                    .value_name(\"CODE\")\n                    .help(\"Future code content (required for create/edit actions)\"),\n            )\n            .arg(\n                Arg::new(\"database\")\n                    .long(\"db\")\n                    .value_name(\"PATH\")\n                    .help(\"Database file path\")\n                    .default_value(\"parseltongue.db\"),\n            )\n    }",
    "future_code": "    pub fn build_cli() -> Command {\n        Command::new(\"parseltongue-02\")\n            .version(\"0.7.1\")\n            .author(\"Parseltongue Team\")\n            .about(\"Tool 02: LLM-to-cozoDB-writer\")\n            .long_about(\n                \"Ultra-minimalist tool for writing temporal code changes to CozoDB.\\n\\\n                \\n\\\n                Examples:\\n  \\\n                llm-to-cozodb-writer --entity \\\"rust:fn:hello:lib_rs:4-6\\\" --action edit --future-code 'pub fn hello() {}'\\n  \\\n                llm-to-cozodb-writer --entity \\\"rust:fn:new_func:lib_rs:10-15\\\" --action create --future-code 'pub fn new_func() {}'\\n  \\\n                llm-to-cozodb-writer --entity \\\"rust:fn:old_func:lib_rs:20-25\\\" --action delete --db rocksdb:demo.db\",\n            )\n            .arg(\n                Arg::new(\"entity\")\n                    .long(\"entity\")\n                    .value_name(\"ISGL1_KEY\")\n                    .help(\"ISGL1 key of entity (e.g., 'rust:fn:hello:lib_rs:4-6')\")\n                    .required(true),\n            )\n            .arg(\n                Arg::new(\"action\")\n                    .long(\"action\")\n                    .value_name(\"ACTION\")\n                    .help(\"Temporal action type\")\n                    .value_parser([\"create\", \"edit\", \"delete\"])\n                    .required(true),\n            )\n            .arg(\n                Arg::new(\"future-code\")\n                    .long(\"future-code\")\n                    .value_name(\"CODE\")\n                    .help(\"Future code content (required for create/edit actions)\"),\n            )\n            .arg(\n                Arg::new(\"database\")\n                    .long(\"db\")\n                    .value_name(\"PATH\")\n                    .help(\"Database file path\")\n                    .default_value(\"parseltongue.db\"),\n            )\n    }",
    "tdd_classification": {
      "entity_class": "CodeImplementation",
      "testability": "Medium",
      "complexity": "Simple",
      "dependencies": 0,
      "test_coverage_estimate": 0.0,
      "critical_path": false,
      "change_risk": "Medium"
    },
    "lsp_metadata": null,
    "metadata": {
      "created_at": "2025-11-01T10:01:43.860874Z",
      "modified_at": "2025-11-01T10:01:43.860877Z",
      "content_hash": "",
      "additional": {}
    }
  },
  {
    "isgl1_key": "rust:fn:default:crates_llm-to-cozodb-writer_src_lib_rs:45-52",
    "temporal_state": {
      "current_ind": true,
      "future_ind": false,
      "future_action": null
    },
    "interface_signature": {
      "entity_type": "Function",
      "name": "default",
      "visibility": "Public",
      "file_path": "crates/llm-to-cozodb-writer/src/lib.rs",
      "line_range": {
        "start": 45,
        "end": 52
      },
      "module_path": [],
      "documentation": null,
      "language_specific": {
        "language": "rust",
        "generics": [],
        "lifetimes": [],
        "where_clauses": [],
        "attributes": [],
        "trait_impl": null
      }
    },
    "current_code": "    fn default() -> Self {\n        Self {\n            entity_key: String::new(),\n            action: \"edit\".to_string(),\n            future_code: None,\n            db_path: \"parseltongue.db\".to_string(),\n        }\n    }",
    "future_code": "    fn default() -> Self {\n        Self {\n            entity_key: String::new(),\n            action: \"edit\".to_string(),\n            future_code: None,\n            db_path: \"parseltongue.db\".to_string(),\n        }\n    }",
    "tdd_classification": {
      "entity_class": "CodeImplementation",
      "testability": "Medium",
      "complexity": "Simple",
      "dependencies": 0,
      "test_coverage_estimate": 0.0,
      "critical_path": false,
      "change_risk": "Medium"
    },
    "lsp_metadata": null,
    "metadata": {
      "created_at": "2025-11-01T10:01:43.860880Z",
      "modified_at": "2025-11-01T10:01:43.860880Z",
      "content_hash": "",
      "additional": {}
    }
  },
  {
    "isgl1_key": "rust:fn:from:crates_llm-to-cozodb-writer_src_errors_rs:63-93",
    "temporal_state": {
      "current_ind": true,
      "future_ind": false,
      "future_action": null
    },
    "interface_signature": {
      "entity_type": "Function",
      "name": "from",
      "visibility": "Public",
      "file_path": "crates/llm-to-cozodb-writer/src/errors.rs",
      "line_range": {
        "start": 63,
        "end": 93
      },
      "module_path": [],
      "documentation": null,
      "language_specific": {
        "language": "rust",
        "generics": [],
        "lifetimes": [],
        "where_clauses": [],
        "attributes": [],
        "trait_impl": null
      }
    },
    "current_code": "    fn from(err: LlmWriterError) -> Self {\n        match err {\n            LlmWriterError::DatabaseQueryError { query, reason } => {\n                ParseltongError::DatabaseError {\n                    operation: \"query\".to_string(),\n                    details: format!(\"Query: {} - {}\", query, reason),\n                }\n            }\n            LlmWriterError::ValidationError { field, reason } => {\n                ParseltongError::ValidationError {\n                    field,\n                    expected: \"valid temporal change\".to_string(),\n                    actual: reason,\n                }\n            }\n            LlmWriterError::ConfigurationError { field, reason } => {\n                ParseltongError::ConfigurationError {\n                    details: format!(\"{}: {}\", field, reason),\n                }\n            }\n            LlmWriterError::ResponseParseError { reason } => {\n                ParseltongError::ParseError {\n                    reason,\n                    location: \"LLM response\".to_string(),\n                }\n            }\n            _ => ParseltongError::LlmError {\n                reason: err.to_string(),\n            },\n        }\n    }",
    "future_code": "    fn from(err: LlmWriterError) -> Self {\n        match err {\n            LlmWriterError::DatabaseQueryError { query, reason } => {\n                ParseltongError::DatabaseError {\n                    operation: \"query\".to_string(),\n                    details: format!(\"Query: {} - {}\", query, reason),\n                }\n            }\n            LlmWriterError::ValidationError { field, reason } => {\n                ParseltongError::ValidationError {\n                    field,\n                    expected: \"valid temporal change\".to_string(),\n                    actual: reason,\n                }\n            }\n            LlmWriterError::ConfigurationError { field, reason } => {\n                ParseltongError::ConfigurationError {\n                    details: format!(\"{}: {}\", field, reason),\n                }\n            }\n            LlmWriterError::ResponseParseError { reason } => {\n                ParseltongError::ParseError {\n                    reason,\n                    location: \"LLM response\".to_string(),\n                }\n            }\n            _ => ParseltongError::LlmError {\n                reason: err.to_string(),\n            },\n        }\n    }",
    "tdd_classification": {
      "entity_class": "CodeImplementation",
      "testability": "Medium",
      "complexity": "Simple",
      "dependencies": 0,
      "test_coverage_estimate": 0.0,
      "critical_path": false,
      "change_risk": "Medium"
    },
    "lsp_metadata": null,
    "metadata": {
      "created_at": "2025-11-01T10:01:43.860881Z",
      "modified_at": "2025-11-01T10:01:43.860881Z",
      "content_hash": "",
      "additional": {}
    }
  },
  {
    "isgl1_key": "rust:fn:main:crates_llm-to-cozodb-writer_src_main_rs:20-49",
    "temporal_state": {
      "current_ind": true,
      "future_ind": false,
      "future_action": null
    },
    "interface_signature": {
      "entity_type": "Function",
      "name": "main",
      "visibility": "Public",
      "file_path": "crates/llm-to-cozodb-writer/src/main.rs",
      "line_range": {
        "start": 20,
        "end": 49
      },
      "module_path": [],
      "documentation": null,
      "language_specific": {
        "language": "rust",
        "generics": [],
        "lifetimes": [],
        "where_clauses": [],
        "attributes": [],
        "trait_impl": null
      }
    },
    "current_code": "async fn main() -> Result<()> {\n    // Parse CLI arguments\n    let cli = CliConfig::build_cli();\n    let matches = cli.try_get_matches();\n\n    match matches {\n        Ok(matches) => {\n            let config = CliConfig::parse_config(&matches);\n\n            println!(\"{}\", style(\"Running Tool 2: llm-to-cozodb-writer\").cyan());\n\n            // Run writer with simple pattern\n            match run_writer(&config).await {\n                Ok(()) => {\n                    println!(\"{}\", style(\"✓ Entity updated successfully\").green().bold());\n                    Ok(())\n                }\n                Err(e) => {\n                    eprintln!(\"{} {}\", style(\"Error:\").red().bold(), e);\n                    std::process::exit(1);\n                }\n            }\n        }\n        Err(e) => {\n            eprintln!(\"{} {}\", style(\"Error:\").red().bold(), e);\n            CliConfig::print_usage();\n            std::process::exit(1);\n        }\n    }\n}",
    "future_code": "async fn main() -> Result<()> {\n    // Parse CLI arguments\n    let cli = CliConfig::build_cli();\n    let matches = cli.try_get_matches();\n\n    match matches {\n        Ok(matches) => {\n            let config = CliConfig::parse_config(&matches);\n\n            println!(\"{}\", style(\"Running Tool 2: llm-to-cozodb-writer\").cyan());\n\n            // Run writer with simple pattern\n            match run_writer(&config).await {\n                Ok(()) => {\n                    println!(\"{}\", style(\"✓ Entity updated successfully\").green().bold());\n                    Ok(())\n                }\n                Err(e) => {\n                    eprintln!(\"{} {}\", style(\"Error:\").red().bold(), e);\n                    std::process::exit(1);\n                }\n            }\n        }\n        Err(e) => {\n            eprintln!(\"{} {}\", style(\"Error:\").red().bold(), e);\n            CliConfig::print_usage();\n            std::process::exit(1);\n        }\n    }\n}",
    "tdd_classification": {
      "entity_class": "CodeImplementation",
      "testability": "Medium",
      "complexity": "Simple",
      "dependencies": 0,
      "test_coverage_estimate": 0.0,
      "critical_path": false,
      "change_risk": "Medium"
    },
    "lsp_metadata": null,
    "metadata": {
      "created_at": "2025-11-01T10:01:43.860882Z",
      "modified_at": "2025-11-01T10:01:43.860882Z",
      "content_hash": "",
      "additional": {}
    }
  },
  {
    "isgl1_key": "rust:fn:parse_config:crates_llm-to-cozodb-writer_src_cli_rs:100-107",
    "temporal_state": {
      "current_ind": true,
      "future_ind": false,
      "future_action": null
    },
    "interface_signature": {
      "entity_type": "Function",
      "name": "parse_config",
      "visibility": "Public",
      "file_path": "crates/llm-to-cozodb-writer/src/cli.rs",
      "line_range": {
        "start": 100,
        "end": 107
      },
      "module_path": [],
      "documentation": null,
      "language_specific": {
        "language": "rust",
        "generics": [],
        "lifetimes": [],
        "where_clauses": [],
        "attributes": [],
        "trait_impl": null
      }
    },
    "current_code": "    pub fn parse_config(matches: &clap::ArgMatches) -> LlmWriterConfig {\n        LlmWriterConfig {\n            entity_key: matches.get_one::<String>(\"entity\").unwrap().clone(),\n            action: matches.get_one::<String>(\"action\").unwrap().clone(),\n            future_code: matches.get_one::<String>(\"future-code\").cloned(),\n            db_path: matches.get_one::<String>(\"database\").unwrap().clone(),\n        }\n    }",
    "future_code": "    pub fn parse_config(matches: &clap::ArgMatches) -> LlmWriterConfig {\n        LlmWriterConfig {\n            entity_key: matches.get_one::<String>(\"entity\").unwrap().clone(),\n            action: matches.get_one::<String>(\"action\").unwrap().clone(),\n            future_code: matches.get_one::<String>(\"future-code\").cloned(),\n            db_path: matches.get_one::<String>(\"database\").unwrap().clone(),\n        }\n    }",
    "tdd_classification": {
      "entity_class": "CodeImplementation",
      "testability": "Medium",
      "complexity": "Simple",
      "dependencies": 0,
      "test_coverage_estimate": 0.0,
      "critical_path": false,
      "change_risk": "Medium"
    },
    "lsp_metadata": null,
    "metadata": {
      "created_at": "2025-11-01T10:01:43.860884Z",
      "modified_at": "2025-11-01T10:01:43.860884Z",
      "content_hash": "",
      "additional": {}
    }
  },
  {
    "isgl1_key": "rust:fn:print_usage:crates_llm-to-cozodb-writer_src_cli_rs:110-114",
    "temporal_state": {
      "current_ind": true,
      "future_ind": false,
      "future_action": null
    },
    "interface_signature": {
      "entity_type": "Function",
      "name": "print_usage",
      "visibility": "Public",
      "file_path": "crates/llm-to-cozodb-writer/src/cli.rs",
      "line_range": {
        "start": 110,
        "end": 114
      },
      "module_path": [],
      "documentation": null,
      "language_specific": {
        "language": "rust",
        "generics": [],
        "lifetimes": [],
        "where_clauses": [],
        "attributes": [],
        "trait_impl": null
      }
    },
    "current_code": "    pub fn print_usage() {\n        let mut cli = Self::build_cli();\n        cli.print_help().unwrap();\n        println!();\n    }",
    "future_code": "    pub fn print_usage() {\n        let mut cli = Self::build_cli();\n        cli.print_help().unwrap();\n        println!();\n    }",
    "tdd_classification": {
      "entity_class": "CodeImplementation",
      "testability": "Medium",
      "complexity": "Simple",
      "dependencies": 0,
      "test_coverage_estimate": 0.0,
      "critical_path": false,
      "change_risk": "Medium"
    },
    "lsp_metadata": null,
    "metadata": {
      "created_at": "2025-11-01T10:01:43.860885Z",
      "modified_at": "2025-11-01T10:01:43.860885Z",
      "content_hash": "",
      "additional": {}
    }
  },
  {
    "isgl1_key": "rust:fn:print_version:crates_llm-to-cozodb-writer_src_cli_rs:117-119",
    "temporal_state": {
      "current_ind": true,
      "future_ind": false,
      "future_action": null
    },
    "interface_signature": {
      "entity_type": "Function",
      "name": "print_version",
      "visibility": "Public",
      "file_path": "crates/llm-to-cozodb-writer/src/cli.rs",
      "line_range": {
        "start": 117,
        "end": 119
      },
      "module_path": [],
      "documentation": null,
      "language_specific": {
        "language": "rust",
        "generics": [],
        "lifetimes": [],
        "where_clauses": [],
        "attributes": [],
        "trait_impl": null
      }
    },
    "current_code": "    pub fn print_version() {\n        println!(\"parseltongue-02 version 0.7.1\");\n    }",
    "future_code": "    pub fn print_version() {\n        println!(\"parseltongue-02 version 0.7.1\");\n    }",
    "tdd_classification": {
      "entity_class": "CodeImplementation",
      "testability": "Medium",
      "complexity": "Simple",
      "dependencies": 0,
      "test_coverage_estimate": 0.0,
      "critical_path": false,
      "change_risk": "Medium"
    },
    "lsp_metadata": null,
    "metadata": {
      "created_at": "2025-11-01T10:01:43.860886Z",
      "modified_at": "2025-11-01T10:01:43.860886Z",
      "content_hash": "",
      "additional": {}
    }
  },
  {
    "isgl1_key": "rust:fn:run_writer:crates_llm-to-cozodb-writer_src_main_rs:54-122",
    "temporal_state": {
      "current_ind": true,
      "future_ind": false,
      "future_action": null
    },
    "interface_signature": {
      "entity_type": "Function",
      "name": "run_writer",
      "visibility": "Public",
      "file_path": "crates/llm-to-cozodb-writer/src/main.rs",
      "line_range": {
        "start": 54,
        "end": 122
      },
      "module_path": [],
      "documentation": null,
      "language_specific": {
        "language": "rust",
        "generics": [],
        "lifetimes": [],
        "where_clauses": [],
        "attributes": [],
        "trait_impl": null
      }
    },
    "current_code": "async fn run_writer(config: &LlmWriterConfig) -> Result<()> {\n    // Validate future-code requirement\n    if (config.action == \"create\" || config.action == \"edit\") && config.future_code.is_none() {\n        eprintln!(\"{}\", style(\"Error: --future-code required for create/edit actions\").red());\n        std::process::exit(1);\n    }\n\n    // Connect to database\n    let storage = CozoDbStorage::new(&config.db_path)\n        .await\n        .map_err(|e| anyhow::anyhow!(\"Failed to connect to database: {}\", e))?;\n\n    // Process action\n    match config.action.as_str() {\n        \"create\" => {\n            println!(\"  Creating entity: {}\", config.entity_key);\n            println!(\"  Future code: {} bytes\", config.future_code.as_ref().unwrap().len());\n            eprintln!(\"{}\", style(\"⚠️  CREATE action requires full entity construction - not yet implemented\").yellow());\n            eprintln!(\"    Hint: First index the codebase, then use EDIT to modify entities\");\n            Ok(())\n        }\n        \"edit\" => {\n            println!(\"  Editing entity: {}\", config.entity_key);\n\n            // Fetch existing entity\n            let mut entity = storage.get_entity(&config.entity_key)\n                .await\n                .map_err(|e| anyhow::anyhow!(\"Failed to fetch entity: {}\", e))?;\n\n            // Update future_code\n            entity.future_code = Some(config.future_code.as_ref().unwrap().clone());\n\n            // Set temporal action\n            entity.temporal_state.future_action = Some(TemporalAction::Edit);\n            entity.temporal_state.future_ind = true;\n\n            // Persist updated entity back to database\n            storage.update_entity_internal(&entity)\n                .await\n                .map_err(|e| anyhow::anyhow!(\"Failed to persist entity changes: {}\", e))?;\n\n            println!(\"{}\", style(\"✓ Entity updated with future code\").green());\n            println!(\"  Temporal state: Edit pending (future_ind=true)\");\n            Ok(())\n        }\n        \"delete\" => {\n            println!(\"  Deleting entity: {}\", config.entity_key);\n\n            // Fetch existing entity\n            let mut entity = storage.get_entity(&config.entity_key)\n                .await\n                .map_err(|e| anyhow::anyhow!(\"Failed to fetch entity: {}\", e))?;\n\n            // Mark for deletion via temporal state\n            entity.temporal_state.future_ind = false;\n            entity.temporal_state.future_action = Some(TemporalAction::Delete);\n\n            // Persist updated entity\n            storage.update_entity_internal(&entity)\n                .await\n                .map_err(|e| anyhow::anyhow!(\"Failed to mark for deletion: {}\", e))?;\n\n            println!(\"{}\", style(\"✓ Entity marked for deletion\").green());\n            println!(\"  Temporal state: Delete pending (future_ind=false)\");\n            Ok(())\n        }\n        _ => unreachable!(\"clap validation should prevent this\"),\n    }\n}",
    "future_code": "async fn run_writer(config: &LlmWriterConfig) -> Result<()> {\n    // Validate future-code requirement\n    if (config.action == \"create\" || config.action == \"edit\") && config.future_code.is_none() {\n        eprintln!(\"{}\", style(\"Error: --future-code required for create/edit actions\").red());\n        std::process::exit(1);\n    }\n\n    // Connect to database\n    let storage = CozoDbStorage::new(&config.db_path)\n        .await\n        .map_err(|e| anyhow::anyhow!(\"Failed to connect to database: {}\", e))?;\n\n    // Process action\n    match config.action.as_str() {\n        \"create\" => {\n            println!(\"  Creating entity: {}\", config.entity_key);\n            println!(\"  Future code: {} bytes\", config.future_code.as_ref().unwrap().len());\n            eprintln!(\"{}\", style(\"⚠️  CREATE action requires full entity construction - not yet implemented\").yellow());\n            eprintln!(\"    Hint: First index the codebase, then use EDIT to modify entities\");\n            Ok(())\n        }\n        \"edit\" => {\n            println!(\"  Editing entity: {}\", config.entity_key);\n\n            // Fetch existing entity\n            let mut entity = storage.get_entity(&config.entity_key)\n                .await\n                .map_err(|e| anyhow::anyhow!(\"Failed to fetch entity: {}\", e))?;\n\n            // Update future_code\n            entity.future_code = Some(config.future_code.as_ref().unwrap().clone());\n\n            // Set temporal action\n            entity.temporal_state.future_action = Some(TemporalAction::Edit);\n            entity.temporal_state.future_ind = true;\n\n            // Persist updated entity back to database\n            storage.update_entity_internal(&entity)\n                .await\n                .map_err(|e| anyhow::anyhow!(\"Failed to persist entity changes: {}\", e))?;\n\n            println!(\"{}\", style(\"✓ Entity updated with future code\").green());\n            println!(\"  Temporal state: Edit pending (future_ind=true)\");\n            Ok(())\n        }\n        \"delete\" => {\n            println!(\"  Deleting entity: {}\", config.entity_key);\n\n            // Fetch existing entity\n            let mut entity = storage.get_entity(&config.entity_key)\n                .await\n                .map_err(|e| anyhow::anyhow!(\"Failed to fetch entity: {}\", e))?;\n\n            // Mark for deletion via temporal state\n            entity.temporal_state.future_ind = false;\n            entity.temporal_state.future_action = Some(TemporalAction::Delete);\n\n            // Persist updated entity\n            storage.update_entity_internal(&entity)\n                .await\n                .map_err(|e| anyhow::anyhow!(\"Failed to mark for deletion: {}\", e))?;\n\n            println!(\"{}\", style(\"✓ Entity marked for deletion\").green());\n            println!(\"  Temporal state: Delete pending (future_ind=false)\");\n            Ok(())\n        }\n        _ => unreachable!(\"clap validation should prevent this\"),\n    }\n}",
    "tdd_classification": {
      "entity_class": "CodeImplementation",
      "testability": "Medium",
      "complexity": "Simple",
      "dependencies": 0,
      "test_coverage_estimate": 0.0,
      "critical_path": false,
      "change_risk": "Medium"
    },
    "lsp_metadata": null,
    "metadata": {
      "created_at": "2025-11-01T10:01:43.860887Z",
      "modified_at": "2025-11-01T10:01:43.860887Z",
      "content_hash": "",
      "additional": {}
    }
  },
  {
    "isgl1_key": "rust:fn:test_cli_config_parsing:crates_llm-to-cozodb-writer_src_cli_rs:127-152",
    "temporal_state": {
      "current_ind": true,
      "future_ind": false,
      "future_action": null
    },
    "interface_signature": {
      "entity_type": "Function",
      "name": "test_cli_config_parsing",
      "visibility": "Public",
      "file_path": "crates/llm-to-cozodb-writer/src/cli.rs",
      "line_range": {
        "start": 127,
        "end": 152
      },
      "module_path": [],
      "documentation": null,
      "language_specific": {
        "language": "rust",
        "generics": [],
        "lifetimes": [],
        "where_clauses": [],
        "attributes": [],
        "trait_impl": null
      }
    },
    "current_code": "    fn test_cli_config_parsing() {\n        let cli = CliConfig::build_cli();\n        let matches = cli.try_get_matches_from(&[\n            \"parseltongue-02\",\n            \"--entity\",\n            \"rust:fn:hello:lib_rs:4-6\",\n            \"--action\",\n            \"edit\",\n            \"--future-code\",\n            \"pub fn hello() -> &'static str { \\\"Hello!\\\" }\",\n            \"--db\",\n            \"test.db\",\n        ]);\n\n        assert!(matches.is_ok());\n        let matches = matches.unwrap();\n\n        let config = CliConfig::parse_config(&matches);\n        assert_eq!(config.entity_key, \"rust:fn:hello:lib_rs:4-6\");\n        assert_eq!(config.action, \"edit\");\n        assert_eq!(\n            config.future_code,\n            Some(\"pub fn hello() -> &'static str { \\\"Hello!\\\" }\".to_string())\n        );\n        assert_eq!(config.db_path, \"test.db\");\n    }",
    "future_code": "    fn test_cli_config_parsing() {\n        let cli = CliConfig::build_cli();\n        let matches = cli.try_get_matches_from(&[\n            \"parseltongue-02\",\n            \"--entity\",\n            \"rust:fn:hello:lib_rs:4-6\",\n            \"--action\",\n            \"edit\",\n            \"--future-code\",\n            \"pub fn hello() -> &'static str { \\\"Hello!\\\" }\",\n            \"--db\",\n            \"test.db\",\n        ]);\n\n        assert!(matches.is_ok());\n        let matches = matches.unwrap();\n\n        let config = CliConfig::parse_config(&matches);\n        assert_eq!(config.entity_key, \"rust:fn:hello:lib_rs:4-6\");\n        assert_eq!(config.action, \"edit\");\n        assert_eq!(\n            config.future_code,\n            Some(\"pub fn hello() -> &'static str { \\\"Hello!\\\" }\".to_string())\n        );\n        assert_eq!(config.db_path, \"test.db\");\n    }",
    "tdd_classification": {
      "entity_class": "TestImplementation",
      "testability": "Medium",
      "complexity": "Simple",
      "dependencies": 0,
      "test_coverage_estimate": 0.0,
      "critical_path": false,
      "change_risk": "Medium"
    },
    "lsp_metadata": null,
    "metadata": {
      "created_at": "2025-11-01T10:01:43.860889Z",
      "modified_at": "2025-11-01T10:01:43.860889Z",
      "content_hash": "",
      "additional": {}
    }
  },
  {
    "isgl1_key": "rust:fn:test_config_default:crates_llm-to-cozodb-writer_src_main_rs:157-162",
    "temporal_state": {
      "current_ind": true,
      "future_ind": false,
      "future_action": null
    },
    "interface_signature": {
      "entity_type": "Function",
      "name": "test_config_default",
      "visibility": "Public",
      "file_path": "crates/llm-to-cozodb-writer/src/main.rs",
      "line_range": {
        "start": 157,
        "end": 162
      },
      "module_path": [],
      "documentation": null,
      "language_specific": {
        "language": "rust",
        "generics": [],
        "lifetimes": [],
        "where_clauses": [],
        "attributes": [],
        "trait_impl": null
      }
    },
    "current_code": "    fn test_config_default() {\n        let config = LlmWriterConfig::default();\n        assert_eq!(config.db_path, \"parseltongue.db\");\n        assert_eq!(config.action, \"edit\");\n        assert!(config.future_code.is_none());\n    }",
    "future_code": "    fn test_config_default() {\n        let config = LlmWriterConfig::default();\n        assert_eq!(config.db_path, \"parseltongue.db\");\n        assert_eq!(config.action, \"edit\");\n        assert!(config.future_code.is_none());\n    }",
    "tdd_classification": {
      "entity_class": "TestImplementation",
      "testability": "Medium",
      "complexity": "Simple",
      "dependencies": 0,
      "test_coverage_estimate": 0.0,
      "critical_path": false,
      "change_risk": "Medium"
    },
    "lsp_metadata": null,
    "metadata": {
      "created_at": "2025-11-01T10:01:43.860890Z",
      "modified_at": "2025-11-01T10:01:43.860890Z",
      "content_hash": "",
      "additional": {}
    }
  },
  {
    "isgl1_key": "rust:fn:test_config_validation_delete_no_code:crates_llm-to-cozodb-writer_src_main_rs:143-154",
    "temporal_state": {
      "current_ind": true,
      "future_ind": false,
      "future_action": null
    },
    "interface_signature": {
      "entity_type": "Function",
      "name": "test_config_validation_delete_no_code",
      "visibility": "Public",
      "file_path": "crates/llm-to-cozodb-writer/src/main.rs",
      "line_range": {
        "start": 143,
        "end": 154
      },
      "module_path": [],
      "documentation": null,
      "language_specific": {
        "language": "rust",
        "generics": [],
        "lifetimes": [],
        "where_clauses": [],
        "attributes": [],
        "trait_impl": null
      }
    },
    "current_code": "    fn test_config_validation_delete_no_code() {\n        let config = LlmWriterConfig {\n            entity_key: \"rust:fn:old:lib_rs:20-25\".to_string(),\n            action: \"delete\".to_string(),\n            future_code: None,  // Delete doesn't need code\n            db_path: \"mem\".to_string(),\n        };\n\n        // Delete should not need future_code\n        assert!(config.future_code.is_none());\n        assert_eq!(config.action, \"delete\");\n    }",
    "future_code": "    fn test_config_validation_delete_no_code() {\n        let config = LlmWriterConfig {\n            entity_key: \"rust:fn:old:lib_rs:20-25\".to_string(),\n            action: \"delete\".to_string(),\n            future_code: None,  // Delete doesn't need code\n            db_path: \"mem\".to_string(),\n        };\n\n        // Delete should not need future_code\n        assert!(config.future_code.is_none());\n        assert_eq!(config.action, \"delete\");\n    }",
    "tdd_classification": {
      "entity_class": "TestImplementation",
      "testability": "Medium",
      "complexity": "Simple",
      "dependencies": 0,
      "test_coverage_estimate": 0.0,
      "critical_path": false,
      "change_risk": "Medium"
    },
    "lsp_metadata": null,
    "metadata": {
      "created_at": "2025-11-01T10:01:43.860891Z",
      "modified_at": "2025-11-01T10:01:43.860891Z",
      "content_hash": "",
      "additional": {}
    }
  },
  {
    "isgl1_key": "rust:fn:test_config_validation_edit_requires_code:crates_llm-to-cozodb-writer_src_main_rs:129-140",
    "temporal_state": {
      "current_ind": true,
      "future_ind": false,
      "future_action": null
    },
    "interface_signature": {
      "entity_type": "Function",
      "name": "test_config_validation_edit_requires_code",
      "visibility": "Public",
      "file_path": "crates/llm-to-cozodb-writer/src/main.rs",
      "line_range": {
        "start": 129,
        "end": 140
      },
      "module_path": [],
      "documentation": null,
      "language_specific": {
        "language": "rust",
        "generics": [],
        "lifetimes": [],
        "where_clauses": [],
        "attributes": [],
        "trait_impl": null
      }
    },
    "current_code": "    fn test_config_validation_edit_requires_code() {\n        let config = LlmWriterConfig {\n            entity_key: \"rust:fn:test:lib_rs:10-15\".to_string(),\n            action: \"edit\".to_string(),\n            future_code: None,  // Missing code for edit\n            db_path: \"mem\".to_string(),\n        };\n\n        // Should require future_code for edit action\n        assert!(config.future_code.is_none());\n        assert_eq!(config.action, \"edit\");\n    }",
    "future_code": "    fn test_config_validation_edit_requires_code() {\n        let config = LlmWriterConfig {\n            entity_key: \"rust:fn:test:lib_rs:10-15\".to_string(),\n            action: \"edit\".to_string(),\n            future_code: None,  // Missing code for edit\n            db_path: \"mem\".to_string(),\n        };\n\n        // Should require future_code for edit action\n        assert!(config.future_code.is_none());\n        assert_eq!(config.action, \"edit\");\n    }",
    "tdd_classification": {
      "entity_class": "TestImplementation",
      "testability": "Medium",
      "complexity": "Simple",
      "dependencies": 0,
      "test_coverage_estimate": 0.0,
      "critical_path": false,
      "change_risk": "Medium"
    },
    "lsp_metadata": null,
    "metadata": {
      "created_at": "2025-11-01T10:01:43.860892Z",
      "modified_at": "2025-11-01T10:01:43.860892Z",
      "content_hash": "",
      "additional": {}
    }
  },
  {
    "isgl1_key": "rust:fn:test_default_config:crates_llm-to-cozodb-writer_src_cli_rs:155-175",
    "temporal_state": {
      "current_ind": true,
      "future_ind": false,
      "future_action": null
    },
    "interface_signature": {
      "entity_type": "Function",
      "name": "test_default_config",
      "visibility": "Public",
      "file_path": "crates/llm-to-cozodb-writer/src/cli.rs",
      "line_range": {
        "start": 155,
        "end": 175
      },
      "module_path": [],
      "documentation": null,
      "language_specific": {
        "language": "rust",
        "generics": [],
        "lifetimes": [],
        "where_clauses": [],
        "attributes": [],
        "trait_impl": null
      }
    },
    "current_code": "    fn test_default_config() {\n        let cli = CliConfig::build_cli();\n        let matches = cli.try_get_matches_from(&[\n            \"parseltongue-02\",\n            \"--entity\",\n            \"rust:fn:test:lib_rs:10-15\",\n            \"--action\",\n            \"create\",\n            \"--future-code\",\n            \"pub fn test() {}\",\n        ]);\n\n        assert!(matches.is_ok());\n        let matches = matches.unwrap();\n\n        let config = CliConfig::parse_config(&matches);\n        assert_eq!(config.entity_key, \"rust:fn:test:lib_rs:10-15\");\n        assert_eq!(config.action, \"create\");\n        assert_eq!(config.future_code, Some(\"pub fn test() {}\".to_string()));\n        assert_eq!(config.db_path, \"parseltongue.db\"); // Default value\n    }",
    "future_code": "    fn test_default_config() {\n        let cli = CliConfig::build_cli();\n        let matches = cli.try_get_matches_from(&[\n            \"parseltongue-02\",\n            \"--entity\",\n            \"rust:fn:test:lib_rs:10-15\",\n            \"--action\",\n            \"create\",\n            \"--future-code\",\n            \"pub fn test() {}\",\n        ]);\n\n        assert!(matches.is_ok());\n        let matches = matches.unwrap();\n\n        let config = CliConfig::parse_config(&matches);\n        assert_eq!(config.entity_key, \"rust:fn:test:lib_rs:10-15\");\n        assert_eq!(config.action, \"create\");\n        assert_eq!(config.future_code, Some(\"pub fn test() {}\".to_string()));\n        assert_eq!(config.db_path, \"parseltongue.db\"); // Default value\n    }",
    "tdd_classification": {
      "entity_class": "TestImplementation",
      "testability": "Medium",
      "complexity": "Simple",
      "dependencies": 0,
      "test_coverage_estimate": 0.0,
      "critical_path": false,
      "change_risk": "Medium"
    },
    "lsp_metadata": null,
    "metadata": {
      "created_at": "2025-11-01T10:01:43.860894Z",
      "modified_at": "2025-11-01T10:01:43.860894Z",
      "content_hash": "",
      "additional": {}
    }
  },
  {
    "isgl1_key": "rust:fn:test_delete_action_without_code:crates_llm-to-cozodb-writer_src_cli_rs:178-198",
    "temporal_state": {
      "current_ind": true,
      "future_ind": false,
      "future_action": null
    },
    "interface_signature": {
      "entity_type": "Function",
      "name": "test_delete_action_without_code",
      "visibility": "Public",
      "file_path": "crates/llm-to-cozodb-writer/src/cli.rs",
      "line_range": {
        "start": 178,
        "end": 198
      },
      "module_path": [],
      "documentation": null,
      "language_specific": {
        "language": "rust",
        "generics": [],
        "lifetimes": [],
        "where_clauses": [],
        "attributes": [],
        "trait_impl": null
      }
    },
    "current_code": "    fn test_delete_action_without_code() {\n        let cli = CliConfig::build_cli();\n        let matches = cli.try_get_matches_from(&[\n            \"parseltongue-02\",\n            \"--entity\",\n            \"rust:fn:old_func:lib_rs:20-25\",\n            \"--action\",\n            \"delete\",\n            \"--db\",\n            \"test.db\",\n        ]);\n\n        assert!(matches.is_ok());\n        let matches = matches.unwrap();\n\n        let config = CliConfig::parse_config(&matches);\n        assert_eq!(config.entity_key, \"rust:fn:old_func:lib_rs:20-25\");\n        assert_eq!(config.action, \"delete\");\n        assert_eq!(config.future_code, None); // No code needed for delete\n        assert_eq!(config.db_path, \"test.db\");\n    }",
    "future_code": "    fn test_delete_action_without_code() {\n        let cli = CliConfig::build_cli();\n        let matches = cli.try_get_matches_from(&[\n            \"parseltongue-02\",\n            \"--entity\",\n            \"rust:fn:old_func:lib_rs:20-25\",\n            \"--action\",\n            \"delete\",\n            \"--db\",\n            \"test.db\",\n        ]);\n\n        assert!(matches.is_ok());\n        let matches = matches.unwrap();\n\n        let config = CliConfig::parse_config(&matches);\n        assert_eq!(config.entity_key, \"rust:fn:old_func:lib_rs:20-25\");\n        assert_eq!(config.action, \"delete\");\n        assert_eq!(config.future_code, None); // No code needed for delete\n        assert_eq!(config.db_path, \"test.db\");\n    }",
    "tdd_classification": {
      "entity_class": "TestImplementation",
      "testability": "Medium",
      "complexity": "Simple",
      "dependencies": 0,
      "test_coverage_estimate": 0.0,
      "critical_path": false,
      "change_risk": "Medium"
    },
    "lsp_metadata": null,
    "metadata": {
      "created_at": "2025-11-01T10:01:43.860895Z",
      "modified_at": "2025-11-01T10:01:43.860895Z",
      "content_hash": "",
      "additional": {}
    }
  },
  {
    "isgl1_key": "rust:struct:CliConfig:crates_llm-to-cozodb-writer_src_cli_rs:50-50",
    "temporal_state": {
      "current_ind": true,
      "future_ind": false,
      "future_action": null
    },
    "interface_signature": {
      "entity_type": "Struct",
      "name": "CliConfig",
      "visibility": "Public",
      "file_path": "crates/llm-to-cozodb-writer/src/cli.rs",
      "line_range": {
        "start": 50,
        "end": 50
      },
      "module_path": [],
      "documentation": null,
      "language_specific": {
        "language": "rust",
        "generics": [],
        "lifetimes": [],
        "where_clauses": [],
        "attributes": [],
        "trait_impl": null
      }
    },
    "current_code": "pub struct CliConfig;",
    "future_code": "pub struct CliConfig;",
    "tdd_classification": {
      "entity_class": "CodeImplementation",
      "testability": "Medium",
      "complexity": "Simple",
      "dependencies": 0,
      "test_coverage_estimate": 0.0,
      "critical_path": false,
      "change_risk": "Medium"
    },
    "lsp_metadata": null,
    "metadata": {
      "created_at": "2025-11-01T10:01:43.860896Z",
      "modified_at": "2025-11-01T10:01:43.860896Z",
      "content_hash": "",
      "additional": {}
    }
  },
  {
    "isgl1_key": "rust:struct:LlmWriterConfig:crates_llm-to-cozodb-writer_src_lib_rs:33-42",
    "temporal_state": {
      "current_ind": true,
      "future_ind": false,
      "future_action": null
    },
    "interface_signature": {
      "entity_type": "Struct",
      "name": "LlmWriterConfig",
      "visibility": "Public",
      "file_path": "crates/llm-to-cozodb-writer/src/lib.rs",
      "line_range": {
        "start": 33,
        "end": 42
      },
      "module_path": [],
      "documentation": null,
      "language_specific": {
        "language": "rust",
        "generics": [],
        "lifetimes": [],
        "where_clauses": [],
        "attributes": [],
        "trait_impl": null
      }
    },
    "current_code": "pub struct LlmWriterConfig {\n    /// ISGL1 key of entity (e.g., \"rust:fn:hello:lib_rs:4-6\")\n    pub entity_key: String,\n    /// Temporal action: \"create\", \"edit\", or \"delete\"\n    pub action: String,\n    /// Future code content (required for create/edit, None for delete)\n    pub future_code: Option<String>,\n    /// Database connection string\n    pub db_path: String,\n}",
    "future_code": "pub struct LlmWriterConfig {\n    /// ISGL1 key of entity (e.g., \"rust:fn:hello:lib_rs:4-6\")\n    pub entity_key: String,\n    /// Temporal action: \"create\", \"edit\", or \"delete\"\n    pub action: String,\n    /// Future code content (required for create/edit, None for delete)\n    pub future_code: Option<String>,\n    /// Database connection string\n    pub db_path: String,\n}",
    "tdd_classification": {
      "entity_class": "CodeImplementation",
      "testability": "Medium",
      "complexity": "Simple",
      "dependencies": 0,
      "test_coverage_estimate": 0.0,
      "critical_path": false,
      "change_risk": "Medium"
    },
    "lsp_metadata": null,
    "metadata": {
      "created_at": "2025-11-01T10:01:43.860897Z",
      "modified_at": "2025-11-01T10:01:43.860897Z",
      "content_hash": "",
      "additional": {}
    }
  }
]