## Core + Binary Structure (Optimized for Current Scope)
src/
 ├── lib.rs           // Public API + module declarations
 │   - Export public interfaces from each module
 │   - Define core Result/Error types
 ├── main.rs          // CLI entry only (~30 LOC)
 │   - Keep Config struct and parse_config()
 │   - Main workflow orchestration
 │   - Error handling setup
 ├── core/
 │   ├── mod.rs       // Core orchestration
 │   │   - Re-export error and types
 │   │   - Common traits
 │   ├── error.rs     // Custom error types
 │   │   - Move error handling from main.rs
 │   │   - Define custom Error enum
 │   └── types.rs     // Shared types/traits
 │       - Move Config struct from main.rs
 │       - Common type definitions
 │
 ├── cli/
 │   ├── mod.rs       // CLI orchestration
 │   │   - Move logger mod functionality
 │   │   - Logging setup and configuration
 │   │   From main.rs:
 │   │   - env_logger::init()
 │   │   - Logger struct and impl
 │   ├── args.rs      // Argument parsing + validation
 │   │   From main.rs:
 │   │   - Config struct definition
 │   │   - parse_config() function
 │   │   - Argument validation logic
 │   └── progress.rs  // Progress bar handling
 │       From main.rs:
 │       - Progress bar setup code
 │       - ProgressStyle configuration
 │       - Progress update logic
 │
 ├── storage/
 │   ├── mod.rs       // Storage orchestration
 │   │   - Re-export db and index
 │   │   - Storage trait definitions
 │   ├── db.rs        // Sled operations
 │   │   From main.rs:
 │   │   - Entire database mod
 │   │   - DatabaseManager struct and impl
 │   │   - store() method
 │   └── index.rs     // File index management
 │       From main.rs:
 │       - File indexing logic from main loop
 │       - Key generation code
 │       - Index querying functionality
 │
 └── zip/
     ├── mod.rs       // ZIP orchestration
     │   - Re-export reader and encoding
     │   - ZIP processing traits
     ├── reader.rs    // Streaming implementation
     │   From main.rs:
     │   - zip_processing mod
     │   - ZipEntry struct
     │   - process_zip function
     └── encoding.rs  // Character set handling
         From main.rs:
         - WINDOWS_1252 encoding handling
         - Character set detection
         - Encoding error handling

tests/
 └── integration/    // End-to-end workflow tests
     - Move test_database_operations
     - Add ZIP processing tests
     - Add CLI argument tests

Key Improvements:
1. Removed unnecessary nesting that wasn't serving current scope
2. Combined logging into cli/mod.rs (simple env_logger setup)
3. Simplified path handling into storage/mod.rs
4. Focused zip handling on core streaming needs
5. Single integration test directory for main workflow

Design Principles:
- Each file has single, clear responsibility
- Max ~200 LOC per file
- Clear interfaces between modules
- Easy to navigate for current scope
- Room to expand without restructuring
