## Core + Binary Structure (Production-Grade Async Implementation)

src/
 ├── lib.rs           // Public API + Core Traits
 │   - AsyncZipProcessor trait
 │   - AsyncStorageBackend trait
 │   - Async stream traits with backpressure
 │   - Error types with thiserror
 │
 ├── main.rs          // Runtime + Entry Point
 │   - Tokio multi-threaded runtime setup
 │   - CLI argument parsing (clap):
 │     * --input-zip, --output-dir (required)
 │     * --workers, --buffer-size, --shutdown-timeout (optional)
 │     * --verbose (optional)
 │   - Graceful shutdown handling
 │   - Error reporting setup
 │
 ├── core/           // Core Async Infrastructure
 │   ├── runtime/
 │   │   ├── mod.rs        // Runtime Management
 │   │   │   - Configurable worker pool
 │   │   │   - Adaptive buffer sizing
 │   │   │   - Resource limits
 │   │   │   - Shutdown coordination
 │   │   ├── worker.rs     // Task Management
 │   │   │   - Task scheduling
 │   │   │   - Priority queues
 │   │   │   - Backpressure control
 │   │   └── shutdown.rs   // Graceful Shutdown
 │   │       - Resource cleanup
 │   │       - Task cancellation
 │   │       - Configurable timeout handling
 │   ├── error.rs    // Error Management
 │   │   - Domain errors
 │   │   - Circuit breaker implementation
 │   │   - Context propagation
 │   │   - Error metrics
 │   ├── types.rs    // Core Domain Types
 │   │   - ZIP entry types
 │   │   - Storage types
 │   │   - Runtime configuration types
 │   │   - Metrics types
 │   └── channel.rs  // Async Channels
 │       - Backpressure channels
 │       - Metrics collection
 │       - Buffer management
 │
 ├── cli/            // CLI Layer
 │   ├── mod.rs      // CLI Coordination
 │   │   - Feature coordination
 │   │   - Error handling
 │   ├── args.rs     // Argument Parsing
 │   │   - Command line parsing
 │   │   - Validation logic
 │   ├── progress.rs // Progress Reporting
 │   │   - Async progress bars
 │   │   - Rate limiting
 │   └── metrics.rs  // CLI Metrics
 │       - Performance tracking
 │       - User feedback
 │
 ├── zip/            // ZIP Processing
 │   ├── mod.rs      // ZIP Coordination
 │   │   - Stream processing traits
 │   │   - Buffer management
 │   ├── reader.rs   // Async Reader
 │   │   - Chunked streaming
 │   │   - CRC validation
 │   │   - Memory management
 │   ├── validation.rs // Validation
 │   │   - Format checking
 │   │   - Integrity validation
 │   │   - Error detection
 │   └── encoding.rs   // Character Encoding
 │       - UTF-8 handling
 │       - Windows-1252 support
 │       - Fallback strategies
 │
 ├── storage/        // Storage Layer
 │   ├── mod.rs      // Storage Coordination
 │   │   - Configurable connection pooling
 │   │   - Transaction management
 │   ├── db.rs       // Database Operations
 │   │   - Batched write operations
 │   │   - Priority-based scheduling
 │   │   - Async transactions
 │   │   - Error recovery
 │   └── index.rs    // Index Management
 │       - Concurrent access
 │       - Index optimization
 │       - Search operations
 │
 ├── metrics/        // Metrics & Monitoring
 │   ├── mod.rs      // Metrics Coordination
 │   │   - Metric aggregation
 │   │   - Rate limiting
 │   ├── collect.rs  // Collection
 │   │   - Tokio runtime metrics
 │   │   - Task performance data
 │   │   - Resource usage
 │   └── report.rs   // Reporting
 │       - Structured logging
 │       - Colored console output
 │       - File logging
 │       - JSON formatting
 │
 └── utils/          // Utilities
     ├── mod.rs      // Utils Coordination
     ├── buffer.rs   // Buffer Management
     │   - Pool management
     │   - Size adaptation
     │   - Memory limits
     ├── resource.rs // Resource Management
     │   - Resource pooling
     │   - Limit enforcement
     └── cleanup.rs  // Cleanup Handlers
         - RAII guards
         - Async cleanup
         - Resource tracking

tests/
 ├── integration/   // Integration Tests
 │   └── mod.rs
 │       - End-to-end workflows
 │       - Concurrent operations
 │       - Resource cleanup
 └── utils/        // Test Utilities
     └── mod.rs
         - Async test helpers
         - Mock implementations
         - Test fixtures

Key Design Principles:
1. Async-first architecture
2. Resource-aware operations
3. Proper error handling
4. Comprehensive metrics
5. Clean shutdown paths
6. Test coverage focus

Implementation Notes:
- All I/O operations are async
- Resource limits enforced
- Metrics collected throughout
- Graceful error recovery
- Clean shutdown paths
+- No distributed processing support
+- No persistent metrics storage
+- No runtime reconfiguration
+- Focus on single-node performance

Component Relationships:
1. ZIP Processing Pipeline:
   AsyncZipReader -> EntryProcessor -> ValidationQueue -> StorageWriter

2. Resource Management:
   BufferPool -> WorkerPool -> ConnectionPool -> MetricsCollector

3. Error Handling Chain:
   CircuitBreaker -> ErrorMetrics -> GracefulDegradation -> Reporting

4. Metric Collection Flow:
   TaskMetrics -> AggregatedMetrics -> StructuredLogs -> Reports
