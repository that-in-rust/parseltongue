

chmod +x A00References/install01.sh
sudo ./A00References/install01.sh


===============
#!/bin/bash

# Robust shell options
set -Eeuo pipefail
IFS=$'\n\t'

# Enable debug mode if requested
if [[ "${DEBUG:-}" == "true" ]]; then
    set -x
fi

# Error handling
trap cleanup SIGINT SIGTERM ERR EXIT

# Get script location
script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)

# Cleanup function
cleanup() {
    trap - SIGINT SIGTERM ERR EXIT
    # Add cleanup code here
}

# Path safety function
safe_cd() {
    cd "$1" || exit 1
}

# Logging functions
log_info() { echo "ℹ️ $*" >&2; }
log_warn() { echo "⚠️ $*" >&2; }
log_error() { echo "❌ $*" >&2; }
log_success() { echo "✅ $*" >&2; }

# Project status commands
check_structure() {
    echo "Checking project structure..."
    tree -I 'node_modules|target|build|dist|.git'
}

check_git_status() {
    echo "Git status..."
    git status
    echo "Recent commits..."
    git log --oneline -n 5
}

check_builds() {
    echo "Checking builds..."
    
    echo "Frontend:"
    cd frontend && npm run build
    
    echo "Java Backend:"
    cd ../backend-java && ./gradlew build
    
    echo "Rust Backend:"
    cd ../backend-rust && cargo build
}

cleanup_project() {
    echo "Cleaning project..."
    
    # Clean frontend
    cd frontend
    rm -rf node_modules build dist
    npm ci
    
    # Clean Java backend
    cd ../backend-java
    ./gradlew clean
    
    # Clean Rust backend
    cd ../backend-rust
    cargo clean
}

# Run all checks
all_checks() {
    check_structure
    check_git_status
    check_builds
}

# Usage
case "$1" in
    "structure") check_structure ;;
    "git") check_git_status ;;
    "build") check_builds ;;
    "clean") cleanup_project ;;
    "all") all_checks ;;
    *) echo "Usage: $0 {structure|git|build|clean|all}" ;;
esac

# Initial Setup Commands

# Check current structure
tree -a -I 'node_modules|target|build|.git'

# Initialize git if not already done
git init

# Create main directories
mkdir -p parseltongue/{frontend,backend-java,backend-rust,shared}/{src,config}
mkdir -p parseltongue/frontend/src/{components,services,types}
mkdir -p parseltongue/backend-java/src/main/java/com/parseltongue/{config,controller,model,repository,service}
mkdir -p parseltongue/backend-rust/src/{config,handlers,models,services}
mkdir -p parseltongue/shared/{types,config}

# Track current files
find . -type f -not -path '*/\.*' > step98_current_files.txt

# === Mistakes v1 ===
# 1. Repository Cloning: The script does not clone the necessary repository. Ensure the repository is cloned if not already present.
# 2. Error Handling: Consider adding more granular error handling for specific operations to improve robustness.
# 3. Logging: Enhance logging for each step to aid in debugging and provide more detailed feedback during execution.
# 4. Verification: While the script verifies installations, it could include checks for specific configurations or files to ensure complete setup.

# === Mistakes v2 ===
# 1. Shell Options: Script was missing important shell options like 'pipefail'
# 2. Error Trapping: No proper error trap handlers were implemented
# 3. Debug Mode: No built-in debug mode capability
# 4. Path Safety: Directory changes were not properly handled for safety
# 5. Logging: No standardized logging functions
# 6. Cleanup: No proper cleanup mechanism on script exit or error

# === Mistakes v3 ===
# 1. Global Arrays: Script was using arrays without declaring them first
# 2. Function Dependencies: Functions were using variables that might not exist
# 3. Error Context: Error messages didn't provide enough context
# 4. Variable Scope: Some variables were not properly scoped
# 5. Array Handling: Arrays were not properly initialized before use
# 6. Debug Support: No proper debugging support for troubleshooting

# === Mistakes v4 ===
# 1. Directory Structure: Script didn't create directories before setup
# 2. Network Checks: No verification of network connectivity
# 3. Disk Space: No check for available disk space
# 4. Backup: No backup of existing files
# 5. Sudo Privileges: No proper sudo privilege check
# 6. Error Recovery: No recovery mechanism for failed operations
# 7. Installation Order: Dependencies weren't properly ordered
# 8. Resource Cleanup: Temporary files might not be cleaned up

# Debugging Commands
debug_script() {
    # Syntax check
    bash -n "$1"
    
    # Show script execution
    DEBUG=true bash "$1"
    
    # Check for common issues
    shellcheck "$1"
}

# Usage: debug_script path/to/script.sh


===

