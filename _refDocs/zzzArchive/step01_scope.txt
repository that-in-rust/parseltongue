# Parseltongue v0.1: Project Scope

## End-to-End User Journey

### 1. Repository Setup
```bash
# Clone and setup
git clone https://github.com/parseltongue/analyzer.git
cd analyzer
./setup.sh
```

### 2. System Initialization
- System verifies/installs dependencies
- Database initializes
- Services auto-start
- User sees startup success:
  ```
  ✓ Web UI: http://localhost:3000
  ✓ Java API: http://localhost:8080/health
  ✓ Rust API: http://localhost:8081/health
  ✓ MongoDB: Connected
  ```

### 3. Analysis Workflow
1. Access Interface
   - Open http://localhost:3000
   - View clean analysis dashboard

2. Start Analysis
   - Paste GitHub URL: https://github.com/username/repo
   - Select backend (Java/Rust)
   - Click "Analyze"

3. Monitor Progress
   - Watch real-time progress bar
   - View current operation
   - See file metrics

4. View Results
   - Analysis summary
   - Code structure
   - Metrics dashboard
   - Error reports (if any)

### Response Time Expectations
- Page Load: < 2s
- Repo Validation: < 1s
- Analysis Start: < 3s
- Full Analysis: < 5min (100MB repos)
- Results View: < 2s

## Core Features Scope

### Frontend Scope
- File upload interface for code analysis
- Backend selection toggle (Java/Rust)
- Real-time progress tracking display
- Basic error visualization
- Side-by-side results comparison

### Backend Scope
1. Java Backend
   - File analysis service
   - MongoDB integration
   - REST API endpoints
   - Progress tracking
   - Error handling

2. Rust Backend
   - Parallel file analysis
   - MongoDB operations
   - REST API implementation
   - Status management
   - Error handling

### Database Scope
- Analysis job storage
- Results persistence
- Progress tracking
- Error logs
- Basic analytics

### File Processing Scope
- ZIP file support
- Directory structure analysis
- Basic language detection
- File size limits: 100MB per file
- Max directory depth: 10 levels

## Technical Requirements

### Framework Requirements
1. Java Stack
   - Spring Boot 3.x
   - Spring Data MongoDB
   - Lombok
   - Spring Web
   - Spring Actuator
   - Gradle build system

2. Rust Stack
   - Actix-web
   - MongoDB driver
   - Tokio runtime
   - Serde serialization

### Infrastructure Requirements
- MongoDB 6.0+
- Java 21 JDK
- Node.js 20+ 
- Rust 1.70+ # Updated to latest stable version for better features
- Spring Boot CLI
- Tailwind CSS 3.x # Added version
- Next.js 14+ # Spring Boot 3.x removed since it's already in Framework Requirements

## Out of Scope
1. Authentication/Authorization
2. WebSocket implementation
3. Docker containerization
4. Advanced metrics/monitoring
5. Concurrent analysis jobs
6. Historical data analysis
7. UI animations
8. Theme customization
9. Performance optimizations
10. Mobile responsiveness
11. Cloud deployment
12. CI/CD pipelines
13. Advanced error recovery
14. Custom language support
15. Code modification features

## MVP Deliverables
1. Working file upload
2. Basic code analysis
3. Progress tracking
4. Results display
5. Error handling
6. Database storage
7. REST API endpoints
8. Configuration system

## Future Considerations
- Scalability improvements
- Additional language support
- Advanced analysis features
- User authentication
- Performance optimization
- Docker support
- Cloud deployment

