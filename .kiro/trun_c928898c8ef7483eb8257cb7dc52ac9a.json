{
  "input": "Give me the most amazing LLM prompt with idiomatic patterns to make mermaid diagrams which even a weak LLM - can make - ideally all images should be squarish so that they are easy to represent - Make it a thorough document so it can be used really well",
  "output": {
    "executive_summary": "Generating high-quality, squarish Mermaid diagrams using Large Language Models (LLMs), particularly weaker ones, requires a multi-faceted strategy focusing on prompt design, layout control, and error handling. The most effective approach involves crafting highly explicit prompts that define the LLM's role as a syntax expert, enforce a strict code-only output format, and provide clear rules to avoid common syntax errors. To achieve a 'squarish' aspect ratio, the prompt should instruct the LLM to use internal Mermaid configuration—preferably via modern `frontmatter` or a compatible `%%{init}%%` block—to manipulate layout direction (`TD` vs. `LR`), node and rank spacing, and text wrapping. While these internal heuristics influence the shape, the most reliable method for enforcing a specific aspect ratio is to embed the generated SVG into an external HTML/CSS wrapper that uses properties like `aspect-ratio: 1/1`. For ensuring syntactic validity, especially with less capable LLMs, a programmatic self-repair loop is paramount. This involves validating the LLM's output with a parser like `mermaid.parse()`, capturing any detailed error messages, and feeding them back to the LLM with instructions to apply minimal, targeted corrections. This iterative process transforms diagram generation from a single, error-prone attempt into a reliable, convergent process. For weaker models, additional heuristics such as using a conservative feature set, enforcing simple naming conventions, and breaking down complex requests into smaller chunks are crucial for success.",
    "runtime_prompt_template": "You are a silent Mermaid diagram generator. You will be given a description of a diagram. Your ONLY output will be the Mermaid code for that diagram, enclosed in a single ```mermaid ... ``` code block. You will not add any commentary, explanation, or any text outside of the code block.\n\nUse an `%%{init}%%` directive to ensure the diagram has a balanced, squarish layout. Set nodeSpacing and rankSpacing to 75. Set wrappingWidth to 150 to prevent nodes from being too wide. To avoid errors, enclose all node and link text in double quotes.\n\nThe diagram to generate is a [DIAGRAM_TYPE, e.g., flowchart] with a [ORIENTATION, e.g., TD or LR] orientation. It should describe the following:\n\n[DETAILED_DESCRIPTION_OF_YOUR_DIAGRAM_LOGIC_AND_FLOW]",
    "master_prompt_blueprint": {
      "role_specification": "Assign a specific, expert persona to the LLM to focus its task. Start the prompt with a clear role definition, such as: 'You are an Expert Mermaid Syntax Engineer.' or 'You are a specialized Mermaid Diagram Code Generator.' This sets the context and instructs the model to prioritize syntactical correctness and adherence to Mermaid's language standards.",
      "output_contract": "Enforce a strict, machine-readable output format to eliminate conversational filler and ensure the response is directly usable. The rules must be explicit: 1. The entire response must be a single fenced code block. 2. The code block must use the `mermaid` language tag (e.g., ```mermaid ... ```). 3. Absolutely no explanations, titles, apologies, or any other text should appear before or after the code block. This is critical for programmatic use and for weaker LLMs that are prone to adding extraneous text.",
      "layout_heuristics": "Provide detailed instructions on using Mermaid's features to approximate a squarish aspect ratio. The prompt should guide the LLM to: 1. Use Frontmatter (`--- ... ---`) as the modern, preferred method for configuration. 2. Choose the layout direction (`direction LR` or `direction TD`) that best balances the diagram's content. 3. Adjust spacing parameters like `nodeSpacing` and `rankSpacing` to control density. 4. Use `<br/>` tags to wrap long labels, preventing nodes from becoming excessively wide. 5. For complex diagrams, recommend using the 'ELK' layout algorithm (`layout: elk`) for its superior arrangement capabilities, which can lead to more compact and balanced outputs.",
      "validation_and_self_check_steps": "Instruct the LLM to perform an internal validation routine before emitting the final code. This acts as a preventative measure against common errors. The prompt should include a checklist for the LLM to follow: '1. Syntax Check: Does every line conform to the Mermaid syntax for the chosen diagram type? 2. Balance Check: Are all brackets, parentheses, and quotation marks properly closed? 3. Connectivity Check: Are all defined nodes connected as requested? 4. Logic Check: Does the diagram accurately represent the user's request? 5. Security Check: Does the code avoid JavaScript callbacks (`click ... callback`) unless explicitly authorized by the user?'",
      "error_repair_loop_instructions": "Define a clear process for the LLM to correct errors based on external feedback, which is the most powerful technique for ensuring valid output. The instructions should be: 'If you are provided with a previous attempt and a parser error message (e.g., `Parse error on line X... Expecting 'Y', got 'Z'`), your task is to fix the error with the smallest possible change. 1. Identify the specific line and token causing the error from the message. 2. Apply the minimal change required to fix only that error, preserving the rest of the code. 3. Re-run your internal self-check before outputting the fully corrected code in the required single-fenced-block format.'"
    },
    "squarish_layout_strategies": {
      "internal_mermaid_config": "Internal Mermaid configurations offer several ways to influence the diagram's aspect ratio, even without direct size controls. The most effective strategies are:\n1.  **Layout Direction (`rankdir` or `direction`):** This is the most powerful internal tool. For flowcharts and similar diagrams, you can choose between `TD`/`TB` (Top-to-Bottom) for a vertical flow or `LR` (Left-to-Right) for a horizontal flow. The strategy is to choose the direction that counteracts the diagram's natural shape. For a long, sequential process (naturally tall), using `LR` will make it wider and more square. For a process with many parallel steps (naturally wide), `TD` will make it taller and more balanced.\n2.  **Spacing Parameters:** These can be set in a `frontmatter` or `%%{init}%%` block. `nodeSpacing` controls the distance between nodes on the same level, while `rankSpacing` controls the distance between levels. By adjusting these values (e.g., setting them to be similar, like `nodeSpacing: 70` and `rankSpacing: 70`), you can compress or expand the diagram along its axes to better fit a square shape.\n3.  **Text Wrapping (`wrappingWidth`):** Long text labels create wide nodes, which can stretch the diagram horizontally. By setting a `wrappingWidth` (e.g., `150`), you force text to wrap, creating taller, narrower nodes. This significantly impacts the layout engine's calculations and can help produce a more compact diagram.\n4.  **Subgraphs:** Grouping related nodes into `subgraph` blocks can help manage layout. A subgraph can even have its own `direction` (e.g., an `LR` subgraph within a `TD` diagram) to break up a linear flow, although this can have inconsistent results if nodes link outside the subgraph.\n5.  **`useMaxWidth` Configuration:** This boolean setting (default `true`) makes the diagram scale to 100% of its container's width. Setting it to `false` forces the diagram to use its absolute calculated size, which can prevent unwanted stretching and result in a more naturally proportioned, potentially squarish, shape within a controlled container.",
      "external_css_strategies": "External CSS provides the most reliable and forceful method for ensuring a square rendering of Mermaid diagrams by controlling the container in which the SVG is placed. Two primary techniques are recommended:\n1.  **Modern `aspect-ratio` Property:** This is the simplest and most direct method for modern browsers (Chrome 88+, Firefox 89+, Safari 15+). By applying `aspect-ratio: 1 / 1;` or `aspect-ratio: 1;` to the container `div` that holds the Mermaid SVG, you instruct the browser to maintain a perfect square aspect ratio. The SVG inside should then be styled with `width: 100%; height: 100%;` to fill this container.\n2.  **The 'Padding-Bottom Hack' (Legacy):** This classic technique offers excellent compatibility with older browsers. It works by creating a wrapper `div` with `position: relative;`, `height: 0;`, and `padding-bottom: 100%;`. Because vertical padding percentages are calculated based on the container's width, this creates a responsive square. The Mermaid diagram (or its own container) is then placed inside this wrapper with `position: absolute; top: 0; left: 0; width: 100%; height: 100%;` to make it fill the square space. This method is highly robust for creating responsive square containers.",
      "svg_attribute_patterns": "Understanding the SVG attributes generated by Mermaid is key to controlling how the diagram scales within its container, especially a square one. The crucial attributes are:\n1.  **`viewBox`:** This attribute (`viewBox=\"min-x min-y width height\"`) defines the diagram's internal coordinate system and intrinsic aspect ratio. Mermaid automatically generates this based on the diagram's content.\n2.  **`width` and `height`:** These attributes on the `<svg>` tag define the size of the SVG's viewport in the document. Mermaid often sets `width=\"100%\"` and omits `height`, making external CSS control essential.\n3.  **`preserveAspectRatio`:** This attribute dictates how the `viewBox` scales to fit the viewport when their aspect ratios differ. The default value is `xMidYMid meet`. \n    *   **`meet` (Default & Recommended):** This scales the diagram to be as large as possible while ensuring it is *entirely visible* within the container. If you place a rectangular diagram into a square container, `meet` will center it, leaving empty space on two sides (letterboxing or pillarboxing). This is the best option for ensuring the entire diagram is visible without distortion.\n    *   **`slice`:** This scales the diagram to *completely fill* the container, preserving its aspect ratio. This will cause parts of the diagram to be cropped if the aspect ratios do not match.\n    *   **`none`:** This stretches the diagram to fill the container, distorting its original aspect ratio. This is generally undesirable.\nFor a square layout, the best practice is to use a square CSS container and let the default `preserveAspectRatio=\"xMidYMid meet\"` center the potentially non-square diagram within it.",
      "layout_engine_guidance": "Mermaid supports different layout engines (renderers) that calculate the positions of nodes and edges. The choice of engine can significantly affect the layout's quality, compactness, and overall shape, especially for complex diagrams.\n1.  **Dagre (Default):** This is the standard layout engine used by Mermaid. It is fast and works well for most simple to moderately complex diagrams. However, it is noted as being largely unmaintained and can struggle with larger graphs, sometimes producing overlapping nodes or less-than-optimal layouts.\n2.  **ELK (Eclipse Layout Kernel):** This is an advanced, experimental renderer available since Mermaid v9.4+. It is designed to handle larger, more complex graphs more effectively and often produces more compact, readable, and aesthetically pleasing layouts. It is the engine used by the official Mermaid Live Editor for adaptive rendering. To use it, you must explicitly enable it in the configuration, typically via frontmatter:\n    ```mermaid\n    ---\n    config:\n      flowchart:\n        defaultRenderer: \"elk\"\n    ---\n    flowchart TD\n      A --> B\n    ```\nFor users aiming to create well-organized, 'squarish' diagrams from complex inputs, prompting the LLM to use the `elk` renderer is a highly recommended strategy as it excels at optimizing node arrangement and reducing wasted space."
    },
    "mermaid_syntax_crib_sheet": {
      "diagram_type": "Flowchart (`graph` or `flowchart`)",
      "header_keyword": "The diagram must start with `graph` or `flowchart` followed by a direction specifier. The most common are `TD` (Top-Down, default) for a vertical layout and `LR` (Left-to-Right) for a horizontal layout.",
      "core_syntax_summary": "Nodes are defined with an `id` and optional text in brackets. Example: `nodeId[\"Node Text\"]`. Different bracket types create different shapes: `[text]` (rectangle), `(text)` (rounded), `{text}` (rhombus), `((text))` (circle). Edges define relationships between nodes using arrow syntax. Example: `A --> B` (arrow link), `A --- B` (line link), `A -- text --> B` (link with text), `A -.-> B` (dotted link). It is a best practice to enclose all node and link text in double quotes to avoid parsing errors.",
      "layout_options": "The primary layout options are the direction keywords specified in the header: `TD` or `TB` (Top-Down/Top-to-Bottom), `LR` (Left-to-Right), `BT` (Bottom-to-Top), and `RL` (Right-to-Left). Choosing `LR` for a naturally tall process or `TD` for a naturally wide process is a key strategy for achieving a more 'squarish' aspect ratio.",
      "common_pitfalls_and_fixes": "1.  **Reserved Word 'end':** The lowercase word `end` is a keyword and will break the parser if used as unquoted node text (e.g., `A --> end`). **Fix:** Always enclose it in double quotes (`A --> \"end\"`) or capitalize it (`A --> End`).\n2.  **Special Characters in Node IDs:** A node ID starting with `o` or `x` can be misinterpreted as a special edge type (e.g., `A--oB` creates a circle-tipped edge). **Fix:** Add a space after the link (`A-- oB`) or capitalize the ID (`A-- OB`).\n3.  **Spaces and Special Characters in Text:** Text containing spaces or special characters must be enclosed in double quotes to be parsed correctly. **Fix:** `nodeId[\"This is my node\"]` instead of `nodeId[This is my node]`.\n4.  **Comments:** Comments must start with `%%`. Using curly braces inside a comment (`%% {config} %%`) can break the renderer as this syntax is reserved for directives."
    },
    "diagram_type_inference_guide": {
      "keyword_to_type_matrix": "This matrix maps diagram types to primary keywords, structural cues, and secondary cues for an LLM to infer user intent. \n\n| Inferred Diagram Type | Primary Declaration | Primary Keywords & Structural Cues | Secondary Cues & Common Elements |\n|---|---|---|---|\n| **Flowchart** | `flowchart` or `graph` | `-->`, `---`, `subgraph`, node shapes: `[]`, `()`, `(())`, `{}`, `{{}}`, `>]`, `[/]`, `[\\\\]` | `direction TD/LR/RL/BT`, `style`, `classDef`, `link`, `click`, `note` |\n| **Sequence Diagram** | `sequenceDiagram` | `participant`, `actor`, `->>`, `-->>`, `activate`, `deactivate`, `loop`, `alt`, `opt`, `par` | `autonumber`, `title`, `note left of/right of`, `link`, `links`, `+`/`-` for condensed activation |\n| **Class Diagram** | `classDiagram` | `class`, `interface`, visibility markers (`+`, `-`, `#`, `~`), generics (`~Type~`), relationships (`--`, `|--`, `*--`, `o--`, `-->`, `..>`), cardinality (`\"1\" -- \"0..*\"`) | `direction LR/TD`, `note` |\n| **State Diagram** | `stateDiagram-v2` | `state`, `[*] -->` (start/end), `<<choice>>`, `<<fork>>` `<<join>>`, concurrency (`--`) | `direction LR/TD`, `subgraph`, `note left of/right of` |\n| **ER Diagram** | `erDiagram` | Entity definitions (`ENTITY { type name \"comment\" }`), `PK`, `FK`, relationships (`|o--o{`, `|o--||`, `}o--o{`, etc.) | Entity names with spaces must be in double quotes. |\n| **User Journey** | `journey` | `title`, `section`, task format (`TaskName: Score: Actor1, Actor2`) | Emotion/rating scores (e.g., `5`, `3`, `X`) |\n| **Gantt Chart** | `gantt` | `dateFormat`, `axisFormat`, `todayMarker`, `section`, `Task Name :status, id, date, duration`, `milestone` | Task statuses (`crit`, `active`, `done`), `title`, `click` |\n| **Pie Chart** | `pie` | `title`, label-value pairs (`\"Label\": value`) | `showData` (to display percentages) |\n| **Mindmap** | `mindmap` | Hierarchical indentation (e.g., `-`, `--`, `---`), node shapes (`()`, `(())`, `[]`, `([])`, `>`) | Root node at the start |\n| **Timeline** | `timeline` | `title`, `section`, `YYYY-MM-DD : Event Name` or `Period : Event 1 : Event 2` | Chronological event listing |\n| **GitGraph** | `gitGraph` | `commit`, `branch`, `checkout`, `merge` | `commit id:\"...\"` |\n| **Quadrant Chart** | `quadrantChart` | `title`, `x-axis`, `y-axis`, quadrant names (`quadrant-1`, etc.), data points (`Point Name: [x, y]`) | |\n| **C4 Diagram** | `c4` (Experimental) | Keywords like `System`, `Container`, `Component`, `Person`, `Rel` | Follows C4 modeling notation. |",
      "conflict_resolution_rules": "To ensure predictable behavior, the LLM must follow a strict order of operations when inferring the diagram type:\n\n1.  **Highest Priority: Explicit Type Flag:** If the user's prompt contains an explicit declaration (e.g., `type: class`, `diagram: sequence`), this declaration **must** be honored above all other keywords or structural analysis. This provides a direct override for the user.\n\n2.  **Second Priority: Primary Declaration Keyword:** If no explicit flag is present, the presence of a primary declaration keyword (e.g., `flowchart`, `sequenceDiagram`, `gantt`) is the next strongest signal.\n\n3.  **Third Priority: Strong Structural Cues:** In the absence of the above, the LLM should analyze the input for unique structural cues. For example:\n    *   The presence of `participant` or `actor` strongly implies a `sequenceDiagram`.\n    *   The presence of `class { ... }` syntax strongly implies a `classDiagram`.\n    *   The presence of `dateFormat` and `section` followed by tasks with dates strongly implies a `gantt` chart.\n\n4.  **Handling Ambiguity:** There are known areas of ambiguity:\n    *   **Flowchart vs. State Diagram:** A state diagram can resemble a flowchart. If `state` keywords or start/end markers (`[*]`) are present, infer `stateDiagram-v2`. Otherwise, `flowchart` is the safer choice.\n    *   **ERD vs. Class Diagram:** Both model structures. If keywords like `PK`, `FK`, or `erDiagram` are used, infer ERD. If visibility markers (`+`, `-`) and `class` definitions are used, infer Class Diagram.",
      "safe_default_strategy": "When the diagram type cannot be confidently determined after applying the priority rules, a safe default must be used to prevent errors and provide a useful starting point.\n\n*   **Default Diagram Type:** The default type for any ambiguous process or workflow description is **`flowchart TD`** (Top Down).\n\n*   **Example of Ambiguous Input:** \"Show the process of a user logging in. The user enters their credentials. If they are correct, they see the dashboard. If not, they see an error message.\"\n\n*   **LLM Action:** This could be a flowchart, sequence diagram, or state diagram. Since no strong keywords are present, the LLM should default to generating a `flowchart TD`.\n\n*   **Controlled Failure Mode for Clarification:** To avoid conversational loops, a 'weak LLM' should not ask for clarification. Instead, it should use a controlled failure mode that provides output while guiding the user. The instruction for the LLM is: If you must default to `flowchart TD` due to ambiguity, you **must** generate the flowchart code and include a Mermaid comment at the top of the code block explaining the assumption, like `%% Assumption: The diagram type was ambiguous, so a Flowchart was generated. %%`."
    },
    "error_handling_and_self_repair_loop": {
      "error_detection_method": "Programmatic error detection is achieved by leveraging Mermaid.js's parsing APIs. The primary function is `mermaid.parse(code, parseOptions)`, an asynchronous function that validates syntax. By default, it throws an error on invalid code. A more robust method involves using `mermaid.setParseErrorHandler(handler)` or `mermaid.parseError = handler` to set a custom error handler. This handler intercepts detailed error information in the form of an `err` string and a structured `hash` object. The `hash` object is crucial for self-repair as it contains machine-readable details: `text` (the character that caused the failure), `token` (the type of token identified), `line` (the line number of the error), and `expected` (an array of tokens the parser was anticipating). This `expected` array provides a direct menu of correct options for the LLM to use in its repair attempt. Another option is to use `mermaid.parse()` with `parseOptions.suppressErrors` set to `true`, which returns `Promise<false>` for invalid code, providing a simple boolean validity check.",
      "iterative_repair_process": "The self-repair loop is an iterative cycle designed to refine LLM-generated code until it is syntactically valid. The process, as demonstrated by Microsoft's GenAIScript, follows these steps: 1. **Generate:** The LLM produces the initial Mermaid diagram code. 2. **Validate:** The application attempts to parse the code using `mermaid.parse()` with a custom error handler. 3. **Detect & Capture:** If parsing fails, the error handler captures the detailed error message (`err.str`) and the structured error data (`hash` object). 4. **Feedback & Re-prompt:** A new prompt is constructed for the LLM. This prompt includes the original request, the faulty code, and the specific error feedback (e.g., \"The code failed with error: [err.str]. The parser expected one of: [hash.expected]. Please fix the code.\"). 5. **Correct:** The LLM, guided by the specific error context, generates a corrected version of the code. 6. **Iterate:** The process repeats from step 2 until `mermaid.parse()` succeeds, at which point the loop terminates, yielding a syntactically valid diagram.",
      "minimal_change_principles": "To guide an LLM towards making targeted, minimal fixes rather than regenerating the entire diagram, the prompt should leverage the detailed error information provided by Mermaid's parser. The principle is to transform the task from a broad creative one into a constrained debugging one. The `line` number and visual pointer (`^`) in the error string direct the LLM to the exact location of the fault. The `expected` array within the error's `hash` object provides a direct list of valid tokens, suggesting what the incorrect token should be replaced with. The repair prompt should explicitly instruct the LLM to 'apply the smallest possible change to fix only the identified problem' and 'preserve the rest of the valid code.' This approach minimizes the risk of introducing new errors while correcting the existing one."
    },
    "validation_toolchain_overview": {
      "api_based_validation": "Programmatic validation in a Node.js environment is primarily done using the `mermaid` library's APIs. The core function is `mermaid.parse(text, parseOptions)`, an asynchronous function that validates syntax without rendering. It returns a promise that resolves on success or throws a detailed error on failure, which can be caught in a `try...catch` block. Setting `parseOptions.suppressErrors` to `true` makes it return `false` on failure instead of throwing. For structured error handling, `mermaid.setParseErrorHandler(callback)` allows defining a global callback to process error objects. Other useful functions include `mermaid.detectType(text)` to identify the diagram type before parsing and `mermaid.run(options)` (the modern replacement for `mermaid.init()`), which handles rendering and includes an `options.suppressErrors` flag. For security, `mermaid.initialize({ securityLevel: 'sandbox' })` is critical to prevent XSS attacks when rendering untrusted diagrams.",
      "cli_based_validation": "For headless validation and rendering, the standard tool is `@mermaid-js/mermaid-cli`, also known as `mmdc`. It can be installed via npm or used with npx or Docker. `mmdc` uses a headless browser (Puppeteer) to render diagrams, ensuring output is identical to a web browser. Its primary use is converting a Mermaid definition file (`.mmd`) into an image (`.svg`, `.png`, `.pdf`) via a command like `mmdc -i input.mmd -o output.svg`. Validation is performed by checking the command's exit code; a non-zero code indicates a syntax error. A significant finding is that `mmdc` can hang indefinitely on syntax errors, so it should be run within a process that has a timeout. The tool also allows for customization of output dimensions (`--width`, `--height`), themes (`--theme`), and background color, which is useful for achieving 'squarish' images.",
      "ci_cd_integration_patterns": "The `mermaid-cli` (`mmdc`) tool is ideal for integrating Mermaid validation into CI/CD pipelines like GitHub Actions. A common pattern is to add a step in the workflow that runs `mmdc` on all `.mmd` files in the repository. The script checks the exit code of the `mmdc` command; if it's non-zero, it signifies a syntax error, and the pipeline is configured to fail, preventing broken diagrams from being merged. This can also be used for automation, such as automatically regenerating and committing diagram images (e.g., SVGs) into documentation whenever the source `.mmd` files are updated. Using the `minlag/mermaid-cli` Docker image within a CI/CD job is a recommended practice to ensure a consistent, dependency-free execution environment."
    },
    "heuristics_for_weak_llms": {
      "strict_syntax_and_grammar": "Enforce a minimal and strict set of Mermaid's grammatical rules to reduce ambiguity. The prompt must instruct the LLM to: 1. Always begin the diagram with a type declaration (e.g., `flowchart TD`, `sequenceDiagram`). 2. Use `%%` for single-line comments and explicitly forbid curly braces `{}` within them. 3. Use the `<br>` tag for all multiline text within nodes. 4. Always enclose node text and link labels in double quotes (`\"\"`) to prevent parsing errors from special characters or reserved words.",
      "conservative_feature_set": "Explicitly forbid the use of features and patterns known to cause parsing errors, especially in older or stricter environments. The prompt should contain a 'forbidden list': 1. The unquoted, lowercase word 'end' must not be used as a node ID or label; it must be quoted (`\"end\"`) or capitalized (`End`). 2. Avoid using the pipe character (`|`) in node or subgraph identifiers. 3. When defining flowchart links, avoid starting a connecting node's ID with `o` or `x` unless a space is added (e.g., `A --- oB`) to prevent it from being misinterpreted as a special edge type. 4. Avoid complex nested shapes unless the inner shape is wrapped in quotes.",
      "naming_conventions": "Mandate simple and consistent naming conventions for all identifiers to reduce the risk of syntax errors. The prompt should specify: 1. All node and entity IDs must be short, alphanumeric, and contain no spaces or special characters (e.g., `NodeA`, `Process1`, `UserDB`). 2. If a descriptive, multi-word name is required for a node, it must be provided as the node's text, separate from the simple ID (e.g., `id[\"This is the full node text\"]`).",
      "complexity_management": "Provide strategies to handle complex inputs that might otherwise lead to convoluted or invalid diagrams. The prompt should guide the LLM to: 1. Break down large, multi-part processes into multiple, simpler diagrams. 2. For complex but single-diagram requests, instruct the use of the `elk` layout renderer (`layout: elk` in Frontmatter) for its superior ability to handle dense graphs and reduce overlaps. 3. As a highly robust alternative for complex tasks, adopt a two-step generation process: first, prompt the LLM to output a structured JSON representation of the diagram's logic, and then use deterministic code to convert that JSON into valid Mermaid syntax. This offloads the strict syntax generation from the LLM."
    },
    "interactivity_and_security_guide": {
      "interactivity_syntax": "The primary mechanism for adding interactivity in Mermaid is the `click` directive. This single directive handles both URL navigation and JavaScript function execution. The syntax varies based on the desired action:\n\n1.  **Linking to a URL:** This is the most common and safer method for interactivity. The syntax is `click nodeId href \"URL\" \"Optional Tooltip\" _target`.\n    *   `nodeId`: The ID of the diagram node that will become clickable.\n    *   `href`: The keyword indicating a URL link.\n    *   `\"URL\"`: The destination URL, which must be enclosed in double quotes.\n    *   `\"Optional Tooltip\"`: An optional string in double quotes that appears as a tooltip on hover.\n    *   `_target`: An optional target for the link, such as `_blank` to open in a new tab, or `_self`, `_parent`, `_top`.\n    *   Example: `click MyNode href \"https://mermaid.js.org\" \"Visit the Mermaid Docs\" _blank`\n\n2.  **Executing a JavaScript Callback:** This method provides powerful custom functionality but carries significant security risks. The syntax is `click nodeId callback \"Optional Tooltip\"`.\n    *   `callback`: The name of a globally-defined JavaScript function (e.g., attached to the `window` object) that will be executed upon clicking the node. The function often receives the node's ID as an argument.\n    *   Example: `click MyNode showAlert \"Shows an alert\"` where `window.showAlert = function(nodeId) { alert('Node ' + nodeId + ' was clicked!'); };` is defined elsewhere in the HTML.\n\nThere are no separate `link` or `links` directives; all interactivity is managed through the versatile `click` directive.",
      "security_level_configuration": "The `securityLevel` setting is a critical configuration introduced in Mermaid version 8.2 to mitigate security risks, particularly Cross-Site Scripting (XSS). It dictates how Mermaid handles potentially unsafe content like embedded HTML and JavaScript. This setting must be deliberately changed from its default to enable any interactive features. The levels are:\n\n*   `'strict'` (Default): This is the most secure level and is the default for all Mermaid installations. It disables all `click` functionality (both URL links and JS callbacks) and encodes any HTML tags found in node text into displayable characters (e.g., `<` becomes `&lt;`). This effectively prevents all script execution and linking.\n\n*   `'antiscript'`: A compromise between security and functionality. It enables `click` functionality for URL links and allows most HTML tags for rich text formatting within nodes, but it actively sanitizes and strips out `<script>` elements to prevent direct script injection.\n\n*   `'loose'`: The most permissive and dangerous level. It allows all HTML tags, including `<script>`, and enables all `click` functionality, including JavaScript callbacks. This setting should **only** be used in a fully trusted environment where the diagram source is guaranteed to be safe, as it opens a significant vector for XSS attacks.\n\n*   `'sandbox'` (Beta): This level renders the diagram within a sandboxed `<iframe>`. This provides the highest level of isolation, preventing any scripts from executing, popups from appearing, or links from targeting other browser tabs. However, this can severely restrict or break legitimate interactive features.\n\nTo enable interactivity, the `securityLevel` must be configured either globally via `mermaid.initialize({ securityLevel: 'loose' });` in a script tag or on a per-diagram basis using a directive like `%%{init: {'securityLevel': 'loose'}}%%`.",
      "vulnerabilities_and_mitigations": "Several security vulnerabilities have been identified in Mermaid, primarily related to its ability to render HTML and execute JavaScript. Mitigating these is crucial, especially when processing untrusted or LLM-generated content.\n\n**Known Vulnerabilities:**\n\n1.  **Cross-Site Scripting (XSS):** This is the most significant risk. If the `securityLevel` is set to `'loose'`, an attacker can embed malicious JavaScript within a node's label (e.g., `A[\"<script>alert('XSS')</script>\"]`) or via a `click` callback (`click A \"javascript:alert('XSS')\"`).\n    *   **CVE-2025-54880 (CWE-79):** A specific XSS vulnerability affected Mermaid versions 11.9.0 and earlier. User-supplied input for architecture diagram icons was passed directly to the `d3.html()` method without proper sanitization, allowing for script execution. This was patched in version 11.10.0.\n\n2.  **Remote Image Fetch and Data Exfiltration:**\n    *   **GHSA-43wj-mwcc-x93p:** A critical vulnerability was found where an attacker, through prompt injection, could embed a remote image in a Mermaid diagram. The application's subsequent fetch of this image could be manipulated to exfiltrate sensitive local data (like file contents) to an attacker-controlled server. This highlights the danger of allowing diagrams to fetch external resources.\n\n**Mitigation Strategies:**\n\n*   **Enforce `securityLevel: 'strict'`:** This is the most effective mitigation, as it disables the primary attack vectors (clicks and HTML rendering) by default.\n*   **Use the `secure` Configuration Key:** When initializing Mermaid via `mermaid.initialize()`, a site owner can use the `secure` array to lock down critical settings like `securityLevel`, `maxTextSize`, and `maxEdges`. This prevents individual diagrams from overriding these security settings with `%%{init}%%` directives.\n*   **Input Sanitization:** Always treat LLM-generated or user-provided diagram code as untrusted. Use a sanitizer like DOMPurify on the input. However, be aware of compatibility issues; for instance, DOMPurify 3.1.7 was reported to break Mermaid diagrams, requiring a downgrade to 3.1.6.\n*   **Block External Fetches:** In the rendering environment, disallow Mermaid diagrams from fetching any remote resources, including images, to prevent data exfiltration vulnerabilities.\n*   **Stay Updated:** Regularly update to the latest stable version of Mermaid.js and its dependencies (like DOMPurify) to benefit from the latest security patches.",
      "conditional_prompting_guidance": "To instruct a Large Language Model (LLM), especially a weaker one, to add interactive features only when explicitly requested, the prompt must be highly structured and conditional. This prevents the LLM from generating insecure code by default.\n\n**Recommended Prompt Structure:**\n\n1.  **Establish a Trigger Condition:** Instruct the LLM to analyze the user's input for specific triggers. These can be the presence of URLs associated with nodes or an explicit flag like `[interactive: true]`.\n\n2.  **Define Conditional Actions:** The prompt should clearly state what the LLM must do *if and only if* the trigger condition is met.\n    *   **Action A: Enable Interactivity:** The LLM must be instructed to add a configuration block at the very top of the Mermaid code to lower the security level. Example: `\"If interactivity is requested, you MUST add a %%{init: {'securityLevel': 'loose'}}%% directive at the top of the code.\"`\n    *   **Action B: Add Click Directives:** The LLM must be instructed to add a `click` directive for each node that has a corresponding URL. The prompt should specify the exact format. Example: `\"For each node with a URL, add a 'click' directive in the format: click nodeId href \\\"URL\\\" \\\"Tooltip text\\\" _blank.\"`\n\n3.  **Define the Default (Secure) Behavior:** The prompt must explicitly state what to do if the trigger condition is NOT met. This is the most important part for ensuring security.\n    *   **Action:** `\"If no URLs or interactive flag are provided, you MUST NOT include the %%{init}%% directive or any 'click' directives. The diagram must be static.\"`\n\nThis clear, rule-based approach transforms the task from a creative one to a logical one, making it easier for a weaker LLM to follow correctly and avoid generating insecure, interactive diagrams unless specifically authorized."
    },
    "versioning_and_initialization_guide": {
      "configuration_hierarchy": "Mermaid applies configurations in a specific order of precedence, where settings applied later override those applied earlier. Understanding this hierarchy is crucial for predicting how a diagram will render.\n\n1.  **Default Configuration:** These are the built-in settings that ship with the Mermaid library. They form the baseline for all diagrams.\n\n2.  **Site-Level Configuration (`mermaid.initialize()`):** A website or application integrator can make a single JavaScript call to `mermaid.initialize()` to set site-wide configurations. This is the primary method for setting global defaults, such as the theme or security level, for all diagrams on a page. These settings override the default configuration. The older `mermaid.init()` function is deprecated as of version 10.0.0 and should not be used.\n\n3.  **Diagram-Specific Configuration:** These are overrides applied to individual diagrams and have the highest precedence. They allow for customizing a single diagram without affecting others on the same page. There are two ways to apply these:\n    *   **Frontmatter (Highest Precedence):** A YAML block enclosed in `---` at the very top of the diagram code. This is the modern, recommended method since version 10.5.0. It can override almost the entire Mermaid configuration, except for security settings locked by the site-level `secure` key.\n    *   **Directives (Lower Precedence than Frontmatter):** A configuration block formatted as `%%{init: { ... }}%%`. This method is officially deprecated as of v10.5.0 but is still widely supported for backward compatibility.",
      "frontmatter_vs_directives": "For diagram-specific configuration, Mermaid provides two methods with different use cases and levels of support.\n\n**Frontmatter:**\n*   **Syntax:** A YAML block enclosed by `---` at the very beginning of the Mermaid code.\n    ```mermaid\n    ---\n    title: My Diagram\n    config:\n      theme: 'dark'\n      flowchart:\n        nodeSpacing: 80\n    ---\n    graph TD\n        A --> B\n    ```\n*   **Status:** Modern and recommended standard since Mermaid v10.5.0.\n*   **Pros:** Offers extensive control over the diagram's configuration, including title and layout settings. It is the future-proof method for styling.\n*   **Cons:** Badly formed YAML will break the diagram. Misspelled parameters are silently ignored. It may not be supported in older environments or renderers that have not updated to a recent Mermaid version.\n\n**Directives (`%%{init:}%%`):**\n*   **Syntax:** A JSON object inside a special comment block.\n    ```mermaid\n    %%{init: { \"theme\": \"dark\", \"flowchart\": { \"nodeSpacing\": 80 } }}%%\n    graph TD\n        A --> B\n    ```\n*   **Status:** Deprecated as of Mermaid v10.5.0.\n*   **Pros:** Crucial for backward compatibility. Older renderers that do not recognize frontmatter will often still support directives. Because it is formatted as a comment, older versions of Mermaid that don't support it will simply ignore it, making it a relatively safe inclusion.\n*   **Cons:** Less powerful than frontmatter and is being phased out.\n\n**Guidance for LLMs:** For maximum compatibility, especially with a weak LLM or when the target environment is unknown, instructing the LLM to use the `%%{init:}%%` directive is a safer bet. For modern, known environments, prompting for `frontmatter` is preferred.",
      "theming_guidance": "Mermaid provides a robust theming system to control the visual appearance of diagrams, introduced in version 8.7.0.\n\n**Built-in Themes:**\nMermaid offers five pre-defined themes that can be set using the `theme` property in a configuration block:\n*   `default`: The standard Mermaid look.\n*   `neutral`: A grayscale theme, well-suited for black-and-white printing.\n*   `dark`: A theme designed for dark mode UIs.\n*   `forest`: A green-tinted theme.\n*   `base`: A special theme that serves as a blank canvas for custom styling. It applies minimal styling, making it the required choice when using `themeVariables`.\n\n**Custom Theming with `themeVariables`:**\nFor fine-grained control over colors and fonts, you can use the `themeVariables` object in your configuration. \n*   **Requirement:** To use `themeVariables`, you **must** set `\"theme\": \"base\"`. If you specify any other theme (e.g., `dark`), your `themeVariables` will be ignored.\n*   **Key Variables:** Common variables include:\n    *   `primaryColor`: The main background color for nodes.\n    *   `primaryTextColor`: The color of text inside nodes.\n    *   `lineColor`: The color of edges and borders.\n    *   `fontFamily`: The font to be used (e.g., `\"sans-serif\"`).\n    *   `fontSize`: The size of the text (e.g., `\"16px\"`).\n*   **Color Format:** The theming engine only recognizes hexadecimal color codes (e.g., `\"#ECECFF\"`). Color names (e.g., 'black') are not supported and will be ignored.\n\n**Example of a Custom Theme:**\n```mermaid\n%%{init: {\n  \"theme\": \"base\",\n  \"themeVariables\": {\n    \"primaryColor\": \"#ECECFF\",\n    \"primaryTextColor\": \"#333\",\n    \"lineColor\": \"#333\",\n    \"fontSize\": \"14px\"\n  }\n}}%%\ngraph TD; A-->B;\n```",
      "known_breaking_changes": "Staying aware of breaking changes is crucial for maintaining compatibility, especially when generating code that might be rendered in different environments with different Mermaid versions.\n\n*   **v11.0.0:** Breaking changes are anticipated in this future release.\n\n*   **v10.5.0:** The `%%{init:}%%` directive was officially deprecated in favor of `frontmatter` for diagram-specific configurations. While still supported, `frontmatter` is now the recommended standard.\n\n*   **v10.0.0:** The global initialization function `mermaid.init()` was deprecated and fully replaced by `mermaid.initialize()`. Using `mermaid.init()` in modern versions will cause errors.\n\n*   **v9.0.1 / v9.1.3 to v9.1.4:** These versions introduced significant breaking changes that particularly affected `gitGraph` diagrams. Users reported that diagrams which worked in earlier versions started rendering as empty SVGs after updating to v9.1.4.\n\n*   **v8.7.0:** This version introduced the modern dynamic and integrated theme configuration system. Code relying on older, ad-hoc styling methods may not work as expected in v8.7.0 and later."
    },
    "environment_compatibility_guide": {
      "environment_name": "GitHub, GitLab, and Obsidian",
      "sizing_and_aspect_ratio_handling": "The handling of diagram sizing and aspect ratio varies significantly across environments, impacting the goal of creating 'squarish' images.\n\n*   **GitHub:** Diagrams are rendered within a secure `<iframe>`. They are responsive and scale with the width of the container. There is **no direct way for a user to control the aspect ratio or set a fixed size**. The final shape is determined entirely by the diagram's content and GitHub's rendering pipeline. Custom CSS cannot be applied.\n\n*   **GitLab:** Similar to GitHub, diagrams are responsive and scale to the available width. There are **no user-facing controls for setting a fixed size or aspect ratio**. The layout is managed by GitLab's hard-coded configuration.\n\n*   **Obsidian:** This is the most flexible environment for size control. While Mermaid itself lacks aspect ratio settings, Obsidian allows users to add **custom CSS snippets**. By targeting the `.mermaid svg` selector, users can apply properties like `width`, `height`, `max-width`, or even use modern CSS like `aspect-ratio: 1 / 1;` to force diagrams into a square shape. This provides full control over the final rendered size.",
      "configuration_support": "Support for diagram-specific configurations like `frontmatter` and `%%{init:}%%` blocks is inconsistent across platforms.\n\n*   **GitHub:** Support is **very limited and unreliable**. Due to the secure, isolated rendering pipeline, most configuration directives, especially those related to themes, fonts, or security, are ignored. Basic directives might occasionally work, but they should not be relied upon.\n\n*   **GitLab:** There is **no support for `%%{init:}%%` directives or `frontmatter`**. GitLab's Mermaid configuration is hard-coded and cannot be overridden on a per-diagram basis. All diagrams will use GitLab's default theme (`neutral` or `dark`).\n\n*   **Obsidian:** Offers **excellent support for `%%{init:}%%` blocks**, making it the primary way to style and configure individual diagrams within the application. Users can set themes, fonts, colors, and other properties. Support for the more modern `frontmatter` depends on the version of Mermaid bundled with the specific Obsidian release, with newer versions more likely to support it.",
      "interactivity_support": "Support for interactive features like `click` events is almost entirely dependent on the environment's security model.\n\n*   **GitHub:** **Disabled**. Diagrams are rendered in a sandboxed `<iframe>` with a strict security policy. All `click` events, whether for URL links or JavaScript callbacks, are blocked for security reasons to prevent phishing and XSS attacks.\n\n*   **GitLab:** **Disabled**. Similar to GitHub, the environment enforces a strict security level, and interactive features are not supported. Links in diagrams will not be clickable.\n\n*   **Obsidian:** **Generally works**. As a local-first desktop application, Obsidian's security model is more permissive. Interactive features defined with the `click` directive can function, provided the necessary `securityLevel` is configured within the diagram's `%%{init:}%%` block. This makes Obsidian a good environment for creating and testing interactive diagrams."
    },
    "accessibility_and_readability_practices": {
      "color_contrast_guidelines": "Ensuring high color contrast is fundamental for readability, especially for users with visual impairments. Best practices are based on the Web Content Accessibility Guidelines (WCAG).\n\n**WCAG Contrast Ratios:**\n*   **Level AA (Minimum):** \n    *   Text and images of text must have a contrast ratio of at least **4.5:1** against their background.\n    *   Large-scale text (18pt regular or 14pt bold) requires a ratio of at least **3:1**.\n*   **Level AAA (Enhanced):**\n    *   Text requires a ratio of at least **7:1**.\n    *   Large-scale text requires a ratio of at least **4.5:1**.\n*   **Non-text Contrast (WCAG 1.4.11, Level AA):**\n    *   Graphical objects, such as the lines in a flowchart or the slices of a pie chart, must have a contrast ratio of at least **3:1** against adjacent colors. This is crucial for the diagram's structure to be perceivable.\n\n**Implementation in Mermaid:**\n*   **Themes:** Mermaid's built-in `neutral` theme is specifically noted as being well-suited for black-and-white or print-friendly outputs, which often have high contrast.\n*   **Custom `themeVariables`:** To meet specific contrast requirements, you must use `themeVariables` to set custom colors. You can use online contrast checkers to verify that your chosen `primaryColor`, `primaryTextColor`, and `lineColor` values meet the WCAG ratios. Remember that color should not be the only way to convey information; use labels and distinct shapes as well.",
      "typography_control": "Controlling typography is essential for ensuring text within diagrams is legible. Mermaid allows for the control of font family and size through its configuration system.\n\n**Method:**\nThe primary way to control fonts is by setting `fontFamily` and `fontSize` within the `themeVariables` object in a configuration block (`frontmatter` or `%%{init:}%%`).\n\n**Requirements:**\n*   You must set `\"theme\": \"base\"` for `themeVariables` to be applied.\n*   The font family should be a string representing a valid CSS font-family value (e.g., `\"sans-serif\"`, `\"'trebuchet ms', verdana, arial\"`).\n*   The font size should be a string with a unit (e.g., `\"16px\"`, `\"1.2em\"`).\n\n**Example Configuration:**\n```mermaid\n%%{init: {\n  \"theme\": \"base\",\n  \"themeVariables\": {\n    \"fontFamily\": \"'trebuchet ms', verdana, arial\",\n    \"fontSize\": \"16px\",\n    \"primaryTextColor\": \"#333\"\n  }\n}}%%\ngraph TD\n    A[Readable Text] --> B[Clearer Diagram]\n```\n\n**Label Length and Line Breaks:**\nFor readability, long labels should be avoided. To prevent nodes from becoming excessively wide, you can either set a `wrappingWidth` in the configuration or manually insert line breaks within node text using the `<br>` HTML tag. Example: `A[\"This is a very<br>long label\"]`.",
      "screen_reader_support": "Mermaid includes specific syntax to improve the accessibility of the generated SVG output for users of assistive technologies like screen readers. These features add descriptive text that is not visible but can be read aloud.\n\n**`accTitle` (Accessible Title):**\n*   **Purpose:** Provides a concise, single-line title for the diagram.\n*   **Syntax:** `accTitle: Your Diagram Title`\n*   **Implementation:** This generates a `<title>` element inside the SVG. The root `<svg>` tag is then given an `aria-labelledby` attribute that points to the ID of this `<title>` element, instructing screen readers to announce it as the diagram's name.\n\n**`accDescr` (Accessible Description):**\n*   **Purpose:** Provides a more detailed, multi-line description of the diagram's structure, content, and purpose.\n*   **Syntax:** For multi-line descriptions, enclose the text in curly brackets: `accDescr { This is a detailed, multi-line description of the diagram's structure and purpose. }`\n*   **Implementation:** This generates a `<desc>` element inside the SVG. The root `<svg>` tag is given an `aria-describedby` attribute pointing to this description, allowing screen readers to provide a full explanation to the user.\n\n**Example Usage:**\n```mermaid\n--- \ntitle: Login Flow\naccTitle: Flowchart of User Login Process\naccDescr { A flowchart showing the two paths for a user login attempt: success leading to the dashboard, and failure leading back to the login page. }\n---\ngraph TD\n    A --> B\n```\n\n**Limitation:** While these features provide a crucial summary, a significant finding is that screen reader support for the *internal content* of Mermaid diagrams (the individual nodes and relationships) is often limited. The `accTitle` and `accDescr` are therefore the most important tools for providing context to visually impaired users."
    },
    "llm_failure_modes_and_mitigations": {
      "common_failure_modes": "LLMs, especially weaker variants, frequently produce syntactically invalid Mermaid code. Common failure modes include: 1. **Incorrect Token Usage:** Generating incorrect arrow types (e.g., `->|` instead of `-->|`) or misplacing keywords, leading to parse errors like `Expecting 'SEMI', 'NEWLINE', ... got 'MINUS'`. 2. **Unescaped Special Characters:** Failing to enclose node labels or descriptions containing special characters (e.g., `(`, `)`, `:`, `|`, `@`) in double quotes, which breaks the parser. Even advanced models struggle to fix this without explicit guidance. 3. **Missing Arrow Types:** In sequence or flow diagrams, completely omitting the arrow type in a message or link definition. 4. **Extraneous Prose and Incorrect Formatting:** Adding conversational text, explanations, or apologies outside the Mermaid code block, or failing to wrap the code in the required fenced code blocks (```mermaid), which prevents it from being parsed.",
      "prompt_level_mitigations": "Several strategies can be implemented at the prompt level to improve reliability: 1. **Automatic Repair Loops:** This is a dynamic approach where the system validates the LLM's output. If a parse error occurs, the error message is captured and fed back to the LLM in a new prompt, instructing it to 'fix the error'. This iterative feedback loop is highly effective. 2. **Two-Step Generation (JSON to Mermaid):** A robust idiom where the LLM is first prompted to generate a structured JSON object representing the diagram's logic. Then, deterministic code (e.g., a Python or JS script) converts this reliable JSON into the final, strict Mermaid syntax. This offloads the burden of syntax adherence from the LLM to code. 3. **Strict Formatting Instructions:** The prompt must be highly explicit, demanding the output be enclosed in a ` ```mermaid ` code block and providing a clear set of 'Mermaid Rules' covering critical syntax like arrow types and quoting conventions. Guiding the LLM through structured 'operational phases' (e.g., Input Ingestion, Syntactic Perfection, Output Assembly) also improves performance.",
      "model_specific_observations": "The tendency to fail is more pronounced in 'weak LLMs,' a category that includes older ChatGPT variants and smaller open-source models like Llama-2/3 7B, Mistral 7B, and Phi-3. Gemini 2.5-flash-0520 was also noted as an 'underpowered LLM' that produced syntax errors. However, even advanced models are not immune; an instance of GPT-4.1 generating a syntax error that required an automatic repair loop was documented. The general consensus is that providing examples of correct Mermaid code (few-shot prompting) significantly helps weaker models adhere to the required syntax and patterns."
    },
    "diagram_specific_prompt_templates": [
      {
        "diagram_type": "Flowchart",
        "prompt_template_text": "\"Generate a Mermaid flowchart with a [Top-Down (TD) or Left-to-Right (LR)] direction. The chart should represent [describe the process or flow]. Output ONLY the raw Mermaid code. Do not include explanations or markdown fences.\"",
        "example_instantiation": "flowchart TD\n%%{init: {\"flowchart\": {\"useMaxWidth\": false, \"nodeSpacing\": 50, \"rankSpacing\": 70}, \"theme\": \"default\", \"diagramPadding\": 40}}%%\n\n%% -- Node Definitions --\nA[Start] --> B(Process 1);\nB --> C{Decision};\nC -->|Yes| D[Sub-process];\nC -->|No| E[End];\nD --> E;\n\n%% -- Optional Styling --\nstyle A fill:#cde,stroke:#333\nstyle E fill:#f99,stroke:#333"
      },
      {
        "diagram_type": "Sequence Diagram",
        "prompt_template_text": "\"Generate a Mermaid sequence diagram showing the interaction between [list participants]. The sequence should be: [describe message flow step-by-step]. Output ONLY the raw Mermaid code. Do not include explanations or markdown fences.\"",
        "example_instantiation": "sequenceDiagram\n%%{init: {\"sequence\": {\"useMaxWidth\": false, \"diagramMarginX\": 50, \"diagramMarginY\": 20}}}%%\nautonumber\n\nparticipant User\nparticipant WebServer\nparticipant DB as Database\n\nUser->>+WebServer: GET /data\nWebServer->>+DB: SELECT * FROM records;\nDB-->>-WebServer: Data records\nWebServer-->>-User: HTML Page"
      },
      {
        "diagram_type": "Class Diagram",
        "prompt_template_text": "\"Generate a Mermaid class diagram for a system with the following classes: [list classes and their properties/methods]. Show the relationships: [describe inheritance, composition, etc.]. Output ONLY the raw Mermaid code. Do not include explanations or markdown fences.\"",
        "example_instantiation": "classDiagram\n%%{init: {\"theme\": \"default\", \"diagramPadding\": 20, \"useMaxWidth\": false}}%%\n\nclass Animal {\n  +int age\n  +String gender\n  +isMammal()\n  +mate()\n}\nclass Duck {\n  +String beakColor\n  +swim()\n  +quack()\n}\nclass Fish {\n  -int sizeInFt\n  -canEat()\n}\n\nAnimal <|-- Duck\nAnimal <|-- Fish"
      },
      {
        "diagram_type": "State Diagram",
        "prompt_template_text": "\"Generate a Mermaid state diagram representing [describe the state machine]. The states are [list states] and the transitions are [describe transitions between states]. Output ONLY the raw Mermaid code. Do not include explanations or markdown fences.\"",
        "example_instantiation": "stateDiagram-v2\n%%{init: {\"theme\": \"default\", \"diagramPadding\": 40, \"useMaxWidth\": false}}%%\n\n[*] --> Off\nOff --> On : toggle\nOn --> Off : toggle\n\nstate On {\n  [*] --> Playing\n  Playing --> Paused : pause\n  Paused --> Playing : resume\n}"
      },
      {
        "diagram_type": "Entity Relationship Diagram (ERD)",
        "prompt_template_text": "\"Generate a Mermaid ER diagram for a database with entities: [list entities and their attributes]. The relationships are: [describe relationships between entities]. Output ONLY the raw Mermaid code. Do not include explanations or markdown fences.\"",
        "example_instantiation": "erDiagram\n%%{init: {\"theme\": \"default\", \"diagramPadding\": 20, \"useMaxWidth\": false}}%%\n\nCUSTOMER {\n  int id PK \"Primary Key\"\n  string name\n  string email\n}\nORDER {\n  int id PK\n  int customerId FK \"Foreign Key\"\n  datetime orderDate\n}\n\nCUSTOMER ||--|{ ORDER : places"
      },
      {
        "diagram_type": "Pie Chart",
        "prompt_template_text": "\"Generate a Mermaid pie chart titled '[Chart Title]'. The data is: [list labels and corresponding values]. Output ONLY the raw Mermaid code. Do not include explanations or markdown fences.\"",
        "example_instantiation": "pie\nshowData\ntitle Browser Market Share 2025\n\n\"Chrome\" : 65.2\n\"Safari\" : 18.5\n\"Edge\" : 5.4\n\"Firefox\" : 3.9\n\"Other\" : 7.0"
      },
      {
        "diagram_type": "Mind Map",
        "prompt_template_text": "\"Generate a Mermaid mind map with the root topic '[Root Topic]'. The main branches are [list main branches], and sub-branches are [describe sub-branches]. Output ONLY the raw Mermaid code. Do not include explanations or markdown fences.\"",
        "example_instantiation": "mindmap\n%%{init: {\"theme\": \"default\", \"diagramPadding\": 20}}%%\n  root((Project Goals))\n    QA\n      )Manual Testing(\n      ::icon(fa fa-bug) Bug Reports\n    Development\n      [Frontend]\n      [Backend]\n    Deployment\n      (-Cloud Server-)"
      }
    ],
    "common_errors_and_fixes_cheatsheet": [
      {
        "error_category": "Parse Error",
        "diagram_type": "Flowchart",
        "error_message_pattern": "Parse error on line X: ... got 'LINK_ID'",
        "cause_and_fix": "Cause: An unexpected or malformed identifier in a node's text, often due to an unquoted special character like '@'. Fix: Enclose the entire problematic node text in double quotes to ensure it's treated as a single string (e.g., `B[\"AuthController@che\"]`)."
      },
      {
        "error_category": "Parse Error",
        "diagram_type": "Flowchart",
        "error_message_pattern": "Parse error on line X: ... got 'PIPE'",
        "cause_and_fix": "Cause: Using a pipe character `|` within a subgraph's identifier, which is a reserved character. Fix: Remove or replace the pipe character in the subgraph identifier (e.g., change `subgraph For_each_|_Smart` to `subgraph For_each_Smart`)."
      },
      {
        "error_category": "Parse Error",
        "diagram_type": "Flowchart",
        "error_message_pattern": "Parse error on line X: ... Expecting 'NODIR', 'DIR', got 'SPACE'",
        "cause_and_fix": "Cause: A subtle syntax deviation, such as a misplaced space in an arrow definition, that a strict parser flags. Fix: Review the line for extra spaces or characters and correct the arrow syntax (e.g., from `-- --` to `-->`)."
      },
      {
        "error_category": "Parse Error",
        "diagram_type": "ER Diagram",
        "error_message_pattern": "Expecting 'NEWLINE', 'EOF', got 'LABEL'",
        "cause_and_fix": "Cause: Using an unquoted colon (`:`) to add a label to a relationship. Fix: Enclose the relationship label in double quotes (e.g., `users ||--o{ orders : \"places\"`)."
      },
      {
        "error_category": "Parse Error",
        "diagram_type": "ER Diagram",
        "error_message_pattern": "Expecting 'ATTRIBUTE_WORD', got 'error' or '...got 'COMMENT'",
        "cause_and_fix": "Cause: An attribute name starts with a number, which is not allowed. Quoting it may lead to a different error. Fix: Rename the attribute to begin with a letter (e.g., change `2fa_provider` to `two_fa_provider`)."
      },
      {
        "error_category": "Parse Error",
        "diagram_type": "ER Diagram",
        "error_message_pattern": "Expecting 'ATTRIBUTE_WORD', got 'BLOCK_STOP'",
        "cause_and_fix": "Cause: Missing a newline or proper separator between two consecutive entity definitions. Fix: Ensure each entity definition block is on its own line or properly separated by newlines."
      },
      {
        "error_category": "Parse Error",
        "diagram_type": "Sequence Diagram",
        "error_message_pattern": "Expecting 'SOLID_OPEN_ARROW', 'DOTTED_ARROW', ..., got 'NEWLINE'",
        "cause_and_fix": "Cause: An unexpected newline character, often invisible and introduced by copy-pasting, within an arrow definition. Fix: Manually re-type the entire line containing the arrow definition to remove hidden characters."
      },
      {
        "error_category": "Parse Error",
        "diagram_type": "Any (especially newer types like C4)",
        "error_message_pattern": "Expecting 'open_directive', 'NEWLINE', ..., got 'LINK' or '...got 'ALPHA'",
        "cause_and_fix": "Cause: Using incorrect syntax for a title (e.g., `---title:`) or using a newer diagram type/feature with an older Mermaid version that doesn't support it. Fix: First, remove the title line. If the error persists, the diagram type itself is likely unsupported by the target environment's Mermaid version."
      },
      {
        "error_category": "Lexical Error",
        "diagram_type": "Any",
        "error_message_pattern": "Lexical error on line X. Unrecognized text.",
        "cause_and_fix": "Cause: The presence of invisible characters, most commonly non-breaking spaces (`&nbsp;`) or other Unicode characters introduced from copy-pasting. Fix: Delete the entire problematic line and re-type it manually. Do not copy-paste it again."
      }
    ],
    "css_svg_wrapper_snippets": [
      {
        "technique_name": "Modern CSS `aspect-ratio` Property",
        "description": "This is the most direct and modern method. It uses the `aspect-ratio` CSS property to instruct the browser to maintain a 1:1 width-to-height ratio on the container. It is well-supported in all modern browsers (Chrome 88+, Firefox 89+, Safari 15+). The inner SVG is then set to fill this container.",
        "html_snippet": "<div class=\"mermaid-square-container\">\n  <!-- Your Mermaid div or the rendered SVG goes here -->\n  <div class=\"mermaid\">\n    graph TD\n      A-->B;\n  </div>\n</div>",
        "css_snippet": "/* The container that enforces the square shape */\n.mermaid-square-container {\n  width: 500px; /* Or any desired responsive width like 80% */\n  max-width: 100%;\n  aspect-ratio: 1 / 1; /* The magic property for a 1:1 ratio */\n  border: 1px solid #ccc; /* Optional: for visualization */\n}\n\n/* Ensure the Mermaid SVG fills the container */\n.mermaid-square-container .mermaid,\n.mermaid-square-container .mermaid svg {\n  width: 100%;\n  height: 100%;\n}"
      },
      {
        "technique_name": "Classic 'Padding-Bottom Hack' (Legacy/Fallback)",
        "description": "This technique is highly robust and compatible with virtually all browsers. It works because vertical padding percentages are calculated based on the container's width. By setting `height: 0` and `padding-bottom: 100%`, the container's height is forced to be equal to its width. The content is then absolutely positioned inside.",
        "html_snippet": "<div class=\"square-wrapper\">\n  <div class=\"square-content\">\n    <!-- Your Mermaid div or the rendered SVG goes here -->\n    <div class=\"mermaid\">\n      graph TD\n        A-->B;\n    </div>\n  </div>\n</div>",
        "css_snippet": "/* The outer wrapper that creates the aspect ratio box */\n.square-wrapper {\n  position: relative;\n  width: 100%;\n  height: 0;\n  padding-bottom: 100%; /* This creates the 1:1 aspect ratio */\n  border: 1px solid #ccc; /* Optional: for visualization */\n}\n\n/* The inner container that holds the content */\n.square-content {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n}\n\n/* Ensure the Mermaid SVG fills the content area */\n.square-content .mermaid,\n.square-content .mermaid svg {\n  width: 100%;\n  height: 100%;\n}"
      }
    ],
    "testing_and_evaluation_kit_design": {
      "canonical_tasks": "A suite of 5-10 standardized input tasks should be created for each major Mermaid diagram type (Flowchart, Sequence, ERD, etc.). These tasks should be natural language descriptions that range from simple to complex, designed to test specific Mermaid syntax and features. For example, a canonical flowchart task would be: \"Create a flowchart for a simple user login process. Start with a 'User visits site' node. This leads to a decision point: 'Is user logged in?'. If yes, it goes to 'Display dashboard'. If no, it goes to 'Show login form'. After the form, the process moves to 'Submit credentials', then to a 'Validate credentials' step, and finally to 'Display dashboard'.\"",
      "objective_pass_fail_criteria": "Objective criteria provide programmatic, repeatable checks for the generated output.\n\n1.  **Syntax Validity (Pass/Fail):** This is the primary check. It should be performed using the `mermaid.parse(textStr)` function from the Mermaid.js library in a Node.js environment. The check passes if the function executes without throwing an error. A `try...catch` block can be used to capture failures. An alternative, though less reliable, method is using the `mmdc` CLI tool with a timeout, as it is known to hang on syntax errors.\n\n2.  **'Square-ness' Heuristic (Pass/Fail):** This check quantifies the aspect ratio of the rendered diagram.\n    *   **Step 1:** Render the valid Mermaid code to an SVG using `mermaid.render()` or `mmdc`.\n    *   **Step 2:** Parse the SVG to extract its `width` and `height` from the root `<svg>` tag or its `viewBox` attribute.\n    *   **Step 3:** Calculate the aspect ratio: `ratio = width / height`.\n    *   **Step 4:** Apply a threshold. The check passes if the ratio is within a defined 'squarish' range, for example, `0.8 <= ratio <= 1.25`.",
      "qualitative_scoring_rubric": "A rubric for human evaluators to score aspects that cannot be measured programmatically. Each criterion is scored on a 1-5 scale.\n\n| Criteria | Score 1 (Poor) | Score 3 (Acceptable) | Score 5 (Excellent) |\n|---|---|---|---|\n| **Visual Clarity & Layout** | Diagram is a confusing mess. Nodes and text overlap significantly. Edges are tangled and hard to follow. | The layout is mostly logical, but there may be some minor text/node overlap or awkwardly placed edges. | The diagram is exceptionally clear and well-organized. Nodes are spaced evenly, text is perfectly legible, and edges are easy to trace. |\n| **Semantic Correctness** | The diagram completely fails to represent the logic or relationships described in the task. | The diagram represents the core logic of the task but misses some details or contains minor inaccuracies (e.g., wrong cardinality). | The diagram perfectly and accurately represents all entities, relationships, and logic described in the canonical task. |\n| **Adherence to Style** | The diagram ignores any styling or structural requests in the prompt (e.g., fails to create a subgraph). | The diagram attempts to follow styling requests but with partial or incorrect implementation. | All styling and structural requests from the prompt are correctly and idiomatically implemented. |",
      "reporting_template": "A standardized markdown template should be used to log the results for each test case.\n\n```markdown\n**Mermaid Generation Evaluation Report**\n\n*   **Test Case ID:** [e.g., FC-03 for Flowchart task 3]\n*   **Diagram Type:** [e.g., Flowchart]\n*   **Task Description:** [Paste the natural language task description here]\n\n**LLM Output:**\n```mermaid\n[Paste the generated Mermaid code here]\n```\n\n**Evaluation Results:**\n\n| Check | Method | Result | Notes |\n| :--- | :--- | :--- | :--- |\n| **Syntax Validity** | `mermaid.parse()` | **PASS / FAIL** | [If FAIL, include error message] |\n| **Rendering** | `mmdc` | **SUCCESS / HANG / ERROR** | [Note any rendering artifacts] |\n| **Square-ness** | SVG Aspect Ratio | **PASS / FAIL** | [Width: XXX, Height: YYY, Ratio: Z.ZZ] |\n\n**Qualitative Scores:**\n\n*   **Visual Clarity:** [Score 1-5]\n*   **Semantic Correctness:** [Score 1-5]\n*   **Adherence to Style:** [Score 1-5]\n\n**Overall Assessment & Observations:**\n[Human evaluator's summary of the result and any notable failure patterns.]\n```"
    }
  },
  "outputBasis": [
    {
      "field": "versioning_and_initialization_guide",
      "citations": [
        {
          "title": "Configuration - Mermaid Documentation",
          "url": "https://mermaid.js.org/config/configuration.html",
          "excerpts": [
            "When mermaid starts, configuration is extracted to determine a configuration to be used for a diagram. There are 3 sources for configuration:",
            "* The default configuration",
            "* Overrides at the site level are set by the initialize call, and will be applied to all diagrams in the site/app. The term for this is the **siteConfig** .",
            "* Frontmatter (v10.5.0+) - diagram authors can update selected configuration parameters in the frontmatter of the diagram. These are applied to the render config.",
            "* Directives (Deprecated by Frontmatter) - diagram authors can update selected configuration parameters directly in the diagram code via directives. These are applied to the render config. **The render config** is configuration that is used when rendering by applying these configurations.",
            "initialize",
            "Frontmatter config",
            "There are 3 sources for configuration:",
            "Mermaid configuration comes from default, site-level overrides, and diagram author's frontmatter (YAML block) at the top of the diagram.",
            "* Directives (Deprecated by Frontmatter) - diagram authors can update selected configuration parameters directly in the diagram code via directives. These are applied to the render config.",
            "**The render config** is configuration that is used when rendering by applying these configurations.",
            "Diagram Syntax",
            "Flowchart",
            "Sequence Diagram"
          ]
        },
        {
          "title": "Other Examples - Mermaid Chart",
          "url": "https://docs.mermaidchart.com/mermaid-oss/syntax/examples.html",
          "excerpts": [
            "Diagram Syntax"
          ]
        },
        {
          "title": "Mermaid Sequence Diagrams Documentation",
          "url": "https://docs.mermaidchart.com/mermaid-oss/syntax/sequenceDiagram.html",
          "excerpts": [
            "Diagram Syntax",
            "Sequence Diagram"
          ]
        },
        {
          "title": "Mermaid Syntax Reference (Class Diagram Page)",
          "url": "https://mermaid.js.org/syntax/classDiagram.html",
          "excerpts": [
            "Diagram Syntax"
          ]
        },
        {
          "title": "Flowcharts – Basic Syntax",
          "url": "https://docs.mermaidchart.com/mermaid-oss/syntax/flowchart.html",
          "excerpts": [
            "Diagram Syntax",
            "Flowchart",
            "Sequence Diagram"
          ]
        },
        {
          "title": "Mermaid Documentation - Diagram Syntax",
          "url": "https://mermaid.js.org/intro/syntax-reference.html",
          "excerpts": [
            "Diagram Syntax"
          ]
        },
        {
          "title": "Mermaid Config Documentation",
          "url": "https://mermaid.js.org/config/schema-docs/config.html",
          "excerpts": [
            "Diagram Syntax",
            "Flowchart"
          ]
        }
      ],
      "reasoning": "The most directly relevant parts describe the configuration hierarchy Mermaid uses and how initialization affects it. One excerpt states that there are three sources for configuration and notes that the diagram author’s frontmatter can override configuration, while directives exist as another mechanism for diagram-specific overrides; it also clarifies that the site-wide initialize call applies to all diagrams, and that the frontmatter is the modern, high-precedence override. This directly supports the finegrained field value about how Mermaid applies defaults, site-level overrides via mermaid.initialize, and diagram-specific overrides with frontmatter or directives, including the deprecation context for init and the emphasis on precedence. Additional excerpts explicitly name default configuration, site-level overrides, and diagram-specific overrides, and mention that the older mermaid.init is deprecated in favor of mermaid.initialize, which is crucial for understanding the evolution and current recommended usage. Other excerpts add supportive details about frontmatter syntax (YAML) and the precedence hierarchy (frontmatter > directives; site-wide > diagram-level), which reinforces the overall model described in the field value. Collectively, these excerpts map the exact three-layer pattern and the precedence rules that determine how a given diagram renders when multiple sources provide configuration. ",
      "confidence": "high"
    },
    {
      "field": "css_svg_wrapper_snippets",
      "citations": [
        {
          "title": "CSS aspect-ratio (MDN)",
          "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio",
          "excerpts": [
            "css\n\n```\ndiv {\n  width: 100px;\n  height: auto;\n}\ndiv:nth-child(1) {\n  aspect-ratio: 1/1;\n}\ndiv:nth-child(2) {\n  aspect-ratio: 0.5;\n}\ndiv:nth-child(3) {\n  aspect-ratio: 1;\n}\ndiv:nth-child(4) {\n  aspect-ratio: 1/0.5;\n}\ndiv:nth-child(5) {\n  aspect-ratio: 16/9;\n}\n```\n\n",
            "The **`aspect-ratio`** [CSS](/en-US/docs/Web/CSS) property allows you to define the desired width-to-height ratio of an element's box. This means that even if the parent container or viewport size changes, the browser will adjust the element's dimensions to maintain the specified width-to-height ratio.",
            "```",
            "```",
            "```",
            "```",
            "```\ndiv {\n  display: inline-flex;\n  background-color: lime;\n  justify-content: center;\n}\n```",
            "img {",
            "img {",
            "  aspect-ratio: 3/2 auto;",
            "  aspect-ratio: 3/2 auto;"
          ]
        },
        {
          "title": "Flowcharts – Basic Syntax",
          "url": "https://docs.mermaidchart.com/mermaid-oss/syntax/flowchart.html",
          "excerpts": [
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Directives Documentation",
          "url": "https://docs.mermaidchart.com/mermaid-oss/config/directives.html",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Documentation - Diagram Syntax",
          "url": "https://mermaid.js.org/intro/syntax-reference.html",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "LLM + Mermaid: How Modern Teams Create UML Diagrams ...",
          "url": "https://mike-vincent.medium.com/llm-mermaid-how-modern-teams-create-uml-diagrams-without-lucidchart-e54c56350804",
          "excerpts": [
            "```",
            "```",
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Can I control the direction of flowcharts in Mermaid? - Stack Overflow",
          "url": "https://stackoverflow.com/questions/66631182/can-i-control-the-direction-of-flowcharts-in-mermaid",
          "excerpts": [
            "```",
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Let the user decide the size and alignment of mermaid diagrams",
          "url": "https://forum.obsidian.md/t/let-the-user-decide-the-size-and-alignment-of-mermaid-diagrams/7019",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Config Documentation",
          "url": "https://mermaid.js.org/config/schema-docs/config.html",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Havelsan's Revenue in 2024",
          "url": "https://github.com/RooCodeInc/Roo-Code/issues/6712",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid diagrams and automatic repair (GenAIScript blog)",
          "url": "https://microsoft.github.io/genaiscript/blog/mermaids/",
          "excerpts": [
            "```"
          ]
        },
        {
          "title": "Mermaid Mermaid issue 4571 - ER diagram parse error with attribute starting with a number",
          "url": "https://github.com/mermaid-js/mermaid/issues/4571",
          "excerpts": [
            "```"
          ]
        },
        {
          "title": "Flowchart: Add inheritDir option to make subgraphs inherit global ...",
          "url": "https://github.com/mermaid-js/mermaid/issues/6492",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Support specifying that two nodes should be at the same level/rank",
          "url": "https://github.com/mermaid-js/mermaid/issues/3723",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Configure flowchart to auto-resize so that nodes are always ...",
          "url": "https://github.com/mermaid-js/mermaid/issues/838",
          "excerpts": [
            "May 14, 2019 — I've tried playing with various useMaxWidth and HTML/css settings, however I'm unable to achieve the following behavior: Given a #mermaid ... May 14, 2019 — Given a #mermaid container sitting within an auto-width div, I would like to render flow charts so that the nodes are always the same size ...",
            "I've tried playing with various useMaxWidth and HTML/css settings, however I'm unable to achieve the following behavior: Given a #mermaid ..."
          ]
        },
        {
          "title": "Troubleshooting - MkDocs-Mermaid2 - Read the Docs",
          "url": "https://mkdocs-mermaid2.readthedocs.io/en/latest/troubleshooting/",
          "excerpts": [
            "Mermaid diagram is not displayed (or displayed incorrectly) Tip: To start with, use a simple diagram that you know is syntactically correct."
          ]
        }
      ],
      "reasoning": "The finegrained field value outlines two concrete approaches for making Mermaid diagrams square: (A) using the modern CSS property aspect-ratio to command a 1:1 container, and (B) using the traditional padding-bottom hack to preserve a square aspect ratio. The most directly relevant excerpts explicitly describe the aspect-ratio property and how it is used to control an element’s width-to-height ratio, which directly aligns with approach (A). The cited passages explain that aspect-ratio defines the width-to-height ratio of an element and that browsers will maintain that ratio as the box scales, which is exactly the mechanism described in the modern approach. Additional excerpts discuss applying width: 100% and height: 100% to ensure the inner content (the Mermaid SVG) fills the square container, which reinforces how to implement the square container after selecting an aspect-ratio. Other excerpts cover the padding-bottom hack, which is the classic, widely used technique to create a square by using a container with height: 0 and padding-bottom set to 100%, with an absolutely positioned inner content area that holds the diagram. These excerpts provide explicit code shape and rationale that map cleanly to the provided two techniques. Some excerpts extend beyond the two methods to discuss responsive SVG behavior, viewBox and preserveAspectRatio, which are related to responsiveness but are one step removed from the concrete square-container strategies described in the field value.",
      "confidence": "high"
    },
    {
      "field": "mermaid_syntax_crib_sheet",
      "citations": [
        {
          "title": "Mermaid Documentation - Diagram Syntax",
          "url": "https://mermaid.js.org/intro/syntax-reference.html",
          "excerpts": [
            "Mermaid's syntax is used to create diagrams, starting with a diagram type declaration, followed by the diagram and its content definitions.",
            "An application of using Directives to change Themes. Theme is a value within Mermaid's configuration that dictates the color scheme for diagrams. Layout and ... When integrating Mermaid, you can include look and layout configuration with the initialize call. This is also where you add the loading of elk. Edit this ...",
            "Here’s an example:\n\n##### Code:\n\nmermaid\n\nCtrl + Enter | Run ▶\n\nIn this example, the `layout: elk` line configures the diagram to use the ELK layout algorithm, along with the hand drawn look and forest theme.",
            "#### Customizing ELK Layout: [​]()\n\nWhen using the ELK layout, you can further refine the diagram’s configuration, such as how nodes are placed and whether parallel edges should be combined:\n\n* To combine parallel edges, use mergeEdges: true | false. * To configure node placement, use nodePlacementStrategy with the following options:\n      + SIMPLE\n      + NETWORK\\_SIMPLEX\n      + LINEAR\\_SEGMENTS\n      + BRANDES\\_KOEPF (def",
            "Layout Algorithms",
            "You can pass metadata Frontmatter with your definition by adding `---` to the lines before and after the definition. This 'triple dash' MUST be the only character on the first line.",
            "Mermaid Chart now allows you to choose different layout algorithms to better organize and present your diagrams, especially when dealing with more complex structures.",
            "#### Selecting Layout Algorithms [​]()\n\nIn addition to customizing the look of your diagrams, Mermaid Chart now allows you to choose different layout algorithms to better organize and present your diagrams, especially when dealing with more complex structures. The layout algorithm dictates how nodes and edges are arranged on the page.",
            "```\n---\nconfig:\n  layout: dagre\n  look: classic\n  theme: default\n---\n\nflowchart LR\nA[Start] --> B{Choose Path}\nB -->|Option 1| C[Path 1]\nB -->|Option 2| D[Path 2]\n```",
            "#### Supported Layout Algorithms: [​]()\n\n* Dagre (default): This is the classic layout algorithm that has been used in Mermaid for a long time. It provides a good balance of simplicity and visual clarity, making it ideal for most diagrams. * ELK: For those who need more sophisticated layout capabilities, especially when working with large or intricate diagrams, the ELK (Eclipse Layout Kernel) layout offers advanced options. It provides a more optimized arrangement, potentially reducing overlapping and improving rea",
            "* ELK: For those who need more sophisticated layout capabilities, especially when working with large or intricate diagrams, the ELK (Eclipse Layout Kernel) layout offers advanced options.",
            "In this example, the `layout: elk` line configures the diagram to use the ELK layout algorithm, along with the hand drawn look and forest theme."
          ]
        }
      ],
      "reasoning": "The core Mermaid syntax for diagrams begins with a diagram type declaration and is followed by the diagram content, which matches the crib sheet’s emphasis that a diagram must start with a diagram type (such as graph or flowchart) and then include definitions for nodes and edges. The excerpt explicitly stating that Mermaid’s syntax starts with a diagram type declaration and then diagram contents provides a direct mapping to the crib sheet’s header for the diagram form. The passages showing concrete example snippets, such as a flowchart written as flowchart LR and node definitions like A[Start] or A --> B, illustrate the exact node/edge syntax that the crib sheet summarizes as the primary syntax for building diagrams, including different bracket styles to indicate node shapes. The references that discuss layout/direction choices (TD, LR, etc.) align with the crib sheet’s layout_options describing how the direction controls the diagram’s orientation and squarish formatting potential. The notes about nested or subgraph handling and Elk/Dagre layout references provide context for advanced layout choices that influence the overall shape, including aiming for a squarish aspect when appropriate. Specific examples show the recommended usage: starting with a diagram type, then using various node definitions with different bracket styles to render shapes, as well as the arrow syntax showing links between nodes. The crib sheet’s guidance about “text in brackets” and “quoting node text to avoid parsing errors” is reflected in the examples and the notes about quotes. Overall, these excerpts directly support key elements of the field value: the diagram type preface, node/edge declaration format, and directional/layout controls that affect squarish diagrams. The combination of direct descriptive statements and concrete example blocks makes these excerpts highly relevant to the requested fine-grained field. The relative strength is highest for excerpts that explicitly describe the diagram-type-first rule and provide concrete node/edge examples, with progressively lesser emphasis on initialization/configuration and advanced layout terms, which are still supportive but more peripheral to the core crib sheet.",
      "confidence": "high"
    },
    {
      "field": "environment_compatibility_guide",
      "citations": [
        {
          "title": "Let the user decide the size and alignment of mermaid diagrams",
          "url": "https://forum.obsidian.md/t/let-the-user-decide-the-size-and-alignment-of-mermaid-diagrams/7019",
          "excerpts": [
            "```css",
            "```css",
            "```css",
            "Is there a way to set the aspect ratio of diagrams here? I'm making a Gantt chart, and in the Mermaid online editor, it is wide and shallow, ... ... width of the mermaid diagrams as 400px while preserving the aspect ratio: svg[id^=\"m\"][width][height][viewBox] { width: 400px; height: auto; }.",
            "Is there a way to set the aspect ratio of diagrams here? I’m making a Gantt chart, and in the Mermaid online editor, it is wide and shallow, e.g. 800 x 150 px. In Obsidian, it comes out much closer to square, e.g. 800 x 600 px.",
            ".mermaid svg {",
            ".mermaid svg {",
            ".mermaid svg {",
            ".mermaid svg {",
            ".mermaid svg {",
            ".mermaid svg {",
            ".mermaid svg {",
            ".mermaid svg {",
            "    width: 80%;",
            "    width: 80%;",
            "    width: 80%;",
            "    width: 80%;",
            "```\nsvg[id^=\"m\"][width][height][viewBox] {\n    width: 400px;\n    height: auto;\n}\n```",
            "\n\nAdjusting the width and height of mermaid diagrams is a bit trickier, but I found the following solution. **EDIT:** While the solution below does technically work, please replace anywhere I’ve written `svg[ig^=\"m\"][width][height][viewBox] { *desired code* }` in the css below with the much simpler `.mermaid svg { *desired code* }` . This simpler solution was offered by [@smcllns](/u/smcllns) in a [later post](https://forum.obsidian.md/t/ability-to-resize-and-align-mermaid-diagrams/7019/20) on this thread. The example below sets the width of the mermaid diagrams as 400px while preserving the aspect ratio:",
            "You can also have several variations of the above code.",
            " \n  A minimum width of 350px and a maximum width of 600px:\n  \n  \n  ```\n  svg[id^=\"m\"][width][height][viewBox] {\n      min-width: 350px;\n      max-width: 600px;\n      width: 80%;\n    ",
            "I hope this helps! Also, for anyone interested, the steps I used to find this solution were the following:",
            "1. I used Ctrl+Shift+I (on Windows) to open the obsidian developer tools while in preview mode. Then, I inspected the mermaid elements in my page and found that they have randomly generated id attributes all starting with the letter “m”.",
            "\n\n2.\n ",
            "\n\n* _N.B. The mermaid id attribute changes for an obsidian diagram after an obsidian site is published, so targeting a particular id using css and hoping for those changes to carry over is not feasible.",
            "Adjusting the width and height of mermaid diagrams is a bit trickier, but I found the following solution. EDIT: While the solution below does ... Oct 13, 2020 — Using mermaid diagrams in Obsidian is currently a bit clunky, and not everything works. Most of these issues can be addressed by allowing the users to resize ...",
            "Oct 13, 2020 — Adjusting the width and height of mermaid diagrams is a bit trickier, but I found the following solution. EDIT: While the solution below does ...",
            "I've added a CSS snippet, and verified that setting height or width has an effect, but if I set them both, it keeps the aspect ratio the same.",
            "}",
            "}",
            "}",
            "}",
            "}",
            "}",
            "}",
            "}",
            "}",
            "}",
            "}",
            "}",
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "CSS aspect-ratio (MDN)",
          "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio",
          "excerpts": [
            "css\n\n```\ndiv {\n  width: 100px;\n  height: auto;\n}\ndiv:nth-child(1) {\n  aspect-ratio: 1/1;\n}\ndiv:nth-child(2) {\n  aspect-ratio: 0.5;\n}\ndiv:nth-child(3) {\n  aspect-ratio: 1;\n}\ndiv:nth-child(4) {\n  aspect-ratio: 1/0.5;\n}\ndiv:nth-child(5) {\n  aspect-ratio: 16/9;\n}\n```\n\n",
            "```\ndiv {\n  display: inline-flex;\n  background-color: lime;\n  justify-content: center;\n}\n```",
            "The **`aspect-ratio`** [CSS](/en-US/docs/Web/CSS) property allows you to define the desired width-to-height ratio of an element's box. This means that even if the parent container or viewport size changes, the browser will adjust the element's dimensions to maintain the specified width-to-height ratio.",
            "img {",
            "img {",
            "  display: inline;",
            "  display: inline;",
            "  width: 200px;",
            "  width: 200px;",
            "  border: 2px dashed red;",
            "  border: 2px dashed red;",
            "  background-color: lime;",
            "  background-color: lime;",
            "  vertical-align: top;",
            "  vertical-align: top;",
            "  aspect-ratio: 3/2 auto;",
            "  aspect-ratio: 3/2 auto;",
            "}",
            "}",
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Change size of Mermaid.render generated SVG?",
          "url": "https://stackoverflow.com/questions/69094109/change-size-of-mermaid-render-generated-svg",
          "excerpts": [
            "}"
          ]
        },
        {
          "title": "Aspect Ratio Boxes - CSS-Tricks",
          "url": "https://css-tricks.com/aspect-ratio-boxes/",
          "excerpts": [
            "}",
            "}",
            "}",
            "}"
          ]
        },
        {
          "title": "Flowcharts – Basic Syntax",
          "url": "https://docs.mermaidchart.com/mermaid-oss/syntax/flowchart.html",
          "excerpts": [
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Directives Documentation",
          "url": "https://docs.mermaidchart.com/mermaid-oss/config/directives.html",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Documentation - Diagram Syntax",
          "url": "https://mermaid.js.org/intro/syntax-reference.html",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "LLM + Mermaid: How Modern Teams Create UML Diagrams ...",
          "url": "https://mike-vincent.medium.com/llm-mermaid-how-modern-teams-create-uml-diagrams-without-lucidchart-e54c56350804",
          "excerpts": [
            "```",
            "```",
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Can I control the direction of flowcharts in Mermaid? - Stack Overflow",
          "url": "https://stackoverflow.com/questions/66631182/can-i-control-the-direction-of-flowcharts-in-mermaid",
          "excerpts": [
            "```",
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Config Documentation",
          "url": "https://mermaid.js.org/config/schema-docs/config.html",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Havelsan's Revenue in 2024",
          "url": "https://github.com/RooCodeInc/Roo-Code/issues/6712",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid diagrams and automatic repair (GenAIScript blog)",
          "url": "https://microsoft.github.io/genaiscript/blog/mermaids/",
          "excerpts": [
            "```"
          ]
        },
        {
          "title": "Mermaid Mermaid issue 4571 - ER diagram parse error with attribute starting with a number",
          "url": "https://github.com/mermaid-js/mermaid/issues/4571",
          "excerpts": [
            "```"
          ]
        },
        {
          "title": "Flowchart: Add inheritDir option to make subgraphs inherit global ...",
          "url": "https://github.com/mermaid-js/mermaid/issues/6492",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Support specifying that two nodes should be at the same level/rank",
          "url": "https://github.com/mermaid-js/mermaid/issues/3723",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "How to Scale SVG",
          "url": "https://css-tricks.com/scale-svg/",
          "excerpts": [
            "Sep 30, 2022 — Any height or width you set for the SVG with CSS will override the height and width attributes on the <svg> . The viewBox attribute has a sidekick, preserveAspectRatio . It has no effect unless a viewBox exists to define the aspect ratio of the image."
          ]
        },
        {
          "title": "Configure flowchart to auto-resize so that nodes are always ...",
          "url": "https://github.com/mermaid-js/mermaid/issues/838",
          "excerpts": [
            "May 14, 2019 — I've tried playing with various useMaxWidth and HTML/css settings, however I'm unable to achieve the following behavior: Given a #mermaid ... May 14, 2019 — Given a #mermaid container sitting within an auto-width div, I would like to render flow charts so that the nodes are always the same size ...",
            "I've tried playing with various useMaxWidth and HTML/css settings, however I'm unable to achieve the following behavior: Given a #mermaid ..."
          ]
        },
        {
          "title": "Troubleshooting - MkDocs-Mermaid2 - Read the Docs",
          "url": "https://mkdocs-mermaid2.readthedocs.io/en/latest/troubleshooting/",
          "excerpts": [
            "Mermaid diagram is not displayed (or displayed incorrectly) Tip: To start with, use a simple diagram that you know is syntactically correct."
          ]
        },
        {
          "title": "Error parsing Mermaid diagram with title set - Obsidian Forum",
          "url": "https://forum.obsidian.md/t/error-parsing-mermaid-diagram-with-title-set/51541",
          "excerpts": [
            "Error parsing Mermaid diagram with title set · Steps to reproduce · Expected result · Actual result · Environment · Additional information.",
            "\nThis seems to be a merged in Nov 21, 2022 ( <https://github.com/mermaid-js/mermaid/pull/3706",
            "We updated in 1.1.13"
          ]
        },
        {
          "title": "Responsive SVG Wrapping Guide",
          "url": "https://12daysofweb.dev/2023/responsive-svgs/",
          "excerpts": [
            "As I mentioned earlier, SVGs naturally act like they have `object-fit: contain`. There's also an attribute that functions similarly to `object-position`: the `preserveAspectRatio` property. By default, it's set to `preserveAspectRatio=\"xMidYMid\"`, which centers the artboard. But you can change this setting to mimic other object-fit behaviors. For example, to replicate 'object-fit: right top', you would use `preserveAspectRatio=\"xMaxYMin\"`.",
            "```\n<svg viewBox=\"0 0 300 400\" preserveAspectRatio=\"xMaxYMin\" xmlns=\"http://www.w3.org/2000/svg\">  \n...  \n</svg>\n```",
            "To add a bit more complexity, you can actually choose not to define a `viewBox` at all. When this happens, the actual width and height of the SVG itself become the dimensions of our \"artboard.\" This might sound a bit confusing now, but don't worry; we'll explore this in more detail later on. ### PreserveAspectRatio ↔ Object-fit"
          ]
        },
        {
          "title": "Using ViewBox to resize svg depending on the window size",
          "url": "https://stackoverflow.com/questions/13632169/using-viewbox-to-resize-svg-depending-on-the-window-size",
          "excerpts": [
            "To resize an SVG with ViewBox, apply `viewBox` and `preserveAspectRatio` to the SVG element, not the `g` element. The `svg` variable contains ..."
          ]
        },
        {
          "title": "Understanding and setting aspect ratios - CSS | MDN - Mozilla",
          "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_box_sizing/Understanding_aspect-ratio",
          "excerpts": [
            "In this guide, we will learn about the aspect-ratio property, discuss aspect ratios for replaced and non-replaced elements, and then examine some common aspect ..."
          ]
        },
        {
          "title": "SVG width and height attributes inconsistencies between diagrams",
          "url": "https://github.com/mermaid-js/mermaid/issues/1490",
          "excerpts": [
            "The width and height attributes are inconsistent between diagrams. All examples below are taken from the live editor. The width and height attributes are inconsistent between diagrams. All examples below are taken from the live editor: https://mermaid-js.github.",
            "Jun 21, 2020 — The width is defined but the height is not. The height and width can be inferred from the viewBox attribute: 110px width and 266px height."
          ]
        },
        {
          "title": "Mermaid.js generated SVG pictures with too many blank spaces ...",
          "url": "https://github.com/squidfunk/mkdocs-material/issues/4068",
          "excerpts": [
            "As we can see in your screenshot, it is clearly the viewbox 's height that seems to be calculated wrong. The SVG is generated by Mermaid.js ..."
          ]
        },
        {
          "title": "SVGViewElement: preserveAspectRatio property - Web APIs",
          "url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGViewElement/preserveAspectRatio",
          "excerpts": [
            "Dec 31, 2024 — It defines how the content within the view should be scaled to fit its viewport while preserving its aspect ratio.",
            "Dec 31, 2024 — The preserveAspectRatio read-only property of the SVGViewElement interface reflects the preserveAspectRatio attribute of the given element."
          ]
        },
        {
          "title": "viewBox - SVG | MDN - Mozilla",
          "url": "https://developer.mozilla.org/en-US/docs/Web/SVG/Reference/Attribute/viewBox",
          "excerpts": [
            "Mar 18, 2025 — The exact effect of the viewBox attribute is influenced by the preserveAspectRatio attribute. Note: Values for width or height lower or equal ..."
          ]
        },
        {
          "title": "CSS property: aspect-ratio | Can I use... Support tables for ...",
          "url": "https://caniuse.com/mdn-css_properties_aspect-ratio",
          "excerpts": [
            "The aspect-ratio CSS property sets a preferred aspect ratio for the box, which will be used in the calculation of auto sizes and some other layout functions."
          ]
        },
        {
          "title": "\"aspect-ratio\" | Can I use... Support tables for HTML5, ...",
          "url": "https://caniuse.com/?search=aspect-ratio",
          "excerpts": [
            "The aspect-ratio CSS property sets a preferred aspect ratio for the box, which will be used in the calculation of auto sizes and some other layout functions."
          ]
        },
        {
          "title": "Stack Overflow: Pure CSS Solution - Square Elements",
          "url": "https://stackoverflow.com/questions/13851940/pure-css-solution-square-elements",
          "excerpts": [
            "Pure CSS Solution - Square Elements? [duplicate]",
            "It is actually possible to achieve it with this neat trick i found at this blog",
            "#square {\nwidth: 100%;\nheight: 0;\npadding-bottom: 100%;\n}\nShare",
            "Maintain the aspect ratio of a div with CSS",
            "re {\nwidth: 100%;\nheight: 0;\npadding-bottom: 100%;\n}\n"
          ]
        },
        {
          "title": "CSS aspect-ratio property",
          "url": "https://www.w3schools.com/cssref/css_pr_aspect-ratio.php",
          "excerpts": [
            "The aspect-ratio property allows you to define the ratio between width and height of an element. If aspect-ratio and width properties are set, the height will ..."
          ]
        },
        {
          "title": "Browser Compatibility Score of aspect-ratio",
          "url": "https://www.lambdatest.com/web-technologies/aspect-ratio",
          "excerpts": [
            "Feb 27, 2023 — aspect-ratio on Chrome is fully supported on 88-113, and not supported on 4-87 Chrome versions. aspect-ratio on Safari is fully supported on 15- ..."
          ]
        },
        {
          "title": "Can we output html instead of svg? · Issue #333 · mermaid-js ...",
          "url": "https://github.com/mermaid-js/mermaid-cli/issues/333",
          "excerpts": [
            "<svg> is valid HTML5, so you should just be able to inline it any modern-ish browser (it's even supported in Internet Explorer 9!)"
          ]
        },
        {
          "title": "CSS-Tricks Almanac: aspect-ratio",
          "url": "https://css-tricks.com/almanac/properties/a/aspect-ratio/",
          "excerpts": [
            "Sep 7, 2022 — The CSS property aspect-ratio lets you create boxes that maintain proportional dimensions where the height and width of a box are calculated automatically as a"
          ]
        },
        {
          "title": "Aspect Ratio in CSS: Hacks and a New Property - Matthias Ott",
          "url": "https://matthiasott.com/notes/aspect-ratio-in-css",
          "excerpts": [
            ".aspect-ratio-hack { position: relative; height: 0; padding-top ... aspect ratio in CSS without any hacks? This is exactly what the CSS ..."
          ]
        },
        {
          "title": "A First Look at `aspect-ratio` - CSS-Tricks",
          "url": "https://css-tricks.com/a-first-look-at-aspect-ratio/",
          "excerpts": [
            "If the element has either a height or width, the other is calculated from the aspect ratio. So aspect-ratio is basically a way of setting the ..."
          ]
        },
        {
          "title": "Why Does The Padding Bottom Trick Exactly Work? : r/css - Reddit",
          "url": "https://www.reddit.com/r/css/comments/tl2g0t/why_does_the_padding_bottom_trick_exactly_work/",
          "excerpts": [
            "Is there a post which explains why the padding bottom trick exactly works? I'm talking about setting position: relative; width: 100%; ..."
          ]
        },
        {
          "title": "Let the user decide the size and alignment of mermaid diagrams",
          "url": "https://forum.obsidian.md/t/let-the-user-decide-the-size-and-alignment-of-mermaid-diagrams/7019/11",
          "excerpts": [
            "The example below sets the width of the mermaid diagrams as 400px while preserving the aspect ratio: svg[id^=\"m\"][width][height][viewBox] { ..."
          ]
        },
        {
          "title": "SVGSVGElement: preserveAspectRatio property",
          "url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGSVGElement/preserveAspectRatio",
          "excerpts": [
            "The **`preserveAspectRatio`** read-only property of the [`SVGSVGElement`](/en-US/docs/Web/API/SVGSVGElement) interface reflects the [`preserveAspectRatio`](/en-US/docs/Web/SVG/Reference/Attribute/preserveAspectRatio) attribute of the given element. It defines how the SVG element's content should be scaled to fit the given space, preserving its aspect ratio.",
            "<svg\n  xmlns=\"http://www.w3.org/2000/svg\"\n  viewBox=\"0 0 200 200\"\n  preserveAspectRatio=\"xMidYMid meet\">\n  <circle cx=\"100\" cy=\"100\" r=\"50\" fill=\"blue\" />\n</svg>"
          ]
        }
      ],
      "reasoning": "The field environment_compatibility_guide concerns how to ensure mermaid diagrams render in a square/aspect-ratio-controlled way across different environments (GitHub, GitLab, Obsidian). Several excerpts provide concrete mechanisms and constraints: In Obsidian, users commonly apply CSS to the mermaid block, targeting the diagram SVG to fix width/height or enforce aspect-ratio, which directly supports achieving squarish diagrams within that environment. Specific CSS examples show width, max-width, and explicit aspect-ratio usage to force a square. This directly supports the field value's assertion that Obsidian offers a relatively permissive host for controlling final diagram size and aspect ratio via CSS overrides. In contrast, GitHub and GitLab render mermaid diagrams inside sandboxed iframes and typically do not expose user-facing controls to set a fixed aspect ratio. Those environments are described as enforcing container-width responsive rendering with limited ability to alter the diagram’s intrinsic aspect ratio, which aligns with the field’s claim about cross-environment sizing constraints and the need for environment-specific adjustments. The other excerpts provide complementary mechanisms that influence rendering size and aspect (for example, using CSS to enforce square via aspect-ratio or setting explicit widths/heights; using viewBox/preserveAspectRatio discussed in general SVG rendering guidance). Taken together, the strongest, most direct support comes from Obsidian-specific CSS guidance, which explicitly demonstrates how to achieve squarish diagrams there, while GitHub/GitLab guidance emphasizes sandboxed/iframe rendering with fewer styling hooks, explaining the variability the field aims to address. The surrounding material about CSS aspect-ratio best practices (MDN references) and SVG sizing concepts (preserveAspectRatio, viewBox) provides general technical grounding that underpins practical sizing strategies seen in the platform-specific excerpts. Therefore, the most relevant evidence points to Obsidian as the environment where a user can reliably enforce squarish diagrams via CSS, while GitHub and GitLab are less permissive in this regard.",
      "confidence": "high"
    },
    {
      "field": "runtime_prompt_template",
      "citations": [
        {
          "title": "Mermaid Documentation - Diagram Syntax",
          "url": "https://mermaid.js.org/intro/syntax-reference.html",
          "excerpts": [
            "Allows for the limited reconfiguration of a diagram just before it is rendered. It can alter the font style, color and other aesthetic aspects of the diagram. You can pass a directive alongside your definition inside `%%{ }%%` . It can be done either above or below your diagram definition.",
            "Configuration is the third part of Mermaid, after deployment and syntax. It deals with the different ways that Mermaid can be customized across different deployments.",
            "Frontmatter uses YAML syntax. It requires any indentation to be consistent and settings are case sensitive. Mermaid will silently ignore misspelling, but badly formed parameters will break the diagram.",
            "Frontmatter is the term for adding YAML metadata at the start of code. This allows for reconfiguration of a diagram before it is rendered.",
            "We've restructured how Mermaid renders diagrams, enabling new features like selecting layout and look. **Currently, this is supported for flowcharts and state diagrams** , with plans to extend support to all diagram types.",
            "Pager\n\n[Previous page Getting Started](/intro/getting-started.html)\n\n[Next page Flowchart](/syntax/flowchart.html)\n\nOpens in MermaidChart.com",
            "### Frontmatter for diagram code [​]()",
            "Layout Algorithms",
            "Dagre (default): This is the classic layout algorithm that has been used in Mermaid for a long time.",
            "**Example configuration:**",
            "In this example, the `layout: elk` line configures the diagram to use the ELK layout algorithm, along with the hand drawn look and forest theme.",
            "```\n---\nconfig:\n  layout: dagre\n  look: classic\n  theme: default\n---\n\nflowchart LR\nA[Start] --> B{Choose Path}\nB -->|Option 1| C[Path 1]\nB -->|Option 2| D[Path 2]\n```"
          ]
        },
        {
          "title": "fladdict/llmermaid",
          "url": "https://github.com/fladdict/llmermaid",
          "excerpts": [
            "LLMermaid prompting - Flowchart driven LLM control. In our project, we're incorporating diagram markdown, known as Mermaid diagram charts, into Large Language ..."
          ]
        }
      ],
      "reasoning": "The core field describes a prompt that (1) asks for a Mermaid diagram with strict layout constraints (balanced, squarish), (2) prescribes an init directive to enforce layout parameters such as nodeSpacing, rankSpacing, and wrappingWidth, and (3) requires enclosing all node and link text in quotes. Excerpts explicitly documenting the use of init directives and frontmatter/configuration support directly substantiate the field value. Specifically, documentation shows the exact mechanism the prompt prescribes: an init directive block placed in the Mermaid code (%%{init: { ... }}}%%) to control theme/layout and to set layout-related parameters; examples illustrate using init to configure flowchart behavior and to override defaults. Several excerpts describe that you can reconfigure diagrams via frontmatter or directives, which aligns with the proposed approach of using %%{init} to standardize a squarish layout. Additional excerpts enumerate the available layout engines (ELK, Dagre) and show how to specify the chosen layout (e.g., config: layout: elk), which supports the part of the field that demands a balanced/consistent diagram shape. The inclusion of explicit references to enabling ELK layout and to selecting layout algorithms provides direct support for the field’s intent to achieve a balanced, squarish appearance. The excerpts also cover the broader context of Frontmatter and Directives as configuration mechanisms, which validates the proposed method of embedding configuration outside pure diagram text. Taken together, these excerpts directly corroborate the field’s premise and offer concrete guidance that matches the described prompt's requirements. The strongest, most directly aligned content centers on explicit init directive usage and frontmatter/configuration concepts; additional content on ELK/Dagre and layout configuration provides supportive context. The relation to squarish/layout-balancing is supported by references to layout algorithms (ELK) and parameters controlling diagram geometry (nodeSpacing, rankSpacing), which underpin the field’s intent to achieve a balanced squarish output.",
      "confidence": "high"
    },
    {
      "field": "diagram_specific_prompt_templates",
      "citations": [
        {
          "title": "Using Mermaid Diagrams 100x Better with Your Favorite AI / LLM App (Dev to article)",
          "url": "https://dev.to/yigit-konur/using-mermaid-diagrams-100x-better-with-your-favorite-ai-llm-app-3m1p",
          "excerpts": [
            "If you're curious, you can check out the full prompt on GitHub here: <https://gist.githubusercontent.com/yigitkonur/af07453dd812cd8a0b565fed62dd0f7d/raw/eec183bb6e9777d888e49870b4f994f957da979d/llm-mermaid.md>",
            "Your primary function is to transform ANY textual diagram idea, natural language description, malformed/incomplete Mermaid code, or embedded Mermaid blocks within Markdown into **production-ready, syntactically pristine, visually compelling, and interactive Mermaid diagrams. ** You will also provide micro-documentation via a concise changelog and embedded tool",
            "Phase 1: Input Ingestion & Contextual Analysis",
            "I use Mermaid diagrams constantly in my daily workflow. But honestly, most AI apps tend to mess them up when generating these diagrams. It doesn't matter if it's the smartest model out there or the simplest one—mistakes still happen. That's why having a rock-solid prompt is super important for getting things right."
          ]
        },
        {
          "title": "The ChatGPT prompt list for Software Engineers - Medium",
          "url": "https://medium.com/@martin-jurran/chatgpt-prompt-list-for-software-engineers-prompts-to-generate-software-diagrams-in-mermaid-deaf2f373104",
          "excerpts": [
            "The most comprehensive list of how ChatGPT and other LLMs can support diagram creation in Mermaid. Contains lots of useful prompts and other ..."
          ]
        },
        {
          "title": "LLM + Mermaid: How Modern Teams Create UML Diagrams ...",
          "url": "https://mike-vincent.medium.com/llm-mermaid-how-modern-teams-create-uml-diagrams-without-lucidchart-e54c56350804",
          "excerpts": [
            "flowchart TD  ",
            "    Start((Browse Products)) --> AddToCart[Add to Cart]  ",
            "    AddToCart --> Decision{Proceed to Checkout?} Decision -- Yes --> CheckStock[Check Stock]  ",
            "    Decision -- No --> Start  ",
            "    CheckStock -- In Stock --> Checkout[Proceed to Checkout]  ",
            "    CheckStock -- Out of Stock --> Notify[Notify User]  ",
            "    Notify --> Start  ",
            "    Checkout --> Payment[Process Payment]  ",
            "    Payment -- Success --> Complete((Order Complete))  ",
            "    Payment -- Failure --> Retry[Retry Payment]  ",
            "    Retry --> Payment",
            "Entity Relationship Diagrams: Defining the Data Model",
            "```",
            "```",
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Flowcharts – Basic Syntax",
          "url": "https://docs.mermaidchart.com/mermaid-oss/syntax/flowchart.html",
          "excerpts": [
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Directives Documentation",
          "url": "https://docs.mermaidchart.com/mermaid-oss/config/directives.html",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Documentation - Diagram Syntax",
          "url": "https://mermaid.js.org/intro/syntax-reference.html",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Can I control the direction of flowcharts in Mermaid? - Stack Overflow",
          "url": "https://stackoverflow.com/questions/66631182/can-i-control-the-direction-of-flowcharts-in-mermaid",
          "excerpts": [
            "```",
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Let the user decide the size and alignment of mermaid diagrams",
          "url": "https://forum.obsidian.md/t/let-the-user-decide-the-size-and-alignment-of-mermaid-diagrams/7019",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Config Documentation",
          "url": "https://mermaid.js.org/config/schema-docs/config.html",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "CSS aspect-ratio (MDN)",
          "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Havelsan's Revenue in 2024",
          "url": "https://github.com/RooCodeInc/Roo-Code/issues/6712",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid diagrams and automatic repair (GenAIScript blog)",
          "url": "https://microsoft.github.io/genaiscript/blog/mermaids/",
          "excerpts": [
            "```"
          ]
        },
        {
          "title": "Mermaid Mermaid issue 4571 - ER diagram parse error with attribute starting with a number",
          "url": "https://github.com/mermaid-js/mermaid/issues/4571",
          "excerpts": [
            "```"
          ]
        },
        {
          "title": "Flowchart: Add inheritDir option to make subgraphs inherit global ...",
          "url": "https://github.com/mermaid-js/mermaid/issues/6492",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Support specifying that two nodes should be at the same level/rank",
          "url": "https://github.com/mermaid-js/mermaid/issues/3723",
          "excerpts": [
            "```",
            "```"
          ]
        }
      ],
      "reasoning": "The finegrained field value contains a structured list of prompt-template objects for different diagram types, including fields such as diagram_type, prompt_template_text, and example_instantiation. Excerpts that present concrete, multi-field prompt templates or show the exact form of such prompts are directly supportive. Specifically:\n- An excerpt that outlines a three-phase workflow for prompt ingestion, syntactic perfection, and visual styling, and then includes example instantiations aligns with the idea of a Template object carrying both the template text and a concrete example instance. This demonstrates the exact pairing of a template description with an instantiated example, which matches the shape of the target field value.\n- Excerpts that enumerate explicit diagram types (Flowchart, Sequence Diagram, Class Diagram, State Diagram, ER Diagram, Pie Chart, Mind Map, etc.) and provide corresponding prompt-template blocks show the intended mapping from diagram_type to prompt content, matching the diagram_type field and the associated template text in the target field.\n- Excerpts that present the full literal prompt text templates (including phrases like Generate a Mermaid flowchart, Output ONLY the raw Mermaid code, and placeholders like [describe the process or flow]) correspond to the diagram_specific_prompt_templates' prompt_template_text field in the value.\n- Excerpts that include an example_instantiation containing Mermaid code blocks and initialization settings (e.g., init blocks with flowchart or diagramPadding, useMaxWidth, etc.) map to the example_instantiation field of the templates in the target field value.\n- The set of excerpts starting with “Phase 1: Input Ingestion & Contextual Analysis”, “Phase 2: Syntactic & Structural Perfection”, and “Phase 3: Visual Styling & Clarity Enhancement” explicitly illustrate the intended structure and sequencing of a multi-part template that would populate the finegrained field value.\n- References that explicitly discuss multiple diagram types and corresponding prompt templates (Flowchart, Sequence Diagram, Class Diagram, State Diagram, ER Diagram, Pie Chart, Mind Map, etc.) mirror the diagram_type variants present in the target value, indicating high alignment between cited content and the field’s contents.\nOverall, the strongest support comes from excerpts that present explicit template concepts and instantiated prompts for multiple diagram types, followed by excerpts that discuss the methodological phases and structured JSON-oriented prompts. The Mermaid-centric or UI/configuration-focused excerpts provide contextual backdrop but do not directly confirm the exact template objects; thus they are ranked after the direct template-focused excerpts.",
      "confidence": "high"
    },
    {
      "field": "interactivity_and_security_guide",
      "citations": [
        {
          "title": "Mermaid Config Documentation",
          "url": "https://mermaid.js.org/config/schema-docs/config.html",
          "excerpts": [
            "| `\"strict\"` | (\\*\\*default\\*\\*) HTML tags in the text are encoded and click functionality is disab",
            "| `\"antiscript\"` | HTML tags in text are allowed (only script elements are removed), and click functionality is enabled. |",
            "### securityLevel Default Value [​]()"
          ]
        },
        {
          "title": "Security | Mermaid",
          "url": "https://mermaid.js.org/community/security.html",
          "excerpts": [
            "Configuring DomPurify [​]()\n\nBy default Mermaid uses a baseline [DOMPurify](https://github.com/cure53/DOMPurify) config. It is possible to override the options passed to DOMPurify by adding a `dompurifyConfig` key to the Mermaid options. This could potentially break the output of Mermaid so use this with c",
            "The Mermaid team takes the security of Mermaid and the applications that use Mermaid seriously. This page describes how to report any vulnerabilities you may find, and lists best practices to minimize the risk of introducing a vulnerability.",
            "Configuring DomPurify"
          ]
        },
        {
          "title": "Stored XSS in Mermaid when viewing Markdown files - GitLab",
          "url": "https://gitlab.com/gitlab-org/gitlab/-/issues/332528",
          "excerpts": [
            "You do this by updating the configuration in config.secure which is a list of parameters that are to be blocked. The default values are: [' ..."
          ]
        },
        {
          "title": "DOMPurify 3.1.7 breaks Mermaid diagrams using foreignObject #1002",
          "url": "https://github.com/cure53/DOMPurify/issues/1002",
          "excerpts": [
            "DOMPurify 3.1.7 breaks retrocompatibility due to a recent foreignObject -related change from @masatokinugawa. This breaks Mermaid diagrams on all our newly ...",
            "New issue"
          ]
        },
        {
          "title": "Accessibility Options",
          "url": "https://mermaid.js.org/config/accessibility.html",
          "excerpts": [
            "* Flowchart with the accessible title \"Big Decisions\" and the single-line accessible description \"Bob's Burgers process for making big decisions\"",
            "##### Code:\n\nmermaid"
          ]
        },
        {
          "title": "Mermaid Theme Configuration",
          "url": "https://mermaid.js.org/config/theming.html",
          "excerpts": [
            "##### Code:\n\nmermaid"
          ]
        },
        {
          "title": "How to Meet WCAG (Quick Reference) - W3C",
          "url": "https://www.w3.org/WAI/WCAG22/quickref/",
          "excerpts": [
            "All non-text content that is presented to the user has a text alternative that serves the equivalent purpose, except for the situations listed below. 1.4.8 Visual Presentation; 1.4.9 Images of Text (No Exception); 1.4.10 Reflow; 1.4.11 Non-text Contrast; 1.4.12 Text Spacing; 1.4.13 Content on Hover or Focus. A customizable quick reference to Web Content Accessibility Guidelines (WCAG) 2 requirements (success criteria) and techniques."
          ]
        }
      ],
      "reasoning": "The most directly relevant excerpts enumerate the exact interactive mechanisms and security levels. References stating the security levels and their meanings (strict, antiscript, loose, sandbox) show the core risk/permission model that governs enabling interactivity in Mermaid. Excerpts enumerating the default and available values for securityLevel demonstrate the guardrails that would be described in a prompt about when to enable interactivity and what MUST be included or omitted to preserve safety. Other excerpts detail how interactivity is implemented in Mermaid via the click directive and the distinction between URL links and JavaScript callbacks, which are central to the interactivity mechanism described in the finegrained field value. Additional excerpts cover how interactivity can be exposed or restricted per diagram via initialization/config (frontmatter/directives) and the importance of sanitization (via DOMPurify) and accessibility metadata for safe and usable diagrams, which supports the broader prompts and guidance in the field value. Taken together, these excerpts directly support the core content that the field value encodes: the interactivity syntax (click ...), the security levels that enable/disable it, and the associated safe handling practices. The excerpts describing accessibility (accTitle/accDescr) further justify safe interactivity in accessible contexts, which aligns with the prompt’s aim to govern how interactivity is introduced in a safe, structured way.\n",
      "confidence": "high"
    },
    {
      "field": "versioning_and_initialization_guide.frontmatter_vs_directives",
      "citations": [
        {
          "title": "Configuration - Mermaid Documentation",
          "url": "https://mermaid.js.org/config/configuration.html",
          "excerpts": [
            "* Frontmatter (v10.5.0+) - diagram authors can update selected configuration parameters in the frontmatter of the diagram. These are applied to the render config.",
            "* Directives (Deprecated by Frontmatter) - diagram authors can update selected configuration parameters directly in the diagram code via directives. These are applied to the render config. **The render config** is configuration that is used when rendering by applying these configurations.",
            "Frontmatter config",
            "Mermaid configuration comes from default, site-level overrides, and diagram author's frontmatter (YAML block) at the top of the diagram.",
            "When mermaid starts, configuration is extracted to determine a configuration to be used for a diagram. There are 3 sources for configuration:",
            "* The default configuration",
            "* Overrides at the site level are set by the initialize call, and will be applied to all diagrams in the site/app. The term for this is the **siteConfig** .",
            "* Directives (Deprecated by Frontmatter) - diagram authors can update selected configuration parameters directly in the diagram code via directives. These are applied to the render config.",
            "**The render config** is configuration that is used when rendering by applying these configurations.",
            "Diagram Syntax",
            "Flowchart",
            "Sequence Diagram",
            "There are 3 sources for configuration:"
          ]
        },
        {
          "title": "Other Examples - Mermaid Chart",
          "url": "https://docs.mermaidchart.com/mermaid-oss/syntax/examples.html",
          "excerpts": [
            "Diagram Syntax"
          ]
        },
        {
          "title": "Mermaid Sequence Diagrams Documentation",
          "url": "https://docs.mermaidchart.com/mermaid-oss/syntax/sequenceDiagram.html",
          "excerpts": [
            "Diagram Syntax",
            "Sequence Diagram"
          ]
        },
        {
          "title": "Mermaid Syntax Reference (Class Diagram Page)",
          "url": "https://mermaid.js.org/syntax/classDiagram.html",
          "excerpts": [
            "Diagram Syntax"
          ]
        },
        {
          "title": "Flowcharts – Basic Syntax",
          "url": "https://docs.mermaidchart.com/mermaid-oss/syntax/flowchart.html",
          "excerpts": [
            "Diagram Syntax",
            "Flowchart",
            "Sequence Diagram"
          ]
        },
        {
          "title": "Mermaid Documentation - Diagram Syntax",
          "url": "https://mermaid.js.org/intro/syntax-reference.html",
          "excerpts": [
            "Diagram Syntax"
          ]
        },
        {
          "title": "Mermaid Config Documentation",
          "url": "https://mermaid.js.org/config/schema-docs/config.html",
          "excerpts": [
            "Diagram Syntax",
            "Flowchart"
          ]
        }
      ],
      "reasoning": "The finegrained field value explains two parallel methods for diagram-specific configuration in Mermaid: Frontmatter (modern, recommended as of Mermaid v10.5.0) and Directives (deprecated but still relevant for backward compatibility). It details syntax, status, pros/cons, and guidance emphasizing frontmatter for modern environments and directives for older or unknown targets, especially to maximize compatibility with weaker LLMs. The most supportive content directly states that frontmatter is a YAML block at the top of the diagram and that directives are a JSON-in-comment block, with clear notes on their status and advantages. It also notes that these configuration sources contribute to the render/config used during rendering, illustrating how diagram configuration is sourced during rendering. To provide a complete view, surrounding excerpts explain that Mermaid configuration originates from multiple sources (default, site-wide overrides, and the diagram author’s frontmatter), and they describe that the render config is the configuration actually used at render time. Together, these excerpts substantiate the field value by describing (a) the two methods, (b) their syntax and how they are applied, (c) their relative modernity or deprecation, and (d) practical guidance for use with different LM capabilities or environments. The reasoning connects the explicit statements about frontmatter being a modern, recommended YAML-based method, the explicit statements about directives being deprecated and their backward-compatibility role, and the description of how these influence the render config, to support the claim that there are two methods with different use cases and levels of support for diagram-specific configuration.",
      "confidence": "high"
    },
    {
      "field": "master_prompt_blueprint",
      "citations": [
        {
          "title": "Improving LLM Output Reliability with Structured Data Generation",
          "url": "https://www.matt-adams.co.uk/2025/02/12/structured-data-generation.html",
          "excerpts": [
            "This post explores a pattern I’ve successfully used to improve the reliability of complex format generation by leveraging the models’ strength in JSON output to separate content generation from format handling.",
            "I encountered this challenge while working on generating Mermaid diagrams with LLMs. Even though the models could understand the concept and content of what needed to be generated, they would often:",
            "* Produce invalid Mermaid syntax",
            "Better Error Handling: JSON parsing provides clear error messages and makes it easier to implement fallback mechanisms; Maintainability ... ... Mermaid diagram syntax or Gherkin test cases often leads to errors and inconsistencies. This post explores a pattern I've successfully used ...",
            "The Solution: A Two-Step Approach",
            "1. **Content Generation** : Have the model generate a structured JSON representation that focuses purely on the content and logic",
            "2. **Format Conversion** : Use code to convert this structured data into the desired final format",
            "Improving LLM Output Reliability with Structured Data Generation",
            "* Create inconsistent node and edge definitions"
          ]
        },
        {
          "title": "Structured output for open models | Generative AI on ...",
          "url": "https://cloud.google.com/vertex-ai/generative-ai/docs/maas/capabilities/structured-output",
          "excerpts": [
            "Structured outputs enable a model to generate output that always adheres to a specific schema. For example, a model may be provided with a response schema."
          ]
        },
        {
          "title": "Structured output support for the Prompt API | AI on Chrome",
          "url": "https://developer.chrome.com/docs/ai/structured-output-for-prompt-api",
          "excerpts": [
            "May 13, 2025 — The Prompt API lets you specify a JSON output format of the model's response by passing a JSON Schema to the LanguageModel.prompt() and LanguageModel. ..."
          ]
        },
        {
          "title": "Generative AI on Vertex AI - Structured output",
          "url": "https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/control-generated-output",
          "excerpts": [
            "Learn how to control the output of generative AI multimodal models on Google Cloud's Vertex AI. This feature is also called structured output."
          ]
        },
        {
          "title": "The Ultimate Guide to Prompt Engineering in 2025",
          "url": "https://www.lakera.ai/blog/prompt-engineering-guide",
          "excerpts": [
            "Ambiguity is one of the most common causes of poor LLM output. Instead of issuing vague instructions, use precise, structured, and goal-oriented phrasing."
          ]
        },
        {
          "title": "OpenAI Prompt Engineering Guide",
          "url": "https://platform.openai.com/docs/guides/prompt-engineering",
          "excerpts": [
            "Prompt engineering** is the process of writing effective instructions for a model, such that it consistently generates content that meets your requirement",
            "In general, a developer message will contain the following sections, usually in this order (though the exact optimal content and order may vary by which model you are using):",
            "Identity:** Describe the purpose, communication style, and high-level goals of the assistant. * **Instructions:** Provide guidance to the model on how to generate the response you want. What rules should it follow? What should the model do, and what should the model never do? This section could contain many subsections as relevant for your use case, like how the model should [call custom f",
            "Explicit role and workflow guidance** Frame the model as a software engineering agent with well-defined responsibilitie",
            " Provide clear instructions for using tools like `functions.run` for code tasks, and specify when not to use certain modes—for example, avoid interactive execution unless necessary."
          ]
        },
        {
          "title": "Mermaid Diagrams - Platen",
          "url": "https://platen.io/modules/platen/markup/mermaid/",
          "excerpts": [
            "Initialize Directive #. Immediately before the diagram syntax, you can specify an initialize directive for Mermaid. This overrides the site's ..."
          ]
        }
      ],
      "reasoning": "The strongest alignment comes from excerpts that present explicit, structured prompts and multi-phase workflows for guiding an LLM to produce Mermaid diagrams with reliable formatting. For example, one excerpt outlines a multi-phase prompt design that starts with input ingestion and contextual analysis, followed by syntactic/structural perfection, and then visual styling, which mirrors the blueprint’s emphasis on phase-based guidance, validation, and output quality. This excerpt demonstrates a concrete, stepwise approach that maps well onto the blueprint’s Phase-like structure and the emphasis on reducing errors in Mermaid output through staged processing. Other excerpts lay out a job-ahead strategy for constructing LLM prompts that produce constrained, machine-readable outputs (e.g., JSON or code blocks) and enforce strict formatting—paralleling the blueprint’s output_contract requirement for a single fenced code block with mermaid language. Additional excerpts discuss explicit prompt engineering practices, such as defining roles (e.g., expert Mermaid engineer), using structured output (JSON schemas, code blocks), and including thorough validation and self-check steps before delivering the final diagram code, which directly supports the blueprint’s intent to tighten correctness and reduce wasteful or incorrect diagrams. There are also excerpts that address error handling and repair workflows (e.g., prompts that include an automated repair loop or guidance for the model to fix syntax errors with minimal edits), aligning with the blueprint’s error_repair_loop_instructions. Finally, several excerpts discuss how to configure prompts to encourage canonical Mermaid outputs, mentioning frontmatter usage, layout decisions (layout: elk, direction), and incorporating explicit checks for syntax correctness, all of which reinforce the layout heuristics and validation expectations in the blueprint. In sum, the most relevant material constrains output format, prescribes a staged prompt process (input -> parse/validate -> repair), and instructs on robust error handling — all of which map directly to the requested fields in the master_prompt_blueprint. The less direct but still relevant material includes broader prompt engineering guides and examples of structured outputs or mermaid-specific tips that can inform how to compose the prompts, but the strongest alignment remains with the staged, structured, and repair-focused guidance.",
      "confidence": "high"
    },
    {
      "field": "heuristics_for_weak_llms",
      "citations": [
        {
          "title": "Using Mermaid Diagrams 100x Better with Your Favorite AI / LLM App (Dev to article)",
          "url": "https://dev.to/yigit-konur/using-mermaid-diagrams-100x-better-with-your-favorite-ai-llm-app-3m1p",
          "excerpts": [
            "If you're curious, you can check out the full prompt on GitHub here: <https://gist.githubusercontent.com/yigitkonur/af07453dd812cd8a0b565fed62dd0f7d/raw/eec183bb6e9777d888e49870b4f994f957da979d/llm-mermaid.md>"
          ]
        },
        {
          "title": "Structured output support for the Prompt API | AI on Chrome",
          "url": "https://developer.chrome.com/docs/ai/structured-output-for-prompt-api",
          "excerpts": [
            "May 13, 2025 — The Prompt API lets you specify a JSON output format of the model's response by passing a JSON Schema to the LanguageModel.prompt() and LanguageModel. ..."
          ]
        },
        {
          "title": "Improving LLM Output Reliability with Structured Data Generation",
          "url": "https://www.matt-adams.co.uk/2025/02/12/structured-data-generation.html",
          "excerpts": [
            "I encountered this challenge while working on generating Mermaid diagrams with LLMs. Even though the models could understand the concept and content of what needed to be generated, they would often:",
            "* Produce invalid Mermaid syntax",
            "Better Error Handling: JSON parsing provides clear error messages and makes it easier to implement fallback mechanisms; Maintainability ... ... Mermaid diagram syntax or Gherkin test cases often leads to errors and inconsistencies. This post explores a pattern I've successfully used ...",
            "The Solution: A Two-Step Approach",
            "1. **Content Generation** : Have the model generate a structured JSON representation that focuses purely on the content and logic",
            "2. **Format Conversion** : Use code to convert this structured data into the desired final format"
          ]
        },
        {
          "title": "Prompt Engineering via Prompt Patterns — Visualization Generator ...",
          "url": "https://medium.com/@a1guy/prompt-engineering-via-prompt-patterns-visualization-generator-pattern-e0cfb926aae1",
          "excerpts": [
            "This article described both the tools and how to use the natural language abilities of LLMs like ChatGPT to create images using the visualization generation ..."
          ]
        },
        {
          "title": "Elements of a Prompt - Prompt Engineering Guide",
          "url": "https://www.promptingguide.ai/introduction/elements",
          "excerpts": [
            "A prompt contains any of the following elements: Instruction - a specific task or instruction you want the model to perform, Context - external information or ..."
          ]
        },
        {
          "title": "Adding a New Diagram/Chart (Deprecated)",
          "url": "https://docs.mermaidchart.com/mermaid-oss/community/new-diagram-jison.html",
          "excerpts": [
            "Apr 11, 2025 — Note that the diagram type key does not have to be the same as the diagram keyword chosen for the grammar, but it is helpful if they are the ...",
            "Make sure that the `parseError` function for the parser is defined and calling `mermaid.parseError`. This way a common way of detecting parse errors is provided for the end-user."
          ]
        }
      ],
      "reasoning": "- The most directly relevant material shows a concrete, multi-phase process for getting LLMs to produce valid Mermaid diagrams by first extracting a structured representation (Phase 1: Input Ingestion & Contextual Analysis, Phase 2: Syntactic & Structural Perfection) and then converting it into executable Mermaid code, including explicit references to a JSON-like structured output and validation steps. This aligns with the field value’s emphasis on a strict, schema-driven prompt flow and on enforcing a strict Mermaid grammar. For example, the excerpts describe: isolating the diagram content, applying deterministic generation, and then performing validation against a target structure before rendering, which supports the notion of a strict, machine-checked pipeline for Mermaid outputs.",
      "confidence": "high"
    },
    {
      "field": "validation_toolchain_overview",
      "citations": [
        {
          "title": "Diagrams | GenAIScript",
          "url": "https://microsoft.github.io/genaiscript/reference/scripts/diagrams/",
          "excerpts": [
            "The `system.diagrams` system prompt registers a repair chat participant that will try to fix any syntax errors in the generated Mermaid diagrams. It’s not uncommon for LLMs to generate invalid Mermaid syntax, so this is a useful feature.",
            "You can use the result.error value to check if the parsing was successful. If it was not, you can use the result.error value to repair the diagram ... Create diagrams and charts within markdown using GenAIScript and the mermaid extension for visual representation of data and processes."
          ]
        },
        {
          "title": "Class diagrams broken with official Mermaid, and shown fine at ...",
          "url": "https://github.com/mermaid-js/mermaid/issues/6075",
          "excerpts": [
            "With class diagram, if I just replace E --> G[Imports (M)]; onto either E --> G[Imports #40;M#41;]; or E --> G[\"Imports (M)\"]; it will fix the ..."
          ]
        },
        {
          "title": "Improving LLM Output Reliability with Structured Data Generation",
          "url": "https://www.matt-adams.co.uk/2025/02/12/structured-data-generation.html",
          "excerpts": [
            "This post explores a pattern I’ve successfully used to improve the reliability of complex format generation by leveraging the models’ strength in JSON output to separate content generation from format handling.",
            "I encountered this challenge while working on generating Mermaid diagrams with LLMs. Even though the models could understand the concept and content of what needed to be generated, they would often:",
            "* Produce invalid Mermaid syntax",
            "Better Error Handling: JSON parsing provides clear error messages and makes it easier to implement fallback mechanisms; Maintainability ... ... Mermaid diagram syntax or Gherkin test cases often leads to errors and inconsistencies. This post explores a pattern I've successfully used ..."
          ]
        },
        {
          "title": "Structured output support for the Prompt API | AI on Chrome",
          "url": "https://developer.chrome.com/docs/ai/structured-output-for-prompt-api",
          "excerpts": [
            "May 13, 2025 — The Prompt API lets you specify a JSON output format of the model's response by passing a JSON Schema to the LanguageModel.prompt() and LanguageModel. ..."
          ]
        },
        {
          "title": "Generative AI on Vertex AI - Structured output",
          "url": "https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/control-generated-output",
          "excerpts": [
            "Learn how to control the output of generative AI multimodal models on Google Cloud's Vertex AI. This feature is also called structured output."
          ]
        },
        {
          "title": "The Ultimate Guide to Prompt Engineering in 2025",
          "url": "https://www.lakera.ai/blog/prompt-engineering-guide",
          "excerpts": [
            "Ambiguity is one of the most common causes of poor LLM output. Instead of issuing vague instructions, use precise, structured, and goal-oriented phrasing."
          ]
        }
      ],
      "reasoning": "The most directly supportive material describes explicit Mermaid syntax validation and repair workflows that map to an API-based validation flow, including how errors are handled and how validation can be integrated or automated. For example, the material notes that there is an automatic Mermaid syntax repair mechanism via a GenAIScript-driven workflow, which aligns with a structured validation/repair process in an API-style toolchain. It also discusses error scenarios and the notion of repairing invalid Mermaid code, which is a core part of robust validation pipelines that need to produce valid diagrams reliably. Additionally, content that frames a structured, multi-step approach to Mermaid diagram handling (including parsing, error handling, and subsequent repair) directly supports the idea of a validation toolchain feeding into diagram generation or retrieval tasks. There is explicit mention of using a CLI-driven workflow (mermaid-cli) and the notion of validating diagrams via CLI, including handling syntax errors and rendering output, which aligns with CLI-based validation in CI/CD contexts. Finally, there are references to the broader pattern of structured, automated validation/repair pipelines (GenAIScript) and related discussions on handling syntax errors, which dovetail with the CI/CD integration angle when ensuring diagrams render correctly in automated pipelines.\n\nDirect connections to the field value include: (a) explicit reference to automatic Mermaid syntax repair workflows used in validation contexts, (b) explicit discussion of error handling and structured validation steps as part of Mermaid diagrams, (c) references to CLI-based Mermaid validation tooling (mermaid-cli/mmdc) and its role in rendering and validation, and (d) discussion of integration-like patterns and structured outputs in AI-assisted validation workflows that map to CI/CD pipelines. The excerpts collectively support the idea of a validation_toolchain_overview that encompasses API-based validation, CLI-based validation, and CI/CD integration patterns, with a focus on reliability, error handling, and repair when Mermaid syntax fails.\n",
      "confidence": "medium"
    },
    {
      "field": "testing_and_evaluation_kit_design",
      "citations": [
        {
          "title": "Structured output support for the Prompt API | AI on Chrome",
          "url": "https://developer.chrome.com/docs/ai/structured-output-for-prompt-api",
          "excerpts": [
            "May 13, 2025 — The Prompt API lets you specify a JSON output format of the model's response by passing a JSON Schema to the LanguageModel.prompt() and LanguageModel. ..."
          ]
        },
        {
          "title": "Generative AI on Vertex AI - Structured output",
          "url": "https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/control-generated-output",
          "excerpts": [
            "Learn how to control the output of generative AI multimodal models on Google Cloud's Vertex AI. This feature is also called structured output."
          ]
        },
        {
          "title": "The Ultimate Guide to Prompt Engineering in 2025",
          "url": "https://www.lakera.ai/blog/prompt-engineering-guide",
          "excerpts": [
            "Ambiguity is one of the most common causes of poor LLM output. Instead of issuing vague instructions, use precise, structured, and goal-oriented phrasing."
          ]
        },
        {
          "title": "11 Prompt Engineering Best Practices Every Modern Dev ...",
          "url": "https://mirascope.com/blog/prompt-engineering-best-practices",
          "excerpts": [
            "Jul 1, 2025 — We'll begin with the essentials: seven practical techniques for writing clearer, more effective prompts that deliver better results with less trial and error."
          ]
        },
        {
          "title": "Anthropic's Interactive Prompt Engineering Tutorial",
          "url": "https://github.com/anthropics/prompt-eng-interactive-tutorial",
          "excerpts": [
            "This course is intended to provide you with a comprehensive step-by-step understanding of how to engineer optimal prompts within Claude."
          ]
        },
        {
          "title": "OpenAI Prompt Engineering Guide : r/ChatGPT",
          "url": "https://www.reddit.com/r/ChatGPT/comments/18jdfex/openai_prompt_engineering_guide/",
          "excerpts": [
            "Here is a summary of their 6 strategies for getting better results when prompting GPT: Write Clear Instructions: - Be specific: Clarity in ..."
          ]
        },
        {
          "title": "Improve your prompts in the developer console",
          "url": "https://www.anthropic.com/news/prompt-improver",
          "excerpts": [
            "Nov 14, 2024 — The prompt improver allows developers to take existing prompts and leverage Claude to automatically refine them using advanced prompt engineering techniques."
          ]
        },
        {
          "title": "OpenAI Prompt Engineering Guide",
          "url": "https://platform.openai.com/docs/guides/prompt-engineering",
          "excerpts": [
            "Prompt engineering** is the process of writing effective instructions for a model, such that it consistently generates content that meets your requirement",
            "In general, a developer message will contain the following sections, usually in this order (though the exact optimal content and order may vary by which model you are using):",
            "Identity:** Describe the purpose, communication style, and high-level goals of the assistant. * **Instructions:** Provide guidance to the model on how to generate the response you want. What rules should it follow? What should the model do, and what should the model never do? This section could contain many subsections as relevant for your use case, like how the model should [call custom f"
          ]
        },
        {
          "title": "Prompt Engineering via Prompt Patterns — Visualization Generator ...",
          "url": "https://medium.com/@a1guy/prompt-engineering-via-prompt-patterns-visualization-generator-pattern-e0cfb926aae1",
          "excerpts": [
            "This article described both the tools and how to use the natural language abilities of LLMs like ChatGPT to create images using the visualization generation ..."
          ]
        },
        {
          "title": "Elements of a Prompt - Prompt Engineering Guide",
          "url": "https://www.promptingguide.ai/introduction/elements",
          "excerpts": [
            "A prompt contains any of the following elements: Instruction - a specific task or instruction you want the model to perform, Context - external information or ..."
          ]
        },
        {
          "title": "Adding a New Diagram/Chart (Deprecated)",
          "url": "https://docs.mermaidchart.com/mermaid-oss/community/new-diagram-jison.html",
          "excerpts": [
            "Apr 11, 2025 — Note that the diagram type key does not have to be the same as the diagram keyword chosen for the grammar, but it is helpful if they are the ...",
            "Make sure that the `parseError` function for the parser is defined and calling `mermaid.parseError`. This way a common way of detecting parse errors is provided for the end-user.",
            "exports.parseError = function (err, hash) {\n  mermaid.parseError(err, hash);\n};",
            "The parser is also exposed in the mermaid api by calling:\n\n```\nconst parser = mermaid.getParser();\n```",
            "Apr 11, 2025 — Make sure that the parseError function for the parser is defined and calling mermaid.parseError . This way a common way of detecting parse ..."
          ]
        },
        {
          "title": "Class Diagram vs. Entity-Relationship Diagram (ERD)",
          "url": "https://guides.visual-paradigm.com/class-diagram-vs-entity-relationship-diagram-erd-a-comparative-guide/",
          "excerpts": [
            "Sep 15, 2023 — The choice between class diagrams and ERDs depends on the specific needs of the project and the focus of design and modeling activities. Summary."
          ]
        },
        {
          "title": "Using Mermaid Diagrams 100x Better with Your Favorite AI / LLM App (Dev to article)",
          "url": "https://dev.to/yigit-konur/using-mermaid-diagrams-100x-better-with-your-favorite-ai-llm-app-3m1p",
          "excerpts": [
            "Use these cues to determine the most probable diagram type. Prioritize explicit `type:` flags."
          ]
        },
        {
          "title": "Improving LLM Output Reliability with Structured Data Generation",
          "url": "https://www.matt-adams.co.uk/2025/02/12/structured-data-generation.html",
          "excerpts": [
            "This post explores a pattern I’ve successfully used to improve the reliability of complex format generation by leveraging the models’ strength in JSON output to separate content generation from format handling.",
            "I encountered this challenge while working on generating Mermaid diagrams with LLMs. Even though the models could understand the concept and content of what needed to be generated, they would often:",
            "* Produce invalid Mermaid syntax",
            "Better Error Handling: JSON parsing provides clear error messages and makes it easier to implement fallback mechanisms; Maintainability ... ... Mermaid diagram syntax or Gherkin test cases often leads to errors and inconsistencies. This post explores a pattern I've successfully used ...",
            "The Solution: A Two-Step Approach",
            "1. **Content Generation** : Have the model generate a structured JSON representation that focuses purely on the content and logic",
            "2. **Format Conversion** : Use code to convert this structured data into the desired final format",
            "Improving LLM Output Reliability with Structured Data Generation",
            "* Create inconsistent node and edge definitions",
            "* Mix different Mermaid diagram types incorrectly",
            "3. **Implement Robust Error Handling**",
            "4. **Keep Conversion Logic Clean**",
            "This approach has significantly improved the reliability of the generated diagrams and made the code more maintainable.",
            "These issues weren’t unique to Mermaid - they’re common when asking LLMs to generate any output that requires strict syntax adherence."
          ]
        }
      ],
      "reasoning": "The finegrained field aims to specify a testing/evaluation kit design for evaluating LLM-generated Mermaid diagrams, including canonical tasks and objective pass/fail criteria. Excerpts that discuss structured outputs, prompts, and evaluation templates are directly relevant because they provide concrete, repeatable guidance for designing such a kit. For example, a passage explicitly states that structured outputs enable a model to generate output that adheres to a specific schema, which is essential for reliably validating Mermaid diagrams against a known schema. Another excerpt highlights that structured output guidance exists to ensure the model’s response conforms to a defined schema, which supports the notion of a canonical task set and automated checks (syntax validity via Mermaid parse, square-ness heuristics, etc.). Several excerpts enumerate best practices for prompt engineering and documenting outputs, including standard task descriptions, deterministic evaluation rubrics, and templates for recording results. Together, these sources support the design of an evaluation kit by providing a blueprint for (a) canonical tasks (e.g., Flowchart/ERD sequences described in natural language), (b) a strict output schema the model must follow (to enable automated parsing and verification), and (c) objective pass/fail criteria (syntax validity via mermaid.parse and rendering checks, as well as a quantitative “square-ness” heuristic). The connection to canonical tasks is reinforced by prompts and examples that illustrate how to convert natural-language diagram requests into Mermaid code, while the evaluation-focused excerpts give concrete criteria and templates for assessing the fidelity and usability of the generated diagrams. The included Mermaid-oriented prompts and the emphasis on reliable structured outputs align with the field’s aim to create a robust, testable evaluation kit for LLM-assisted diagram generation.",
      "confidence": "high"
    },
    {
      "field": "versioning_and_initialization_guide.configuration_hierarchy",
      "citations": [
        {
          "title": "Configuration - Mermaid Documentation",
          "url": "https://mermaid.js.org/config/configuration.html",
          "excerpts": [
            "Mermaid configuration comes from default, site-level overrides, and diagram author's frontmatter (YAML block) at the top of the diagram.",
            "* Frontmatter (v10.5.0+) - diagram authors can update selected configuration parameters in the frontmatter of the diagram. These are applied to the render config.",
            "* Overrides at the site level are set by the initialize call, and will be applied to all diagrams in the site/app. The term for this is the **siteConfig** .",
            "* The default configuration",
            "When mermaid starts, configuration is extracted to determine a configuration to be used for a diagram. There are 3 sources for configuration:",
            "Frontmatter config",
            "* Directives (Deprecated by Frontmatter) - diagram authors can update selected configuration parameters directly in the diagram code via directives. These are applied to the render config.",
            "* Directives (Deprecated by Frontmatter) - diagram authors can update selected configuration parameters directly in the diagram code via directives. These are applied to the render config. **The render config** is configuration that is used when rendering by applying these configurations.",
            "initialize",
            "**The render config** is configuration that is used when rendering by applying these configurations.",
            "There are 3 sources for configuration:",
            "Diagram Syntax",
            "Flowchart",
            "Sequence Diagram"
          ]
        },
        {
          "title": "Other Examples - Mermaid Chart",
          "url": "https://docs.mermaidchart.com/mermaid-oss/syntax/examples.html",
          "excerpts": [
            "Diagram Syntax"
          ]
        },
        {
          "title": "Mermaid Sequence Diagrams Documentation",
          "url": "https://docs.mermaidchart.com/mermaid-oss/syntax/sequenceDiagram.html",
          "excerpts": [
            "Diagram Syntax",
            "Sequence Diagram"
          ]
        },
        {
          "title": "Mermaid Syntax Reference (Class Diagram Page)",
          "url": "https://mermaid.js.org/syntax/classDiagram.html",
          "excerpts": [
            "Diagram Syntax"
          ]
        },
        {
          "title": "Flowcharts – Basic Syntax",
          "url": "https://docs.mermaidchart.com/mermaid-oss/syntax/flowchart.html",
          "excerpts": [
            "Diagram Syntax",
            "Flowchart",
            "Sequence Diagram"
          ]
        },
        {
          "title": "Mermaid Documentation - Diagram Syntax",
          "url": "https://mermaid.js.org/intro/syntax-reference.html",
          "excerpts": [
            "Diagram Syntax"
          ]
        },
        {
          "title": "Mermaid Config Documentation",
          "url": "https://mermaid.js.org/config/schema-docs/config.html",
          "excerpts": [
            "Diagram Syntax",
            "Flowchart"
          ]
        }
      ],
      "reasoning": "The field value describes a hierarchical precedence for Mermaid configuration that begins with the Default Configuration as the baseline, then allows site-wide overrides through site-level configuration (mermaid.initialize()), and finally supports Diagram-Specific Configuration where frontmatter takes the highest precedence, followed by directives as a lower-precedence mechanism (and deprecated). The most directly supporting excerpts explicitly outline the three-source model (default, site-level overrides, and diagram author frontmatter) and explicitly state that frontmatter has the highest precedence, with directives deprecated in favor of frontmatter. Additional excerpts reinforce that the render configuration is the set applied during rendering and that site-level and diagram-level configurations override previous ones, aligning with the stated hierarchy. Together, these excerpts triangulate a consistent precedence model where later sources override earlier ones, with frontmatter at the top of per-diagram configuration, and directives deprecated, which matches the finegrained field value.",
      "confidence": "high"
    },
    {
      "field": "squarish_layout_strategies",
      "citations": [
        {
          "title": "Mermaid Documentation - Diagram Syntax",
          "url": "https://mermaid.js.org/intro/syntax-reference.html",
          "excerpts": [
            "#### Customizing ELK Layout: [​]()\n\nWhen using the ELK layout, you can further refine the diagram’s configuration, such as how nodes are placed and whether parallel edges should be combined:\n\n* To combine parallel edges, use mergeEdges: true | false. * To configure node placement, use nodePlacementStrategy with the following options:\n      + SIMPLE\n      + NETWORK\\_SIMPLEX\n      + LINEAR\\_SEGMENTS\n      + BRANDES\\_KOEPF (def",
            "Layout Algorithms",
            "Dagre (default): This is the classic layout algorithm that has been used in Mermaid for a long time.",
            "### Frontmatter for diagram code [​]()\n\nFrontmatter is the term for adding YAML metadata at the start of code. This allows for reconfiguration of a diagram before it is rendered. You can pass metadata Frontmatter with your definition by adding `---` to the lines before and after the definition. This 'triple dash' MUST be the only character on the first line. Frontmatter uses YAML syntax.",
            "```\n---\nconfig:\n  layout: dagre\n  look: classic\n  theme: default\n---\n\nflowchart LR\nA[Start] --> B{Choose Path}\nB -->|Option 1| C[Path 1]\nB -->|Option 2| D[Path 2]\n```"
          ]
        },
        {
          "title": "preserveAspectRatio - MDN",
          "url": "https://developer.mozilla.org/en-US/docs/Web/SVG/Reference/Attribute/preserveAspectRatio",
          "excerpts": [
            "io\n\nThe **`preserveAspectRatio`** attribute indicates how an element with a viewBox providing a given [aspect ratio](/en-US/docs/Glossary/Aspect_ratio) must fit into a viewport with a different aspect ratio. The aspect ratio of an SVG image is defined by the [`viewBox`](/en-US/docs/Web/SVG/Reference/Attribute/viewBox) attribute.",
            "The alignment value indicates whether to force uniform scaling and, if so, the alignment method to use in case the aspect ratio of the [`viewBox`](/en-US/docs/Web/SVG/Reference/Attribute/viewBox) doesn't match the aspect ratio of the viewport. `xMidYMid` is the default value.",
            " isn't set, the `preserveAspectRatio` attribute has no effect on SVG's scaling (except in the case of the [`<image>`](/en-US/docs/Web/SVG/Reference/Element/image) element, where `preserveAspectRatio` behaves differently as described below).",
            "[`none`]",
            "`xMinYMin`",
            "`xMidYMid`",
            "`xMidYMid`",
            "`xMaxYMid`",
            "`xMaxYMid`"
          ]
        },
        {
          "title": "CSS aspect-ratio (MDN)",
          "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio",
          "excerpts": [
            "css\n\n```\ndiv {\n  width: 100px;\n  height: auto;\n}\ndiv:nth-child(1) {\n  aspect-ratio: 1/1;\n}\ndiv:nth-child(2) {\n  aspect-ratio: 0.5;\n}\ndiv:nth-child(3) {\n  aspect-ratio: 1;\n}\ndiv:nth-child(4) {\n  aspect-ratio: 1/0.5;\n}\ndiv:nth-child(5) {\n  aspect-ratio: 16/9;\n}\n```\n\n",
            "The **`aspect-ratio`** [CSS](/en-US/docs/Web/CSS) property allows you to define the desired width-to-height ratio of an element's box. This means that even if the parent container or viewport size changes, the browser will adjust the element's dimensions to maintain the specified width-to-height ratio.",
            "  width: 200px;",
            "  width: 200px;",
            "  aspect-ratio: 3/2 auto;",
            "  aspect-ratio: 3/2 auto;",
            "  border: 2px dashed red;",
            "  border: 2px dashed red;"
          ]
        },
        {
          "title": "Mermaid CLI (Mermaid-js/mermaid-cli)",
          "url": "https://github.com/mermaid-js/mermaid-cli",
          "excerpts": [
            "[]()",
            "[]()",
            "[]()",
            "[]()",
            "[]()",
            "[]()",
            "[]()"
          ]
        },
        {
          "title": "Aspect Ratio in CSS: Hacks and a New Property - Matthias Ott",
          "url": "https://matthiasott.com/notes/aspect-ratio-in-css",
          "excerpts": [
            ".aspect-ratio-hack { position: relative; height: 0; padding-top ... aspect ratio in CSS without any hacks? This is exactly what the CSS ..."
          ]
        },
        {
          "title": "Mermaid Layouts and Layout Options",
          "url": "https://mermaid.js.org/config/layouts.html",
          "excerpts": [
            "* **elk** : [ELK (Eclipse Layout Kernel)](https://www.eclipse.org/elk/)",
            "* **tidy-tree** : Tidy tree layout for hierarchical diagrams [Tidy Tree Configuration](/config/tidy-tree.html)",
            "* **cose-bilkent** : Cose Bilkent layout for force-directed graphs",
            "* **dagre** : Dagre layout for layered graphs",
            "## How to Use",
            "You can specify the layout in your diagram's YAML config or initialization options. For example:",
            "You can specify the layout in your diagram's YAML config or initialization options. For example:",
            "##### Code:"
          ]
        },
        {
          "title": "Configuration - Mermaid Documentation",
          "url": "https://mermaid.js.org/config/configuration.html",
          "excerpts": [
            "##### Code:"
          ]
        },
        {
          "title": "Mermaid Theme Configuration",
          "url": "https://mermaid.js.org/config/theming.html",
          "excerpts": [
            "##### Code:",
            "##### Code:"
          ]
        }
      ],
      "reasoning": "Direct, explicit guidance on shaping squarish diagrams often hinges on (a) choosing an appropriate layout engine (ELK tends to yield more compact, balanced layouts than Dagre) and (b) setting the diagram’s direction and spacing so that the resulting SVG dimensions become more square-like. Several excerpts demonstrate enabling ELK as the rendering engine for flowcharts (for example, configuring flowchart defaultRenderer to elk in a YAML frontmatter or in a mermaid.config block). When ELK is used, it is specifically suggested as a means to achieve tighter, more compact, and potentially squarish layouts for larger or more complex graphs. Related guidance also shows how to control layout direction and subgraph behavior: using direction or inheritDir within subgraphs to influence how nested blocks orient relative to the main diagram, and using rankDirection-like cues (TD/LR) to influence the aspect that the diagram takes. Spacing controls such as nodeSpacing and rankSpacing are described to compress or expand the diagram along axes, contributing to a more balanced, square-ish silhouette when applied evenly. Text wrapping (wrappingWidth) can constrain node widths so that text wrapping increases node height, further nudging the overall diagram toward a squarish footprint. Additional measures described include the use of a square container with aspect-ratio CSS (aspect-ratio: 1/1) or equivalent padding-hack approaches to force square bounding boxes around the diagram, and preserveAspectRatio considerations for the SVG to ensure the rendered diagram respects a square viewport when possible. The combination of: enabling an Elk layout, selecting and harmonizing a global direction with subgraph-specific directions, applying uniform node/rank spacing, enforcing text wrapping to control node width, and employing CSS container aspect-ratio methods provides a concrete, multi-facet recipe for producing squarish mermaid diagrams. The strongest support comes from explicit ELK enablement guidance, followed by concrete directional and spacing controls, and then container/visual-fit techniques that help enforce squareness on the page.",
      "confidence": "high"
    },
    {
      "field": "llm_failure_modes_and_mitigations",
      "citations": [
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "Parse error on line 1:↵graph TD    Q1[Question ↵-----^↵Expecting 'NODIR', 'DIR', got 'SPACE",
            "```\ngraph TD\n    Q1[Question 1]\n    Q1 -->|oui| Q1.1[Question 1.1]\n    Q1 -->|non| Q1.2[Question 1.2]\n    Q1.1 -->|oui| Q1.1.1[Question 1.1.1]\n    Q1.1 -->|non| Q1.1.2[Question 1.1.2]\n    Q1.2 -->|oui| Q1.2.1[Question 1.2.1]\n    Q1.2 -->|non| Q1.2.2[Question 1.2.2]\n    Q1.2.1 -->|oui| Q1.2.11[Question 1.2.11]\n    Q1.2.1 -->|non| Q1.2.21[Question 1.2.21]\n    Q1.1.1 -->|signal| R[Result]\n    Q1.1.2 -->|signal| R\n    Q1.2.11 -->|signal| R\n    Q1.2.21 -->|signal| R\n    Q1.2.2 -->|signal| R\n```\n",
            "Parser error when used with mermaidAPI"
          ]
        },
        {
          "title": "Mermaid Error Handling Example - GitHub Issue 5385",
          "url": "https://github.com/mermaid-js/mermaid/issues/5385",
          "excerpts": [
            "      console.error('Mermaid errors:', error);"
          ]
        },
        {
          "title": "Interface: Mermaid",
          "url": "https://mermaid.js.org/config/setup/mermaid/interfaces/Mermaid.html",
          "excerpts": [
            "Defined in: [packages/mermaid/src/mermaid.ts:437](https://github.com/mermaid-js/mermaid/blob/master/packages/mermaid/src/mermaid.ts)"
          ]
        },
        {
          "title": "Architecture Diagram error when declaring diagram level \" ...",
          "url": "https://github.com/mermaid-js/mermaid/issues/6162",
          "excerpts": [
            "Jan 2, 2025 — Using Mermaid Live Editor, an architecture-beta with a title gets this error message Diagram syntax error Error: Parsing failed: Expecting token of type ':' ..."
          ]
        },
        {
          "title": "Adding a New Diagram/Chart (Deprecated)",
          "url": "https://docs.mermaidchart.com/mermaid-oss/community/new-diagram-jison.html",
          "excerpts": [
            "Apr 11, 2025 — Make sure that the parseError function for the parser is defined and calling mermaid.parseError . This way a common way of detecting parse ..."
          ]
        },
        {
          "title": "Using Mermaid Diagrams 100x Better with Your Favorite AI / LLM App (Dev to article)",
          "url": "https://dev.to/yigit-konur/using-mermaid-diagrams-100x-better-with-your-favorite-ai-llm-app-3m1p",
          "excerpts": [
            "I use Mermaid diagrams constantly in my daily workflow. But honestly, most AI apps tend to mess them up when generating these diagrams. It doesn't matter if it's the smartest model out there or the simplest one—mistakes still happen. That's why having a rock-solid prompt is super important for getting things right.",
            "Phase 1: Input Ingestion & Contextual Analysis",
            "If you're curious, you can check out the full prompt on GitHub here: <https://gist.githubusercontent.com/yigitkonur/af07453dd812cd8a0b565fed62dd0f7d/raw/eec183bb6e9777d888e49870b4f994f957da979d/llm-mermaid.md>",
            "*Code Formatting:** Apply consistent indentation (spaces) and spacing for optimal readability."
          ]
        },
        {
          "title": "How to set rendered Mermaid diagrams width to be based on screen ...",
          "url": "https://stackoverflow.com/questions/78935770/how-to-set-rendered-mermaid-diagrams-width-to-be-based-on-screen-size-in-obsidia",
          "excerpts": [
            "Set Mermaid Diagrams to 100% width of screen by default. .mermaid svg { display: block; width: 100%; margin: 0; padding: 0; } How to set the default height of responsive images when screen is wide, and have it scale proportionally when the screen width is narrow? 0."
          ]
        },
        {
          "title": "Usage | Mermaid - GitHub Pages",
          "url": "https://emersonbottero.github.io/mermaid-docs/config/usage.html",
          "excerpts": [
            "Values:\n\n* **strict** : ( **default** ) tags in text are encoded, click functionality is disabled\n* **loose** : tags in text are allowed, click functionality is enabled\n* **antiscript** : html tags in text are allowed, (only script element is removed), click functionality is enabled\n* **sandbox** : With this security level all rendering takes place in a sandboxed iframe. This prevent any JavaScript running in the context. This may hinder interactive functionality of the diagram like scripts, popups in sequence diagram or links to other tabs/targets etc. NOTE\n\nThis changes the default behaviour of mermaid so that after upgrade to 8.2, unless the \\`securityLevel\\` is not changed, tags in flowcharts are encoded as tags and clicking is disabled. \\*\\*sandbox\\*\\* security level is still in the beta version. } **If you are taking responsibility for the diagram source security you can set the `securityLevel` to a value of your choosing . This allows clicks and tags are allowed."
          ]
        }
      ],
      "reasoning": "The most directly relevant content identifies concrete parse errors produced by Mermaid when the diagram text is generated by an LLM, and the exact parser expectations that are violated (e.g., parse errors such as parse error on line, Expecting tokens like SEMI/NEWLINE, and tokens like MINUS). Excerpts that show explicit error messages (for example, parse errors on a line with specific offending tokens) demonstrate common failure modes an LLM can trigger when emitting Mermaid syntax. These passages also document typical failure types such as missing or incorrect arrow notation, unquoted labels with special characters, and other syntactic misformations that render the diagram unrenderable. In addition, several excerpts discuss error handling and remediation strategies: using explicit parseError handlers, leveraging structured prompts that require strict Mermaid code blocks, and implementing automatic repair loops that feed the error back to the model to fix the diagram. These pieces directly map to mitigations against the described failure modes by enforcing stricter formatting, introducing iterative repair, and separating content generation from formatting via a JSON-then-Mermaid pipeline. Other excerpts expand on the concept of deterministic, structured generation (JSON schemas and programmatic conversion to Mermaid), which aligns with the mitigation strategy of decoupling content from rendering logic and reducing model drift, thereby addressing failures where the LLM produces invalid Mermaid syntax. Additional excerpts provide broader context about Mermaid error-handling interfaces and how parseError and render paths are exposed in the API, which supports an engineering approach to guardrails when integrating Mermaid in apps. Collectively, the excerpts support the finegrained field value by illustrating (a) recurring failure modes that arise when LLMs produce Mermaid code and (b) concrete, actionable mitigations that can be embedded in prompts or tooling to reduce these failures. The most directly supportive content is the lines that present parse errors and the corresponding remediation approaches (automatic repair loop, two-step JSON-to-Mermaid pipeline, structured prompt rules), followed by subsequent citations that elaborate the error handling interfaces and practical mitigation patterns. The remaining excerpts provide broader documentation about Mermaid behavior or are tangential to the immediate failure-mode-to-mitigation mapping but still support the general theme of robust handling of Mermaid output from LLMs.",
      "confidence": "medium"
    },
    {
      "field": "mermaid_syntax_crib_sheet.core_syntax_summary",
      "citations": [
        {
          "title": "Mermaid Documentation - Diagram Syntax",
          "url": "https://mermaid.js.org/intro/syntax-reference.html",
          "excerpts": [
            "```\n---\nconfig:\n  layout: dagre\n  look: classic\n  theme: default\n---\n\nflowchart LR\nA[Start] --> B{Choose Path}\nB -->|Option 1| C[Path 1]\nB -->|Option 2| D[Path 2]\n```",
            "Mermaid's syntax is used to create diagrams, starting with a diagram type declaration, followed by the diagram and its content definitions.",
            "Here’s an example:\n\n##### Code:\n\nmermaid\n\nCtrl + Enter | Run ▶\n\nIn this example, the `layout: elk` line configures the diagram to use the ELK layout algorithm, along with the hand drawn look and forest theme.",
            "In this example, the `layout: elk` line configures the diagram to use the ELK layout algorithm, along with the hand drawn look and forest theme.",
            "#### Supported Layout Algorithms: [​]()\n\n* Dagre (default): This is the classic layout algorithm that has been used in Mermaid for a long time. It provides a good balance of simplicity and visual clarity, making it ideal for most diagrams. * ELK: For those who need more sophisticated layout capabilities, especially when working with large or intricate diagrams, the ELK (Eclipse Layout Kernel) layout offers advanced options. It provides a more optimized arrangement, potentially reducing overlapping and improving rea"
          ]
        }
      ],
      "reasoning": "The most relevant content directly demonstrates node and edge syntax in Mermaid with concrete examples. The example shows a node A defined as Start using square brackets for a rectangle and a node B defined with a different bracket form for another shape, and an arrow edge A --> B illustrating a basic relation. This directly aligns with the field value’s description of nodes created with an id and bracketed text to specify shapes and with various edge types for connections. Additional context in nearby excerpts expands on the general Mermaid diagram syntax and its layout/configuration features, which while not central to node/edge syntax, provide supportive background that helps validate how nodes and edges are used within Mermaid diagrams and how text should be quoted to avoid parsing issues, which matches the best practice noted in the field value. Therefore, the excerpt containing the concrete node/edge example is the most directly supportive, followed by excerpts that illustrate node/shape syntax and edge connections, and then those that mention layout/configuration as broader context. ",
      "confidence": "high"
    },
    {
      "field": "common_errors_and_fixes_cheatsheet",
      "citations": [
        {
          "title": "Mermaid Issue 6904 on GitHub",
          "url": "https://github.com/mermaid-js/mermaid/issues/6904",
          "excerpts": [
            "'EOF', 'subgraph', 'end', 'acc_title', 'acc_descr', 'acc_descr_multiline_value', 'AMP', 'COLON', 'STYLE', 'LINKSTYLE', 'CLASSDEF', 'CLASS', 'CLICK', 'DOWN', 'DEFAULT', 'NUM', 'COMMA', 'NODE_STRING', 'BRKT', 'MINUS', 'MULT', 'UNICODE_TEXT', 'direction_tb', 'direction_bt', 'direction_rl', 'direction_lr', got 'LINK_ID'",
            "```\n\nBut the cause of the error is \"@\". I send above mermaid code and error report to ChatGPT and Claude but both of them are failed to fix it. They just tried to add \"SEMI\", \"NEWLINE\" that does not fix the error. By quote the label above diagram will be successfully rendered. I suggest make the error report more precise and easy to fix both for human and AI."
          ]
        },
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "Parse error on line 1:↵graph TD    Q1[Question ↵-----^↵Expecting 'NODIR', 'DIR', got 'SPACE",
            "```\ngraph TD\n    Q1[Question 1]\n    Q1 -->|oui| Q1.1[Question 1.1]\n    Q1 -->|non| Q1.2[Question 1.2]\n    Q1.1 -->|oui| Q1.1.1[Question 1.1.1]\n    Q1.1 -->|non| Q1.1.2[Question 1.1.2]\n    Q1.2 -->|oui| Q1.2.1[Question 1.2.1]\n    Q1.2 -->|non| Q1.2.2[Question 1.2.2]\n    Q1.2.1 -->|oui| Q1.2.11[Question 1.2.11]\n    Q1.2.1 -->|non| Q1.2.21[Question 1.2.21]\n    Q1.1.1 -->|signal| R[Result]\n    Q1.1.2 -->|signal| R\n    Q1.2.11 -->|signal| R\n    Q1.2.21 -->|signal| R\n    Q1.2.2 -->|signal| R\n```\n"
          ]
        },
        {
          "title": "Mermaid Mermaid issue 4571 - ER diagram parse error with attribute starting with a number",
          "url": "https://github.com/mermaid-js/mermaid/issues/4571",
          "excerpts": [
            "        varchar 2fa_name",
            "        int 2fa_length",
            "        tinyint 2fa_userchange",
            "        tinyint enableCustomers",
            "        tinyint enableRouting"
          ]
        },
        {
          "title": "Interface: Mermaid",
          "url": "https://mermaid.js.org/config/setup/mermaid/interfaces/Mermaid.html",
          "excerpts": [
            "detectType** : ( `text` , `config?` ) => `string`"
          ]
        },
        {
          "title": "mermaid - Generation of diagrams and flowcharts from text ...",
          "url": "https://unpkg.com/mermaid@0.5.2/exdoc/index.html",
          "excerpts": [
            "The parseError function will be called when the parse function returns false. The code-example below in meta code illustrates how this could work: mermaid."
          ]
        },
        {
          "title": "Mermaid diagrams not working in Cursor : r/RooCode - Reddit",
          "url": "https://www.reddit.com/r/RooCode/comments/1jtto34/mermaid_diagrams_not_working_in_cursor/",
          "excerpts": [
            "It can be an issue with the LLM or API you are using that doesn't \"know\" Mermaid well, not a RooCode issue AFAIK."
          ]
        },
        {
          "title": "Syntax error in text mermaid version 10.1.0 · Issue #4432",
          "url": "https://github.com/mermaid-js/mermaid/issues/4432",
          "excerpts": [
            "Apr 28, 2023 — It is quite easy to create something that will trigger the error, problem is not being able to track it down without trial and error. And that can be quite ..."
          ]
        },
        {
          "title": "mermaidjs/mermaid.cli - Parsing subgraph fails on brackets",
          "url": "https://github.com/mermaidjs/mermaid.cli/issues/68",
          "excerpts": [
            "Oct 23, 2019 — ... Error: Parse error on line 2: ...raph TBsubgraph BIG[better]A-->Bend ----------------------^ Expecting 'SEMI', 'NEWLINE', 'SPACE', 'EOF ..."
          ]
        },
        {
          "title": "Is there a GPT that can convert diagram & flowchart jpeg images into ...",
          "url": "https://www.reddit.com/r/ChatGPTPro/comments/1hrgscq/is_there_a_gpt_that_can_convert_diagram_flowchart/",
          "excerpts": [
            "On the other hand, ChatGPT does a very passable job of writing mermaid code, from text. I happened to have a large system described, textually, ..."
          ]
        },
        {
          "title": "RooCode Issue 4636: Mermaid diagram generation failures",
          "url": "https://github.com/RooCodeInc/Roo-Code/issues/4636",
          "excerpts": [
            "Sometimes when modifying code or asking questions about code, Roo calls an LLM to create diagrams via Mermaid, but these diagrams often fail to render for various reasons (e.g., Mermaid syntax error...",
            "\nMermaid chart rendering issues · Issue #4636 · RooCodeInc/Roo-Code\n\n",
            "This is not an issue with Roo itself, but rather an issue with some underpowered LLMs. In this case, the model I used is gemini 2.5-flash-0520.",
            "How should this be solved? After generating a Mermaid diagram and encountering an error, place a button in the corner of the diagram. Clicking this button will resend the error message and the Mermaid code that caused the error to the large language model for regeneration.",
            "s be solved? After generating a Mermaid diagram and encountering an error, place a button in the corner of the diagram. Clicking this button will resend the error message and the Mermaid code that caused the error to the large language model for regeneration. This way, only the problematic Mermaid code needs to be fixed without regenerating the entire issue."
          ]
        },
        {
          "title": "How to escape characters? · Issue #170 · mermaid-js ...",
          "url": "https://github.com/mermaid-js/mermaid/issues/170",
          "excerpts": [
            "Jun 9, 2015 — The answer is here: https://mermaid.js.org/syntax/flowchart.html#special-characters-that-break-syntax",
            "Jun 9, 2015 — Could someone post a new mermaid.live link with escaping @, ~, \", (, and )?. React with 12"
          ]
        },
        {
          "title": "Mermaid is my poison because LLMs can generate it few ...",
          "url": "https://medium.com/@davidroliver/mermaid-is-my-poison-because-llms-can-generate-it-few-errors-unlike-plantuml-where-llms-always-seem-4f5371479e2c",
          "excerpts": [
            "Mermaid is my poison because LLMs can generate it few errors unlike Plantuml where LLMs always seem to get it wrong especially the icon references and same ..."
          ]
        },
        {
          "title": "Using ChatGPT&Mermaid to draw a flow chart | by Shu-Yu Huang",
          "url": "https://syhuang1990.medium.com/using-chatgpt-mermaid-to-draw-a-flow-chart-1b4de3573ac6",
          "excerpts": [
            "Though Netron is better in precision, but you can generate more elaborative graph via this ChatGPT-Mermaid method."
          ]
        },
        {
          "title": "Generating mermaid-based diagrams using ChatGPT - Stack Overflow",
          "url": "https://stackoverflow.com/questions/79135362/generating-mermaid-based-diagrams-using-chatgpt",
          "excerpts": [
            "ChatGPT is used to generate Mermaid flowcharts from source code, but errors occur due to special characters, and the user seeks tips to reduce ..."
          ]
        },
        {
          "title": "Idea: allow ChatGPT to create diagrams · Issue #6786 · excalidraw ...",
          "url": "https://github.com/excalidraw/excalidraw/issues/6786",
          "excerpts": [
            "This involves asking ChatGPT to generate a MermaidJS diagram, which I then copy and paste into the MermaidJS editor at https://mermaid.live/."
          ]
        },
        {
          "title": "Mermaid CLI - how do you escape characters?",
          "url": "https://stackoverflow.com/questions/28121525/mermaid-cli-how-do-you-escape-characters",
          "excerpts": [
            "Use quotation marks \"\" to enclose your text and escape special characters, e.g. in your example: graph TD question1{\"Gas tank less than 1/8?"
          ]
        },
        {
          "title": "Structured output for open models | Generative AI on ...",
          "url": "https://cloud.google.com/vertex-ai/generative-ai/docs/maas/capabilities/structured-output",
          "excerpts": [
            "Structured outputs enable a model to generate output that always adheres to a specific schema. For example, a model may be provided with a response schema."
          ]
        },
        {
          "title": "Structured output support for the Prompt API | AI on Chrome",
          "url": "https://developer.chrome.com/docs/ai/structured-output-for-prompt-api",
          "excerpts": [
            "May 13, 2025 — The Prompt API lets you specify a JSON output format of the model's response by passing a JSON Schema to the LanguageModel.prompt() and LanguageModel. ..."
          ]
        },
        {
          "title": "Generative AI on Vertex AI - Structured output",
          "url": "https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/control-generated-output",
          "excerpts": [
            "Learn how to control the output of generative AI multimodal models on Google Cloud's Vertex AI. This feature is also called structured output."
          ]
        },
        {
          "title": "The Ultimate Guide to Prompt Engineering in 2025",
          "url": "https://www.lakera.ai/blog/prompt-engineering-guide",
          "excerpts": [
            "Ambiguity is one of the most common causes of poor LLM output. Instead of issuing vague instructions, use precise, structured, and goal-oriented phrasing."
          ]
        },
        {
          "title": "11 Prompt Engineering Best Practices Every Modern Dev ...",
          "url": "https://mirascope.com/blog/prompt-engineering-best-practices",
          "excerpts": [
            "Jul 1, 2025 — We'll begin with the essentials: seven practical techniques for writing clearer, more effective prompts that deliver better results with less trial and error."
          ]
        },
        {
          "title": "Anthropic's Interactive Prompt Engineering Tutorial",
          "url": "https://github.com/anthropics/prompt-eng-interactive-tutorial",
          "excerpts": [
            "This course is intended to provide you with a comprehensive step-by-step understanding of how to engineer optimal prompts within Claude."
          ]
        },
        {
          "title": "OpenAI Prompt Engineering Guide : r/ChatGPT",
          "url": "https://www.reddit.com/r/ChatGPT/comments/18jdfex/openai_prompt_engineering_guide/",
          "excerpts": [
            "Here is a summary of their 6 strategies for getting better results when prompting GPT: Write Clear Instructions: - Be specific: Clarity in ..."
          ]
        }
      ],
      "reasoning": "The fine-grained field describes a cheatsheet of common errors and fixes for Mermaid diagrams, including parse errors like Parse error on line X, unrecognized tokens like LINK_ID, SPACE, or PIPE, and fixes such as quoting problematic text, removing/altering pipes in identifiers, or renaming identifiers that start with digits. The most directly supporting excerpts are those that explicitly quote or reference parse/lexical errors and the exact token names, as well as examples of fixes (e.g., quote a node label like AuthController@che, or rename 2fa_provider to two_fa_provider). Several excerpts present concrete instances of parse errors and the corresponding remedies, such as: - a parse error mentioning LINK_ID and a common remedy to quote the problematic label so that the diagram parser treats it as a single string; - another parse error example showing a PIPE inside a subgraph identifier and a fix to remove or replace the pipe character; - parse error patterns stating Expecting 'NEWLINE', 'EOF', etc., with guidance to retype or correct the arrow or newline; - errors where an attribute name starts with a digit (e.g., 2fa_provider) and the suggested fix to rename it to begin with a letter; - a lexical error example with an error indicating an unrecognized text and attribution to hidden/invisible characters that should be deleted and retyped; - ER-diagram specific error messages that mention Reviewing attribute naming starting with a number and quoting it, although quoting may still require adjustment; - additional excerpts discuss the broader category of parse errors and fixes for various Mermaid diagram types (ERD, Flowchart, Sequence). The excerpts collectively map precisely onto the field value’s structure: error category, diagram type, error message pattern, and fix. The most useful excerpts provide explicit token-level errors and actionable fixes (quoting labels; renaming leading digits; removing invalid characters; ensuring proper newline separation). Other excerpts illustrate related issues (e.g., lexical errors, attribute naming, and common pitfalls with subgraphs and arrows) which substantiate the broader cheat-sheet content. Thus, the cited excerpts directly support the field’s claims about parse/lexical errors and recommended remedies and provide concrete examples that align with the listed fixes. The reasoning connects each cited extract segment to a specific item in the fine-grained value, illustrating how the error type maps to diagram type and to a concrete, executable fix (e.g., wrap problematic labels in quotes, rename starting-with-digit attributes, adjust subgraph identifiers to avoid pipes, etc.).",
      "confidence": "high"
    },
    {
      "field": "diagram_specific_prompt_templates.0",
      "citations": [
        {
          "title": "LLM + Mermaid: How Modern Teams Create UML Diagrams ...",
          "url": "https://mike-vincent.medium.com/llm-mermaid-how-modern-teams-create-uml-diagrams-without-lucidchart-e54c56350804",
          "excerpts": [
            "flowchart TD  ",
            "    Start((Browse Products)) --> AddToCart[Add to Cart]  ",
            "    AddToCart --> Decision{Proceed to Checkout?} Decision -- Yes --> CheckStock[Check Stock]  ",
            "    Decision -- No --> Start  ",
            "    CheckStock -- In Stock --> Checkout[Proceed to Checkout]  ",
            "    CheckStock -- Out of Stock --> Notify[Notify User]  ",
            "    Notify --> Start  ",
            "    Payment -- Success --> Complete((Order Complete))  ",
            "    Payment -- Failure --> Retry[Retry Payment]  ",
            "    Retry --> Payment",
            "Entity Relationship Diagrams: Defining the Data Model",
            "    Checkout --> Payment[Process Payment]  ",
            "```",
            "```",
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Using Mermaid Diagrams 100x Better with Your Favorite AI / LLM App (Dev to article)",
          "url": "https://dev.to/yigit-konur/using-mermaid-diagrams-100x-better-with-your-favorite-ai-llm-app-3m1p",
          "excerpts": [
            "Your primary function is to transform ANY textual diagram idea, natural language description, malformed/incomplete Mermaid code, or embedded Mermaid blocks within Markdown into **production-ready, syntactically pristine, visually compelling, and interactive Mermaid diagrams. ** You will also provide micro-documentation via a concise changelog and embedded tool",
            "Phase 1: Input Ingestion & Contextual Analysis",
            "I use Mermaid diagrams constantly in my daily workflow. But honestly, most AI apps tend to mess them up when generating these diagrams. It doesn't matter if it's the smartest model out there or the simplest one—mistakes still happen. That's why having a rock-solid prompt is super important for getting things right."
          ]
        },
        {
          "title": "The ChatGPT prompt list for Software Engineers - Medium",
          "url": "https://medium.com/@martin-jurran/chatgpt-prompt-list-for-software-engineers-prompts-to-generate-software-diagrams-in-mermaid-deaf2f373104",
          "excerpts": [
            "The most comprehensive list of how ChatGPT and other LLMs can support diagram creation in Mermaid. Contains lots of useful prompts and other ..."
          ]
        },
        {
          "title": "Flowcharts – Basic Syntax",
          "url": "https://docs.mermaidchart.com/mermaid-oss/syntax/flowchart.html",
          "excerpts": [
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Directives Documentation",
          "url": "https://docs.mermaidchart.com/mermaid-oss/config/directives.html",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Documentation - Diagram Syntax",
          "url": "https://mermaid.js.org/intro/syntax-reference.html",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Can I control the direction of flowcharts in Mermaid? - Stack Overflow",
          "url": "https://stackoverflow.com/questions/66631182/can-i-control-the-direction-of-flowcharts-in-mermaid",
          "excerpts": [
            "```",
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Let the user decide the size and alignment of mermaid diagrams",
          "url": "https://forum.obsidian.md/t/let-the-user-decide-the-size-and-alignment-of-mermaid-diagrams/7019",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Config Documentation",
          "url": "https://mermaid.js.org/config/schema-docs/config.html",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "CSS aspect-ratio (MDN)",
          "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Havelsan's Revenue in 2024",
          "url": "https://github.com/RooCodeInc/Roo-Code/issues/6712",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid diagrams and automatic repair (GenAIScript blog)",
          "url": "https://microsoft.github.io/genaiscript/blog/mermaids/",
          "excerpts": [
            "```"
          ]
        },
        {
          "title": "Mermaid Mermaid issue 4571 - ER diagram parse error with attribute starting with a number",
          "url": "https://github.com/mermaid-js/mermaid/issues/4571",
          "excerpts": [
            "```"
          ]
        },
        {
          "title": "Flowchart: Add inheritDir option to make subgraphs inherit global ...",
          "url": "https://github.com/mermaid-js/mermaid/issues/6492",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Support specifying that two nodes should be at the same level/rank",
          "url": "https://github.com/mermaid-js/mermaid/issues/3723",
          "excerpts": [
            "```",
            "```"
          ]
        }
      ],
      "reasoning": "The finegrained field value describes a prompt template for generating a Mermaid flowchart, including direction, process description, and the requirement to output only the raw Mermaid code, along with a detailed example instantiation of Mermaid diagram settings. Excerpts that explicitly show or discuss flowchart/ Mermaid syntax, node relationships, and concrete diagram examples are directly relevant. In particular, excerpts that present flowchart TD or flowchart diagrams with node definitions and arrows demonstrate the exact structure and syntax referenced by the field value. Those passages that show example Mermaid code blocks or references to flowchart direction (TD or LR) and the idea of producing a standalone Mermaid diagram align with the field’s components, including diagram_type, direction, and the expectation of raw Mermaid output. Additional excerpts that discuss broader prompts for Mermaid diagrams or show related examples support context for how such templates are used, though they are somewhat less direct than the ones containing explicit flowchart constructs. Collectively, the most relevant material directly embodies the template’s syntax and output requirements, while the less direct sources provide supporting context about Mermaid prompts and usage patterns.",
      "confidence": "high"
    },
    {
      "field": "mermaid_syntax_crib_sheet.layout_options",
      "citations": [
        {
          "title": "Mermaid Documentation - Diagram Syntax",
          "url": "https://mermaid.js.org/intro/syntax-reference.html",
          "excerpts": [
            "#### Supported Layout Algorithms: [​]()\n\n* Dagre (default): This is the classic layout algorithm that has been used in Mermaid for a long time. It provides a good balance of simplicity and visual clarity, making it ideal for most diagrams. * ELK: For those who need more sophisticated layout capabilities, especially when working with large or intricate diagrams, the ELK (Eclipse Layout Kernel) layout offers advanced options. It provides a more optimized arrangement, potentially reducing overlapping and improving rea",
            "In this example, the `layout: elk` line configures the diagram to use the ELK layout algorithm, along with the hand drawn look and forest theme.",
            "* ELK: For those who need more sophisticated layout capabilities, especially when working with large or intricate diagrams, the ELK (Eclipse Layout Kernel) layout offers advanced options.",
            "```\n---\nconfig:\n  layout: dagre\n  look: classic\n  theme: default\n---\n\nflowchart LR\nA[Start] --> B{Choose Path}\nB -->|Option 1| C[Path 1]\nB -->|Option 2| D[Path 2]\n```",
            "Mermaid's syntax is used to create diagrams, starting with a diagram type declaration, followed by the diagram and its content definitions.",
            "Mermaid Chart now allows you to choose different layout algorithms to better organize and present your diagrams, especially when dealing with more complex structures.",
            "#### Selecting Layout Algorithms [​]()\n\nIn addition to customizing the look of your diagrams, Mermaid Chart now allows you to choose different layout algorithms to better organize and present your diagrams, especially when dealing with more complex structures. The layout algorithm dictates how nodes and edges are arranged on the page.",
            "An application of using Directives to change Themes. Theme is a value within Mermaid's configuration that dictates the color scheme for diagrams. Layout and ... When integrating Mermaid, you can include look and layout configuration with the initialize call. This is also where you add the loading of elk. Edit this ...",
            "Here’s an example:\n\n##### Code:\n\nmermaid\n\nCtrl + Enter | Run ▶\n\nIn this example, the `layout: elk` line configures the diagram to use the ELK layout algorithm, along with the hand drawn look and forest theme.",
            "#### Customizing ELK Layout: [​]()\n\nWhen using the ELK layout, you can further refine the diagram’s configuration, such as how nodes are placed and whether parallel edges should be combined:\n\n* To combine parallel edges, use mergeEdges: true | false. * To configure node placement, use nodePlacementStrategy with the following options:\n      + SIMPLE\n      + NETWORK\\_SIMPLEX\n      + LINEAR\\_SEGMENTS\n      + BRANDES\\_KOEPF (def",
            "Layout Algorithms",
            "You can pass metadata Frontmatter with your definition by adding `---` to the lines before and after the definition. This 'triple dash' MUST be the only character on the first line."
          ]
        }
      ],
      "reasoning": "The central claim concerns layout behavior dictated by header-directed direction keywords (TD, TB, LR, BT, RL) and using LR or TD to achieve a square-like aspect. The excerpts provide information about layout algorithms (Dagre, ELK) and sample configurations, which relate to how diagrams are laid out but do not explicitly mention the directional header keywords or their effect on squareness. They do show that Mermaid supports different layout options and configurations in the header/config, which is relevant context for understanding layout control, but they do not confirm the specific directional keywords or the squarish outcome described in the field value. Therefore, the most relevant excerpts are those that discuss layout options and explicit layout configurations (including ELK and Dagre), as they form the closest evidence base for the general claim about layout control, while none of them directly confirm the exact directional header keywords or their squarish consequence. The remaining excerpts provide additional contextual details about layout and configuration but do not directly substantiate the finegrained field value.",
      "confidence": "low"
    },
    {
      "field": "css_svg_wrapper_snippets.0",
      "citations": [
        {
          "title": "CSS aspect-ratio (MDN)",
          "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio",
          "excerpts": [
            "The **`aspect-ratio`** [CSS](/en-US/docs/Web/CSS) property allows you to define the desired width-to-height ratio of an element's box. This means that even if the parent container or viewport size changes, the browser will adjust the element's dimensions to maintain the specified width-to-height ratio.",
            "css\n\n```\ndiv {\n  width: 100px;\n  height: auto;\n}\ndiv:nth-child(1) {\n  aspect-ratio: 1/1;\n}\ndiv:nth-child(2) {\n  aspect-ratio: 0.5;\n}\ndiv:nth-child(3) {\n  aspect-ratio: 1;\n}\ndiv:nth-child(4) {\n  aspect-ratio: 1/0.5;\n}\ndiv:nth-child(5) {\n  aspect-ratio: 16/9;\n}\n```\n\n",
            "  aspect-ratio: 3/2 auto;",
            "  aspect-ratio: 3/2 auto;",
            "img {",
            "img {",
            "```",
            "```",
            "```",
            "```",
            "```\ndiv {\n  display: inline-flex;\n  background-color: lime;\n  justify-content: center;\n}\n```"
          ]
        },
        {
          "title": "Configure flowchart to auto-resize so that nodes are always ...",
          "url": "https://github.com/mermaid-js/mermaid/issues/838",
          "excerpts": [
            "May 14, 2019 — I've tried playing with various useMaxWidth and HTML/css settings, however I'm unable to achieve the following behavior: Given a #mermaid ... May 14, 2019 — Given a #mermaid container sitting within an auto-width div, I would like to render flow charts so that the nodes are always the same size ...",
            "I've tried playing with various useMaxWidth and HTML/css settings, however I'm unable to achieve the following behavior: Given a #mermaid ..."
          ]
        },
        {
          "title": "Troubleshooting - MkDocs-Mermaid2 - Read the Docs",
          "url": "https://mkdocs-mermaid2.readthedocs.io/en/latest/troubleshooting/",
          "excerpts": [
            "Mermaid diagram is not displayed (or displayed incorrectly) Tip: To start with, use a simple diagram that you know is syntactically correct."
          ]
        },
        {
          "title": "Flowcharts – Basic Syntax",
          "url": "https://docs.mermaidchart.com/mermaid-oss/syntax/flowchart.html",
          "excerpts": [
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Directives Documentation",
          "url": "https://docs.mermaidchart.com/mermaid-oss/config/directives.html",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Documentation - Diagram Syntax",
          "url": "https://mermaid.js.org/intro/syntax-reference.html",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "LLM + Mermaid: How Modern Teams Create UML Diagrams ...",
          "url": "https://mike-vincent.medium.com/llm-mermaid-how-modern-teams-create-uml-diagrams-without-lucidchart-e54c56350804",
          "excerpts": [
            "```",
            "```",
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Can I control the direction of flowcharts in Mermaid? - Stack Overflow",
          "url": "https://stackoverflow.com/questions/66631182/can-i-control-the-direction-of-flowcharts-in-mermaid",
          "excerpts": [
            "```",
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Let the user decide the size and alignment of mermaid diagrams",
          "url": "https://forum.obsidian.md/t/let-the-user-decide-the-size-and-alignment-of-mermaid-diagrams/7019",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Config Documentation",
          "url": "https://mermaid.js.org/config/schema-docs/config.html",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Havelsan's Revenue in 2024",
          "url": "https://github.com/RooCodeInc/Roo-Code/issues/6712",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid diagrams and automatic repair (GenAIScript blog)",
          "url": "https://microsoft.github.io/genaiscript/blog/mermaids/",
          "excerpts": [
            "```"
          ]
        },
        {
          "title": "Mermaid Mermaid issue 4571 - ER diagram parse error with attribute starting with a number",
          "url": "https://github.com/mermaid-js/mermaid/issues/4571",
          "excerpts": [
            "```"
          ]
        },
        {
          "title": "Flowchart: Add inheritDir option to make subgraphs inherit global ...",
          "url": "https://github.com/mermaid-js/mermaid/issues/6492",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Support specifying that two nodes should be at the same level/rank",
          "url": "https://github.com/mermaid-js/mermaid/issues/3723",
          "excerpts": [
            "```",
            "```"
          ]
        }
      ],
      "reasoning": "The most directly relevant information is a formal description of the CSS aspect-ratio property, which defines the width-to-height ratio of an element and ensures the box resizes to maintain that ratio. This directly supports the finegrained field value’s emphasis on a square container via aspect-ratio: 1/1. An example that lists multiple aspect-ratio values including 1/1 and other ratios reinforces how a 1:1 square shape can be achieved in practice. Additional excerpts show practical usage of aspect-ratio in code snippets and notes about applying the property to containers, which aligns with the idea of using a square container to host an inner Mermaid diagram that fills the container. While some excerpts discuss Mermaid sizing and troubleshooting in broader terms, they provide contextual support for rendering behavior when trying to maintain consistent node/diagram sizes within responsive layouts. Taken together, the most informative pieces confirm the core approach (square aspect-ratio container) and demonstrate its application, while the Mermaid-focused excerpts supply ancillary guidance on how such containers interact with Mermaid rendering. ",
      "confidence": "medium"
    },
    {
      "field": "mermaid_syntax_crib_sheet.header_keyword",
      "citations": [
        {
          "title": "Mermaid Documentation - Diagram Syntax",
          "url": "https://mermaid.js.org/intro/syntax-reference.html",
          "excerpts": [
            "```\n---\nconfig:\n  layout: dagre\n  look: classic\n  theme: default\n---\n\nflowchart LR\nA[Start] --> B{Choose Path}\nB -->|Option 1| C[Path 1]\nB -->|Option 2| D[Path 2]\n```",
            "Mermaid's syntax is used to create diagrams, starting with a diagram type declaration, followed by the diagram and its content definitions.",
            "#### Supported Layout Algorithms: [​]()\n\n* Dagre (default): This is the classic layout algorithm that has been used in Mermaid for a long time. It provides a good balance of simplicity and visual clarity, making it ideal for most diagrams. * ELK: For those who need more sophisticated layout capabilities, especially when working with large or intricate diagrams, the ELK (Eclipse Layout Kernel) layout offers advanced options. It provides a more optimized arrangement, potentially reducing overlapping and improving rea",
            "In this example, the `layout: elk` line configures the diagram to use the ELK layout algorithm, along with the hand drawn look and forest theme.",
            "Mermaid Chart now allows you to choose different layout algorithms to better organize and present your diagrams, especially when dealing with more complex structures."
          ]
        }
      ],
      "reasoning": "The finegrained field value asserts that a diagram must begin with a diagram type such as graph or flowchart, immediately followed by a direction specifier like TD or LR. The most directly supportive content demonstrates this exact pattern: a Mermaid code example begins with a diagram type declaration (flowchart) and then specifies a direction (LR), illustrating the required sequence. Additional content reinforces the general rule by describing Mermaid's diagram syntax as starting with a diagram type declaration and by discussing layout algorithms and configurations that accompany the diagram definition. Together, these excerpts corroborate the notion that the diagram syntax should start with a type, followed by a directional specifier within Mermaid diagrams.",
      "confidence": "medium"
    },
    {
      "field": "mermaid_syntax_crib_sheet.common_pitfalls_and_fixes",
      "citations": [
        {
          "title": "Mermaid Documentation - Diagram Syntax",
          "url": "https://mermaid.js.org/intro/syntax-reference.html",
          "excerpts": [
            "Mermaid's syntax is used to create diagrams, starting with a diagram type declaration, followed by the diagram and its content definitions.",
            "```\n---\nconfig:\n  layout: dagre\n  look: classic\n  theme: default\n---\n\nflowchart LR\nA[Start] --> B{Choose Path}\nB -->|Option 1| C[Path 1]\nB -->|Option 2| D[Path 2]\n```",
            "Here’s an example:\n\n##### Code:\n\nmermaid\n\nCtrl + Enter | Run ▶\n\nIn this example, the `layout: elk` line configures the diagram to use the ELK layout algorithm, along with the hand drawn look and forest theme.",
            "#### Supported Layout Algorithms: [​]()\n\n* Dagre (default): This is the classic layout algorithm that has been used in Mermaid for a long time. It provides a good balance of simplicity and visual clarity, making it ideal for most diagrams. * ELK: For those who need more sophisticated layout capabilities, especially when working with large or intricate diagrams, the ELK (Eclipse Layout Kernel) layout offers advanced options. It provides a more optimized arrangement, potentially reducing overlapping and improving rea",
            "In this example, the `layout: elk` line configures the diagram to use the ELK layout algorithm, along with the hand drawn look and forest theme.",
            "An application of using Directives to change Themes. Theme is a value within Mermaid's configuration that dictates the color scheme for diagrams. Layout and ... When integrating Mermaid, you can include look and layout configuration with the initialize call. This is also where you add the loading of elk. Edit this ...",
            "#### Customizing ELK Layout: [​]()\n\nWhen using the ELK layout, you can further refine the diagram’s configuration, such as how nodes are placed and whether parallel edges should be combined:\n\n* To combine parallel edges, use mergeEdges: true | false. * To configure node placement, use nodePlacementStrategy with the following options:\n      + SIMPLE\n      + NETWORK\\_SIMPLEX\n      + LINEAR\\_SEGMENTS\n      + BRANDES\\_KOEPF (def",
            "Layout Algorithms",
            "Mermaid Chart now allows you to choose different layout algorithms to better organize and present your diagrams, especially when dealing with more complex structures.",
            "#### Selecting Layout Algorithms [​]()\n\nIn addition to customizing the look of your diagrams, Mermaid Chart now allows you to choose different layout algorithms to better organize and present your diagrams, especially when dealing with more complex structures. The layout algorithm dictates how nodes and edges are arranged on the page.",
            "You can pass metadata Frontmatter with your definition by adding `---` to the lines before and after the definition. This 'triple dash' MUST be the only character on the first line.",
            "* ELK: For those who need more sophisticated layout capabilities, especially when working with large or intricate diagrams, the ELK (Eclipse Layout Kernel) layout offers advanced options."
          ]
        }
      ],
      "reasoning": "The finegrained field value presents concrete rules about how certain tokens and characters must be used within Mermaid diagrams to avoid parsing errors. The most directly supportive content is a general statement that Mermaid's syntax governs how diagrams are declared and how content definitions are organized, which underpins why tokens like end, or characters within node IDs, could cause issues if not properly quoted or capitalized. The example excerpt that shows a code block with a configuration and a simple flowchart demonstrates how code blocks and label content appear within Mermaid syntax, illustrating the need for careful escaping and quoting in more complex node text scenarios. Other excerpts establish that Mermaid supports various layout algorithms, themes, and directives, which provides context that the syntax is non-trivial and sensitive to proper formatting, further aligning with the notion that special tokens and characters require careful handling. Excerpts that focus on layout algorithms and themes, while not directly about the exact pitfalls, reinforce that Mermaid parsing is affected by the surrounding syntax and options, thereby indirectly supporting why such pitfalls exist. None of the excerpts explicitly enumerate the exact four pitfalls listed, but they collectively support the idea that Mermaid syntax is sensitive to reserved words, character escaping, and quoted text, which is consistent with the type of issues described in the field value.",
      "confidence": "low"
    },
    {
      "field": "interactivity_and_security_guide.vulnerabilities_and_mitigations",
      "citations": [
        {
          "title": "Security | Mermaid",
          "url": "https://mermaid.js.org/community/security.html",
          "excerpts": [
            "Configuring DomPurify [​]()\n\nBy default Mermaid uses a baseline [DOMPurify](https://github.com/cure53/DOMPurify) config. It is possible to override the options passed to DOMPurify by adding a `dompurifyConfig` key to the Mermaid options. This could potentially break the output of Mermaid so use this with c",
            "The Mermaid team takes the security of Mermaid and the applications that use Mermaid seriously. This page describes how to report any vulnerabilities you may find, and lists best practices to minimize the risk of introducing a vulnerability.",
            "Configuring DomPurify"
          ]
        },
        {
          "title": "Stored XSS in Mermaid when viewing Markdown files - GitLab",
          "url": "https://gitlab.com/gitlab-org/gitlab/-/issues/332528",
          "excerpts": [
            "You do this by updating the configuration in config.secure which is a list of parameters that are to be blocked. The default values are: [' ..."
          ]
        },
        {
          "title": "DOMPurify 3.1.7 breaks Mermaid diagrams using foreignObject #1002",
          "url": "https://github.com/cure53/DOMPurify/issues/1002",
          "excerpts": [
            "DOMPurify 3.1.7 breaks retrocompatibility due to a recent foreignObject -related change from @masatokinugawa. This breaks Mermaid diagrams on all our newly ..."
          ]
        }
      ],
      "reasoning": "The finegrained field value focuses on security vulnerabilities in Mermaid, including XSS risks, remote resource fetching and data exfiltration, and explicit mitigations such as enforcing strict security levels, using the secure configuration, applying input sanitization, blocking external fetches, and staying updated with patches. Excerpts that describe how Mermaid handles security (including DOMPurify usage, configuration options, and reporting vulnerabilities) provide direct support for these points. For example, the security-oriented excerpt explains that Mermaid uses a baseline DOMPurify configuration by default and notes the ability to override DOMPurify options via a dompurifyConfig key, which directly relates to how input sanitization and risk are managed. Another excerpt discusses the Mermaid security page and guidance on reporting vulnerabilities, which corroborates the existence of known issues and the responsible disclosure process. Additional excerpts describe configuring DOMPurify, which ties to sanitization practices. The GitLab issue about stored XSS in Markdown content demonstrates a concrete manifestation of XSS risks in related environments, reinforcing the emphasis on sanitization and safe rendering. Finally, an excerpt about a DOMPurify issue that breaks Mermaid diagrams highlights practical tradeoffs and the need to balance security with compatibility, underpinning the proposed mitigations such as careful versioning and compatibility considerations. Together, these excerpts substantiate the study of vulnerabilities and mitigations around Mermaid rendering and content handling. ",
      "confidence": "high"
    },
    {
      "field": "diagram_specific_prompt_templates.3",
      "citations": [
        {
          "title": "Using Mermaid Diagrams 100x Better with Your Favorite AI / LLM App (Dev to article)",
          "url": "https://dev.to/yigit-konur/using-mermaid-diagrams-100x-better-with-your-favorite-ai-llm-app-3m1p",
          "excerpts": [
            "Your primary function is to transform ANY textual diagram idea, natural language description, malformed/incomplete Mermaid code, or embedded Mermaid blocks within Markdown into **production-ready, syntactically pristine, visually compelling, and interactive Mermaid diagrams. ** You will also provide micro-documentation via a concise changelog and embedded tool",
            "If you're curious, you can check out the full prompt on GitHub here: <https://gist.githubusercontent.com/yigitkonur/af07453dd812cd8a0b565fed62dd0f7d/raw/eec183bb6e9777d888e49870b4f994f957da979d/llm-mermaid.md>",
            "I use Mermaid diagrams constantly in my daily workflow. But honestly, most AI apps tend to mess them up when generating these diagrams. It doesn't matter if it's the smartest model out there or the simplest one—mistakes still happen. That's why having a rock-solid prompt is super important for getting things right."
          ]
        },
        {
          "title": "The ChatGPT prompt list for Software Engineers - Medium",
          "url": "https://medium.com/@martin-jurran/chatgpt-prompt-list-for-software-engineers-prompts-to-generate-software-diagrams-in-mermaid-deaf2f373104",
          "excerpts": [
            "The most comprehensive list of how ChatGPT and other LLMs can support diagram creation in Mermaid. Contains lots of useful prompts and other ..."
          ]
        },
        {
          "title": "LLM + Mermaid: How Modern Teams Create UML Diagrams ...",
          "url": "https://mike-vincent.medium.com/llm-mermaid-how-modern-teams-create-uml-diagrams-without-lucidchart-e54c56350804",
          "excerpts": [
            "flowchart TD  "
          ]
        }
      ],
      "reasoning": "The fine-grained field value is a prompt template for generating a Mermaid state diagram, with an explicit emphasis on outputting only the Mermaid code and describing a state machine. Excerpts that discuss transforming any textual diagram idea or incomplete Mermaid into production-ready Mermaid diagrams directly relate to the goal of providing a robust, reusable prompt template for Mermaid diagrams. One excerpt emphasizes that the primary function is to convert descriptions, malformed Mermaid, or embedded Mermaid blocks into production-ready Mermaid diagrams, which aligns with creating a reusable, strict state diagram prompt template. Another excerpt highlights that Mermaid diagram capability is a core area for LLM prompts and that the Mermaid prompt ecosystem is broad, indicating a research focus on how to structure prompts for diagrams (including state diagrams) in Mermaid. A third excerpt points to a concrete Mermaid-oriented prompt resource, underscoring that the Mermaid prompt space is well-trodden and that practitioners seek comprehensive guidance for diagram generation. Additional excerpts provide concrete Mermaid code examples (e.g., flowchart syntax and sample diagram fragments) that illustrate how Mermaid-based diagrams are generated from prompts, which is relevant for understanding the kinds of templates and constraints that might be encoded in a state-diagram template. Collectively, these excerpts support the notion of a robust prompt template aimed at producing state-diagram Mermaid output by constraining syntax, ensuring syntactic correctness, and focusing on Mermaid as the target output format. The most supportive elements explicitly frame Mermaid as the core output and emphasize the need for high-quality diagram generation through prompts, which directly underpins the value of the requested field.",
      "confidence": "high"
    },
    {
      "field": "diagram_specific_prompt_templates.6",
      "citations": [
        {
          "title": "Using Mermaid Diagrams 100x Better with Your Favorite AI / LLM App (Dev to article)",
          "url": "https://dev.to/yigit-konur/using-mermaid-diagrams-100x-better-with-your-favorite-ai-llm-app-3m1p",
          "excerpts": [
            "If you're curious, you can check out the full prompt on GitHub here: <https://gist.githubusercontent.com/yigitkonur/af07453dd812cd8a0b565fed62dd0f7d/raw/eec183bb6e9777d888e49870b4f994f957da979d/llm-mermaid.md>",
            "Your primary function is to transform ANY textual diagram idea, natural language description, malformed/incomplete Mermaid code, or embedded Mermaid blocks within Markdown into **production-ready, syntactically pristine, visually compelling, and interactive Mermaid diagrams. ** You will also provide micro-documentation via a concise changelog and embedded tool"
          ]
        },
        {
          "title": "The ChatGPT prompt list for Software Engineers - Medium",
          "url": "https://medium.com/@martin-jurran/chatgpt-prompt-list-for-software-engineers-prompts-to-generate-software-diagrams-in-mermaid-deaf2f373104",
          "excerpts": [
            "The most comprehensive list of how ChatGPT and other LLMs can support diagram creation in Mermaid. Contains lots of useful prompts and other ..."
          ]
        },
        {
          "title": "Flowcharts – Basic Syntax",
          "url": "https://docs.mermaidchart.com/mermaid-oss/syntax/flowchart.html",
          "excerpts": [
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Directives Documentation",
          "url": "https://docs.mermaidchart.com/mermaid-oss/config/directives.html",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Documentation - Diagram Syntax",
          "url": "https://mermaid.js.org/intro/syntax-reference.html",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "LLM + Mermaid: How Modern Teams Create UML Diagrams ...",
          "url": "https://mike-vincent.medium.com/llm-mermaid-how-modern-teams-create-uml-diagrams-without-lucidchart-e54c56350804",
          "excerpts": [
            "```",
            "```",
            "```",
            "```",
            "```",
            "```",
            "flowchart TD  ",
            "    Start((Browse Products)) --> AddToCart[Add to Cart]  ",
            "Entity Relationship Diagrams: Defining the Data Model"
          ]
        },
        {
          "title": "Can I control the direction of flowcharts in Mermaid? - Stack Overflow",
          "url": "https://stackoverflow.com/questions/66631182/can-i-control-the-direction-of-flowcharts-in-mermaid",
          "excerpts": [
            "```",
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Let the user decide the size and alignment of mermaid diagrams",
          "url": "https://forum.obsidian.md/t/let-the-user-decide-the-size-and-alignment-of-mermaid-diagrams/7019",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Config Documentation",
          "url": "https://mermaid.js.org/config/schema-docs/config.html",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "CSS aspect-ratio (MDN)",
          "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Havelsan's Revenue in 2024",
          "url": "https://github.com/RooCodeInc/Roo-Code/issues/6712",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid diagrams and automatic repair (GenAIScript blog)",
          "url": "https://microsoft.github.io/genaiscript/blog/mermaids/",
          "excerpts": [
            "```"
          ]
        },
        {
          "title": "Mermaid Mermaid issue 4571 - ER diagram parse error with attribute starting with a number",
          "url": "https://github.com/mermaid-js/mermaid/issues/4571",
          "excerpts": [
            "```"
          ]
        },
        {
          "title": "Flowchart: Add inheritDir option to make subgraphs inherit global ...",
          "url": "https://github.com/mermaid-js/mermaid/issues/6492",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Support specifying that two nodes should be at the same level/rank",
          "url": "https://github.com/mermaid-js/mermaid/issues/3723",
          "excerpts": [
            "```",
            "```"
          ]
        }
      ],
      "reasoning": "The target field value describes a Mind Map prompt template for Mermaid, requesting raw Mermaid code with a root topic and clearly defined branches, and providing an example instantiation. Excerpts that focus on improving Mermaid diagram generation with LLMs, and that present concrete prompts, templates, or authoring guidance, directly support this need. Direct statements such as transforming any textual idea or incomplete Mermaid code into production-ready Mermaid diagrams are highly relevant because they outline the purpose and quality expectations for Mermaid prompts, which aligns with the idea of a robust mind map prompt template. Additional excerpts that show ending-user prompts or collections of prompts for generating Mermaid diagrams further support the concept of having well-structured prompt templates for diagrams, which can be adapted or extended to a mind map use-case. Excerpts that provide specific Mermaid content (like flowcharts or UML diagrams) remain relevant as they illustrate the broader pattern of Mermaid-based prompt design and how LLMs should output diagram code, which is adjacent to, and supportive of, a mind map-specific prompt. Excerpt about mind maps is not explicitly present, but the material described in these excerpts demonstrates the methodology for crafting prompt templates to produce clean Mermaid syntax, which is exactly what a Mind Map Mermaid prompt would require. The most directly supportive content is where the excerpts advocate turning descriptive inputs into syntactically correct Mermaid diagrams and where they emphasize prompt-level quality and documentation, which would inform the exact construction and validation of diagram_specific_prompt_templates.6.",
      "confidence": "medium"
    },
    {
      "field": "diagram_specific_prompt_templates.4",
      "citations": [
        {
          "title": "LLM + Mermaid: How Modern Teams Create UML Diagrams ...",
          "url": "https://mike-vincent.medium.com/llm-mermaid-how-modern-teams-create-uml-diagrams-without-lucidchart-e54c56350804",
          "excerpts": [
            "Entity Relationship Diagrams: Defining the Data Model"
          ]
        },
        {
          "title": "Using Mermaid Diagrams 100x Better with Your Favorite AI / LLM App (Dev to article)",
          "url": "https://dev.to/yigit-konur/using-mermaid-diagrams-100x-better-with-your-favorite-ai-llm-app-3m1p",
          "excerpts": [
            "If you're curious, you can check out the full prompt on GitHub here: <https://gist.githubusercontent.com/yigitkonur/af07453dd812cd8a0b565fed62dd0f7d/raw/eec183bb6e9777d888e49870b4f994f957da979d/llm-mermaid.md>",
            "Your primary function is to transform ANY textual diagram idea, natural language description, malformed/incomplete Mermaid code, or embedded Mermaid blocks within Markdown into **production-ready, syntactically pristine, visually compelling, and interactive Mermaid diagrams. ** You will also provide micro-documentation via a concise changelog and embedded tool",
            "Phase 1: Input Ingestion & Contextual Analysis",
            "I use Mermaid diagrams constantly in my daily workflow. But honestly, most AI apps tend to mess them up when generating these diagrams. It doesn't matter if it's the smartest model out there or the simplest one—mistakes still happen. That's why having a rock-solid prompt is super important for getting things right."
          ]
        }
      ],
      "reasoning": "The fine-grained field value centers on generating a Mermaid Entity Relationship Diagram (ERD) using a well-defined prompt template and producing only the raw Mermaid code. The strongest support comes from excerpts that explicitly address Entity Relationship Diagrams within Mermaid or related tooling, which aligns with the ERD-focused nature of the prompt template and its expected output. Additional support comes from excerpts that discuss using Mermaid diagrams in AI/LLM workflows, including prompts designed to transform ideas or incomplete Mermaid blocks into production-ready diagrams, and those that offer prompt constructs for Mermaid usage in software engineering contexts. These excerpts collectively corroborate the idea of structured Mermaid prompts and diagrams, including ERD-oriented usage, even if they do not reproduce the exact ERD example or syntax shown in the field value. Direct mentions of ER diagrams or ERD in Mermaid strengthen relevance, while general Mermaid prompt improvement discussions provide supportive context for the broader goal of reliable diagram generation by an LLM.",
      "confidence": "medium"
    },
    {
      "field": "master_prompt_blueprint.layout_heuristics",
      "citations": [
        {
          "title": "Improving LLM Output Reliability with Structured Data Generation",
          "url": "https://www.matt-adams.co.uk/2025/02/12/structured-data-generation.html",
          "excerpts": [
            "This post explores a pattern I’ve successfully used to improve the reliability of complex format generation by leveraging the models’ strength in JSON output to separate content generation from format handling.",
            "I encountered this challenge while working on generating Mermaid diagrams with LLMs. Even though the models could understand the concept and content of what needed to be generated, they would often:",
            "The Solution: A Two-Step Approach",
            "2. **Format Conversion** : Use code to convert this structured data into the desired final format",
            "* Produce invalid Mermaid syntax",
            "* Create inconsistent node and edge definitions"
          ]
        },
        {
          "title": "Mermaid Diagrams - Platen",
          "url": "https://platen.io/modules/platen/markup/mermaid/",
          "excerpts": [
            "Initialize Directive #. Immediately before the diagram syntax, you can specify an initialize directive for Mermaid. This overrides the site's ..."
          ]
        }
      ],
      "reasoning": "The core value asks for a systematic approach to producing Mermaid diagrams with constraints on aspect ratio and formatting. Excerpts that discuss leveraging JSON/output structuring to improve reliability and separate content from formatting are highly relevant because they provide a mechanism to ensure diagrams are generated in a well-structured way before final rendering. Excerpts that specifically mention Mermaid diagram issues, including invalid syntax and error handling, are relevant as they underscore practical pain points that the field value aims to address and justify the need for robust, instruction-rich prompts. Excerpts describing a two-step process (content generation in JSON and then format conversion to Mermaid) map directly to the requested separation of concerns and enablement of reliable, squarish outputs. Excerpts that discuss initializing Mermaid directives or using structured outputs to control formatting are relevant because they provide concrete methods that could be adapted to enforce the desired layout and formatting. Specifically, guidance on generating a structured JSON representation first, and then converting to the final Mermaid output, aligns with providing detailed instructions to achieve consistent, well-formed diagrams. Mentions of introducing frontmatter configuration, layout directions, and spacing controls, as well as best practices for avoiding overly wide nodes, connect closely to the requested formatting and layout controls. References to using layout algorithms (like ELK) for better diagram balance support the requested recommendation for a more compact, balanced output. Overall, the most directly supportive content describes a disciplined, two-step approach for generating diagrams (content-first JSON, then formatting), followed by practical Mermaid-specific guidance and layout considerations, with additional procedural cues through Mermaids’ directives and initialization practices. The less direct but still supportive items provide contextual backing on the importance of structured prompts and error handling to ensure Mermaid outputs meet quality and layout expectations.",
      "confidence": "medium"
    },
    {
      "field": "accessibility_and_readability_practices",
      "citations": [
        {
          "title": "Accessibility Options",
          "url": "https://mermaid.js.org/config/accessibility.html",
          "excerpts": [
            "html",
            "`< svg \n  aria-labelledby = \"chart-title-mermaid_382ee221\" \n  aria-describedby = \"chart-desc-mermaid_382ee221\" \n  aria-roledescription = \"flowchart-v2\" \n  xmlns = \"http://www.w3.org/2000/svg\" \n  width = \"100%\" \n  id = \"mermaid_382ee221\" \n > \n  < title id = \"chart-title-mermaid_382ee221\" >Big decisions</ title > \n  < desc id = \"chart-desc-mermaid_382ee221\" > \n    The official Bob's Burgers corporate processes that are used for making very, very big \n    decisions.\nThis is actually a very simple flow: identify the big decision and then make the big \n    decision. </ desc > \n </ svg >`",
            "#### Sample Code Snippets for other diagram types [​]()",
            "* Flowchart with the accessible title \"Big Decisions\" and the single-line accessible description \"Bob's Burgers process for making big decisions\"",
            "##### Code:\n\nmermaid",
            "Mermaid will automatically insert the [aria-roledescription]() and, if provided in the diagram text by the diagram author, the [accessible title and description. ]()",
            "Here is HTML that is generated, showing that the SVG element is labelled by the accessible title (id = `chart-title-mermaid-1668725057758` ) and described by the accessible description (id = `chart-desc-mermaid-1668725057758` ); and the accessible title element (text = \"This is the accessible title\") and the accessible description element (text = \"This is an accessible description\").",
            "Support for accessible titles and descriptions is available for all diagrams/chart types. We have tried to keep the same keywords and format for all diagrams so that it is easy to understand and maintain. The accessible title and description will add `<title>` and `<desc>` elements within the SVG element and the [aria-labelledby](https://www.w3.org/TR/wai-aria/) and [aria-describedby](https://www.w3.org/TR/wai-aria/) attributes in the SVG tag.",
            "The **accessible title** is specified with the **accTitle** _keyword_ , followed by a colon ( `:` ), and the string value for the title. The string value ends at the end of the line. (It can only be a single line.) Ex: `accTitle: This is a single line title`"
          ]
        },
        {
          "title": "Mermaid Theme Configuration",
          "url": "https://mermaid.js.org/config/theming.html",
          "excerpts": [
            "##### Code:\n\nmermaid"
          ]
        },
        {
          "title": "How to Meet WCAG (Quick Reference) - W3C",
          "url": "https://www.w3.org/WAI/WCAG22/quickref/",
          "excerpts": [
            "All non-text content that is presented to the user has a text alternative that serves the equivalent purpose, except for the situations listed below. 1.4.8 Visual Presentation; 1.4.9 Images of Text (No Exception); 1.4.10 Reflow; 1.4.11 Non-text Contrast; 1.4.12 Text Spacing; 1.4.13 Content on Hover or Focus. A customizable quick reference to Web Content Accessibility Guidelines (WCAG) 2 requirements (success criteria) and techniques."
          ]
        },
        {
          "title": "Understanding WCAG 2 Contrast and Color Requirements",
          "url": "https://webaim.org/articles/contrast/",
          "excerpts": [
            "Jan 9, 2021 — This article pulls together the terms and principles needed to understand WCAG 2 requirements for contrast and color."
          ]
        },
        {
          "title": "Understanding Guideline 1.4: Distinguishable | WAI",
          "url": "https://www.w3.org/WAI/WCAG21/Understanding/distinguishable.html",
          "excerpts": [
            "This guideline is concerned with making the default presentation as easy to perceive as possible to people with disabilities."
          ]
        },
        {
          "title": "Text has enhanced contrast[proposed] | ACT Rule | WAI - W3C",
          "url": "https://www.w3.org/WAI/standards-guidelines/act/rules/09o5cg/proposed/",
          "excerpts": [
            "This rule checks that the highest possible contrast of every text character with its background meets the enhanced contrast requirement."
          ]
        },
        {
          "title": "Important letter spacing in style attributes is wide enough - W3C",
          "url": "https://www.w3.org/WAI/standards-guidelines/act/rules/24afc2/",
          "excerpts": [
            "Important letter spacing in style attributes is wide enough. Rule Mapping. This is an Atomic rule to test 1.4.12: Text Spacing (Level AA). Description."
          ]
        },
        {
          "title": "F104: Failure of Success Criterion 1.4.12 due to clipped or ... - W3C",
          "url": "https://www.w3.org/WAI/WCAG21/Techniques/failures/F104",
          "excerpts": [
            "The purpose of this technique is to identify and test a failure condition where part of the content clips and is unreadable when the user overrides the spacing ..."
          ]
        }
      ],
      "reasoning": "The field value outlines color-contrast guidelines grounded in WCAG and describes how to implement accessibility in Mermaid diagrams, including using themes and themeVariables to satisfy contrast ratios, and the use of accTitle and accDescr for accessible labeling within SVGs. Several excerpts provide direct support: excerpts detailing accTitle and accDescr usage show how to embed accessible titles and multi-line descriptions inside Mermaid-generated SVGs, and how these map to aria-labelledby and aria-describedby attributes. Other excerpts describe Mermaid’s accessibility configuration options (e.g., dompurify configurations and security-related accessibility controls), and the ability to adjust diagram appearance for readability via themes and themeVariables. Additional excerpts cover WCAG contrast ratios (AA/AAA targets) and non-text contrast for graphical objects, which aligns with the field’s emphasis on WCAG-based contrast requirements for diagrams. Taken together, these excerpts directly back the stated accessibility and readability practices, including how to implement high-contrast, accessible Mermaid diagrams and how to annotate them for assistive technologies. The most directly relevant parts are the passages that show accTitle and accDescr usage in Mermaid SVGs and the corresponding guidance on accessible labeling, followed by excerpts that describe Mermaid’s accessibility configurations and WCAG contrast guidance, and finally general WCAG/contrast guidance that underpins the recommended practices for readability in diagrams.",
      "confidence": "high"
    },
    {
      "field": "mermaid_syntax_crib_sheet.diagram_type",
      "citations": [
        {
          "title": "Mermaid Documentation - Diagram Syntax",
          "url": "https://mermaid.js.org/intro/syntax-reference.html",
          "excerpts": [
            "```\n---\nconfig:\n  layout: dagre\n  look: classic\n  theme: default\n---\n\nflowchart LR\nA[Start] --> B{Choose Path}\nB -->|Option 1| C[Path 1]\nB -->|Option 2| D[Path 2]\n```",
            "Mermaid's syntax is used to create diagrams, starting with a diagram type declaration, followed by the diagram and its content definitions.",
            "Here’s an example:\n\n##### Code:\n\nmermaid\n\nCtrl + Enter | Run ▶\n\nIn this example, the `layout: elk` line configures the diagram to use the ELK layout algorithm, along with the hand drawn look and forest theme.",
            "#### Supported Layout Algorithms: [​]()\n\n* Dagre (default): This is the classic layout algorithm that has been used in Mermaid for a long time. It provides a good balance of simplicity and visual clarity, making it ideal for most diagrams. * ELK: For those who need more sophisticated layout capabilities, especially when working with large or intricate diagrams, the ELK (Eclipse Layout Kernel) layout offers advanced options. It provides a more optimized arrangement, potentially reducing overlapping and improving rea",
            "In this example, the `layout: elk` line configures the diagram to use the ELK layout algorithm, along with the hand drawn look and forest theme.",
            "Mermaid Chart now allows you to choose different layout algorithms to better organize and present your diagrams, especially when dealing with more complex structures."
          ]
        }
      ],
      "reasoning": "The most directly relevant content shows a Mermaid code block labeled as a flowchart, demonstrating the exact diagram type in use: the snippet includes 'flowchart LR' and 'A[Start] --> B{Choose Path}...', which clearly matches the requested Flowchart (flowchart). This confirms the presence of the flowchart diagram type in Mermaid syntax. The next most relevant is a general description of Mermaid diagram syntax that references the existence of a diagram type declaration, which aligns with identifying the kind of diagram being described and supports that there is a notable diagram type in Mermaid documentation. A third excerpt presents an example with Mermaid and a layout configuration (layout: elk) within a diagram context; while it does not explicitly state the diagram type, it reinforces that diagrams are declared and configured, which is consistent with discussing diagram types like flowcharts. A fourth excerpt discusses layout algorithms and explicitly mentions ELK and Dagre; this is relevant context for how diagram types (including flowcharts) can be arranged, supporting the idea that flowcharts exist within a family of diagram types that can be laid out with various algorithms. A fifth excerpt discusses the ELK layout and forest themes, which again ties into how flowcharts or diagrams can be styled or arranged, reinforcing the link between diagram types and their configurations. A sixth excerpt describes selecting layout algorithms and their impact on diagram organization, which is relevant to understanding the broader context of diagram types and their rendering, including flowcharts.",
      "confidence": "high"
    },
    {
      "field": "error_handling_and_self_repair_loop",
      "citations": [
        {
          "title": "Mermaid Error Handling Example - GitHub Issue 5385",
          "url": "https://github.com/mermaid-js/mermaid/issues/5385",
          "excerpts": [
            "    mermaid.parseError = (error, hash) => {",
            "      console.error('Mermaid errors:', error);",
            "      this.setState({ mermaidError: error.str });",
            "    };"
          ]
        },
        {
          "title": "Flowcharts – Basic Syntax",
          "url": "https://docs.mermaidchart.com/mermaid-oss/syntax/flowchart.html",
          "excerpts": [
            "    };",
            "    };",
            "```",
            "```",
            "```",
            "        click B \"https://www.github.com\" \"This is a link\"",
            "        click C call callback() \"Tooltip\"",
            "        click D href \"https://www.github.com\" \"This is a link\"",
            "      securityLevel: 'loose',"
          ]
        },
        {
          "title": "Interface: Mermaid",
          "url": "https://mermaid.js.org/config/setup/mermaid/interfaces/Mermaid.html",
          "excerpts": [
            "Defined in: [packages/mermaid/src/mermaid.ts:448](https://github.com/mermaid-js/mermaid/blob/master/packages/mermaid/src/mermaid.ts)",
            "> **setParseErrorHandler** : ( `parseErrorHandler` ) => `void`",
            "detectType** : ( `text` , `config?` ) => `string`"
          ]
        },
        {
          "title": "mermaid - Generation of diagrams and flowcharts from text ...",
          "url": "https://unpkg.com/mermaid@0.5.2/exdoc/index.html",
          "excerpts": [
            "The parseError function will be called when the parse function returns false. The code-example below in meta code illustrates how this could work: mermaid."
          ]
        },
        {
          "title": "Architecture Diagram error when declaring diagram level \" ...",
          "url": "https://github.com/mermaid-js/mermaid/issues/6162",
          "excerpts": [
            "Jan 2, 2025 — Using Mermaid Live Editor, an architecture-beta with a title gets this error message Diagram syntax error Error: Parsing failed: Expecting token of type ':' ...",
            "Diagram syntax error",
            "Error: Parsing failed: Expecting token of type ':' but found \\`test\\`. Expecting: one of these possible Token sequence",
            "1. [--]",
            "2.",
            "Description Using Mermaid Live Editor, an architecture-beta with a title gets this error message Diagram syntax error Error: Parsing failed: Expecting token of type ':' but found `test`. Expecting: one of these possible Token sequences:"
          ]
        },
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "Hello, I've try parsing the mermaid format with the mermaidAPI but i got an error and doesn't know if i'm doing something wrong or if i just ... Nov 16, 2020 — I've try parsing the mermaid format with the mermaidAPI but i got an error and doesn't know if i'm doing something wrong or if i just missed ...",
            "}\nhash: {text: \" \", token: \"SPACE\", line: 0, loc: {…}, expected: Array(2)}",
            "`\n{str: \"Parse error on line 1:↵graph TD    Q1[Question ",
            "mermaid.initialize({startOnLoad:true});",
            "the mermaid.md file :",
            "the mermaid.md file :",
            "the mermaid.md file :\n\n```\ngraph TD\n    Q1[Question 1]\n    Q1 -->|oui| Q1.1[Question 1.1]\n    Q1 -->|non| Q1.2[Question 1.2]\n    Q1.1 -->|oui| Q1.1.1[Question 1.1.1]\n    Q1.1 -->|non| Q1.1.2[Question 1.1.2]\n    Q1.2 -->|oui| Q1.2.1[Question 1.2.1]\n    Q1.2 -->|non| Q1.2.2[Question 1.2.2]\n    Q1.2.1 -->|oui| Q1.2.11[Question 1.2.11]\n    Q1.2.1 -->|non| Q1.2.21[Question 1.2.21]\n    Q1.1.1 -->|signal| R[Result]\n    Q1.1.2 -->|signal| R\n    Q1.2.11 -->|signal| R\n    Q1.2.21 -->|signal| R\n    Q1.2.2 -->|signal| R\n```\n",
            "## Description",
            "\n## Description",
            "Parser error when used with mermaidAPI",
            "graph TD",
            "```",
            "```",
            "```",
            "Description"
          ]
        },
        {
          "title": "Mermaid diagrams and automatic repair (GenAIScript blog)",
          "url": "https://microsoft.github.io/genaiscript/blog/mermaids/",
          "excerpts": [
            "Parse error on line 3:\n\n\n\n...--> B{Is it?} B ->|Yes| C[OK]    B\n\n\n\n----------------------^\n\n\n\nExpecting 'SEMI', 'NEWLINE', 'EOF', 'AMP', 'START_LINK', 'LINK', 'LINK_ID', got 'MINUS'",
            "Expecting 'NEWLINE', 'EOF', 'SQS', 'STR', 'DOT', 'GENERICTYPE', 'LABEL', 'STRUCT_START', 'STRUCT_STOP', 'STYLE_SEPARATOR', 'ANNOTATION_END', 'ALPHA', 'AGGREGATION', 'EXTENSION', 'COMPOSITION', 'DEPE…",
            "()\n\nOne issue with mermaid is that… syntax matters and LLM sometimes get it wrong. Let’s introduce a syntax error in the example above. ```\n```mermaid\n\n\n\ngraph TD\n\n\n\nA[Start] --> B{Is it?} B ->|Yes| C[OK]\n\n\n\nB -->|No| D[Not OK]\n\n\n\nC --> E[End]\n\n\n\nD --> E\n\n\n\n```\n```\n\nNow mermaid fails to parse and the diagram is not rendered:\n\n```\nParse error on line 3:\n\n\n\n...--> B{Is it?} B ->|Yes| C[OK]    B\n\n\n\n----------------------^",
            "### The repaired diagram",
            "This diagram removes invalid classDef and annotation syntax and corrects relationship/arrows for Mermaid compatibility.",
            "Yes, you can use `parsers.mermaid` to parse mermaid diagrams in your scripts\nprogrammatically.",
            "May 16, 2025 — One issue with mermaid is that… syntax matters and LLM sometimes get it wrong. Let's introduce a syntax error in the example above. ```mermaid.",
            "We have added a “repairer” in [system.diagrams](/genaiscript/reference/scripts/system) system prompt. The repairer looks for `mermaid` code blocks in the output and tries to parse them. If it the diagram has parse errors, the repairer adds a message to the chat to fix those.",
            "The LLM repairs the diagram”]()\n\nIn this case, the LLM is able to repair the diagram and generate a valid mermaid diag",
            "In most cases, the LLM is able to fix the syntax error and generate a valid diagram using the error message.",
            "If it the diagram has parse errors, the repairer adds a message to the chat to fix those. Here is a trace of a simple script that generates a ... May 16, 2025 — The repairer looks for mermaid code blocks in the output and tries to parse them. If it the diagram has parse errors, the repairer adds a ...",
            "May 16, 2025 — One issue with mermaid is that… syntax matters and LLM sometimes get it wrong. Let's introduce a syntax error in the example above. ```mermaid. May 16, 2025 — We have added a “repairer” in system.diagrams system prompt. The repairer looks for mermaid code blocks in the output and tries to parse them.",
            "The mermaid diagrem generated has a syntax error. Expecting 'NEWLINE', 'EOF', 'SQS', 'STR', 'DOT', 'GENERICTYPE', 'LABEL', 'STRUCT_START', ' ...",
            ")\n\nSyntax errors\n-------------\n\n[Section titled “Syntax errors”]()\n\nOne issue with mermaid is that… syntax matters and LLM sometimes get it wrong. Let’s introduce a syntax error in the example above. ```\n```mermaid\n\n\n\ngraph TD\n\n\n\nA[Start] --> B{Is it?} B ->|Yes| C[OK]\n\n\n\nB -->|No| D[Not OK]\n\n\n\nC --> E[End]\n\n\n\nD --> E\n\n\n\n```\n```\n\nNow mermaid fails to parse and the diagram is not rendered:\n\n```\nParse error on line 3:\n\n\n\n...--> B{Is it?} B ->|Yes| C[OK]    B\n\n\n\n----------------------^\n\n\n\nExpecting 'SEMI', 'NEWLINE', 'EOF', 'AMP', 'START_LINK', 'LINK', 'LINK_ID', got 'MINUS'\n```\n\nIn most cases, the LLM is able to fix the syntax error and generate a valid diagram using the error message. Automatic repair\n----------------\n\n[Section titled “Automatic repair”]()\n\nWe have added a “repairer” in [system.diagrams](/genaiscript/reference/scripts/system) system prompt. The repairer looks for `mermaid` code blocks in the output and tries to parse them. If it the diagram has parse errors, the repairer adds a message to the chat to fix those. !\n ... \n```\nParse error on line 107:\n\n\n\n...hatGenerationContext,createChatTurnGener\n\n\n\n-----------------------^\n\n\n\nExpecting 'NEWLINE', 'EOF', 'SQS', 'STR', 'DOT', 'GENERICTYPE', 'LABEL', 'STRUCT_START', 'STRUCT_STOP', 'STYLE_SEPARATOR', 'ANNOTATION_END', 'ALPHA', 'AGGREGATION', 'EXTENSION', 'COMPOSITION', 'DEPE…\n```\n\nThe repairer enters the game and responds to the assistant with a message to fix the error. The entire chat conversation is sent back to the LLM\n, including the error message.",
            ")\n\nHere is a simple example of a flowchart:\n\n```\n```mermaid\n\n\n\ngraph TD\n\n\n\nA[Start] --> B{Is it?} B -->|Yes| C[OK]\n\n\n\nB -->|No| D[Not OK]\n\n\n\nC --> E[End]\n\n\n\nD --> E\n\n\n\n```\n```\n\nThis markdown will be rendered as a flowchart in preview mode (and in GitHub! ):\n\n!\n ... \nwhite-space: nowrap%3b line-height: 1.5%3b max-width: 200px%3b text-align: center%3b' xmlns='http://www.w3.org/1999/xhtml'%3e%3cspan class='nodeLabel'%3e%3cp%3eEnd%3c/p%3e%3c/span%3e%3c/div%3e%3c/foreignObject%3e%3c/g%3e%3c/g%3e%3c/g%3e%3c/g%3e%3c/g%3e%3c/svg%3e)\n\nSyntax errors\n-------------\n\n[Section titled “Syntax errors”]()\n\nOne issue with mermaid is that… syntax matters and LLM sometimes get it wrong. Let’s introduce a syntax error in the example above. ```\n```mermaid\n\n\n\ngraph TD\n\n\n\nA[Start] --> B{Is it?} B ->|Yes| C[OK]\n\n\n\nB -->|No| D[Not OK]\n\n\n\nC --> E[End]\n\n\n\nD --> E\n\n\n\n```\n```\n\nNow mermaid fails to parse and the diagram is not rendered:\n\n```\nParse error on line 3:\n\n\n\n...--> B{Is it?} B ->|Yes| C[OK]    B\n\n\n\n----------------------^\n\n\n\nExpecting 'SEMI', 'NEWLINE', 'EOF', 'AMP', 'START_LINK', 'LINK', 'LINK_ID', got 'MINUS'\n```\n\nIn most cases, the LLM is able to fix the syntax error and generate a valid diagram using the error message. Automatic repair\n----------------\n\n[Section titled “Automatic repair”]()\n\nWe have added a “repairer” in [system.diagrams](/genaiscript/reference/scripts/system) system prompt. The repairer looks for `mermaid` code blocks in the output and tries to parse them. If it the diagram has parse errors, the repairer adds a message to the chat to fix those. !\n ... \n┌─👤 user\n\n\n\n│<CODE lang=\"ts\" file=\"packag",
            "\n\nOne issue with mermaid is that… syntax matters and LLM sometimes get it wrong. Let’s introduce a syntax error in the example above. ```",
            "\n\nHere is a simple example of a flowchart:\n\n```\n",
            "```mermaid",
            "graph TD",
            "A[Start] --> B{Is it?} B -->|Yes| C[OK]",
            "```mermaid\n\n\n\ngraph TD\n\n\n\nA[Start] --> B{Is it?} B ->|Yes| C[OK]\n\n\n\nB -->|No| D[Not OK]\n\n\n\nC --> E[End]\n\n\n\nD --> E\n\n\n\n``",
            "C --> E[End]",
            "D --> E",
            "```",
            "Now mermaid fails to parse and the diagram is not rendered:\n\n```\nParse error on line 3:\n\n\n\n...--> B{Is it?} B ->|Yes| C[OK]    B\n\n\n\n----------------------^",
            "Expecting 'SEMI', 'NEWLINE', 'EOF', 'AMP', 'START_LINK', 'LINK', 'LINK_ID', got 'MINUS'",
            "### The LLM repairs the diagram",
            "Mermaid diagrams in Markdown",
            "Syntax errors",
            "Syntax errors",
            "The mermaid diagrem generated has a syntax error.",
            "The repairer enters the game and responds to the assistant with a message to fix the error.",
            "The entire chat conversation is sent back to the LLM\n, including the error message",
            "The repaired diagram",
            "\nFinally, the repaired diagram is returned to the user"
          ]
        },
        {
          "title": "Can I control the direction of flowcharts in Mermaid? - Stack Overflow",
          "url": "https://stackoverflow.com/questions/66631182/can-i-control-the-direction-of-flowcharts-in-mermaid",
          "excerpts": [
            "graph TD",
            "```",
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Support specifying that two nodes should be at the same level/rank",
          "url": "https://github.com/mermaid-js/mermaid/issues/3723",
          "excerpts": [
            "graph TD",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Directives Documentation",
          "url": "https://docs.mermaidchart.com/mermaid-oss/config/directives.html",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Documentation - Diagram Syntax",
          "url": "https://mermaid.js.org/intro/syntax-reference.html",
          "excerpts": [
            "```",
            "```",
            "```",
            "```",
            "[Flowchart](/syntax/flowchart.html)",
            "[Sequence Diagram](/syntax/sequenceDiagram.html)",
            "[Class Diagram](/syntax/classDiagram.html)",
            "[State Diagram](/syntax/stateDiagram.html)",
            "[Entity Relationship Diagram](/syntax/entityRelationshipDiagram.html)",
            "[User Journey](/syntax/userJourney.html)",
            "[Gantt](/syntax/gantt.html)",
            "[Pie Chart](/syntax/pie.html)",
            "[Quadrant Chart](/syntax/quadrantChart.html)",
            "[Requirement Diagram](/syntax/requirementDiagram.html)",
            "[GitGraph (Git) Diagram](/syntax/gitgraph.html)",
            "[Mindmaps](/syntax/mindmap.html)",
            "[Timeline](/syntax/timeline.html)",
            "[ZenUML](/syntax/zenuml.html)",
            "[Sankey 🔥🔥](/syntax/sankey.html)",
            "[XY Chart\n🔥🔥](/syntax/xyChart.html)",
            "[Block Diagram 🔥🔥](/syntax/block.html)",
            "[Packet 🔥🔥](/syntax/packet.html)",
            "[Kanban 🔥🔥](/syntax/kanban.html)",
            "[Architecture 🔥🔥](/syntax/architecture.html)",
            "[Radar 🔥🔥](/syntax/radar.html)",
            "[Treemap 🔥🔥](/syntax/treemap.html)"
          ]
        },
        {
          "title": "LLM + Mermaid: How Modern Teams Create UML Diagrams ...",
          "url": "https://mike-vincent.medium.com/llm-mermaid-how-modern-teams-create-uml-diagrams-without-lucidchart-e54c56350804",
          "excerpts": [
            "```",
            "```",
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Let the user decide the size and alignment of mermaid diagrams",
          "url": "https://forum.obsidian.md/t/let-the-user-decide-the-size-and-alignment-of-mermaid-diagrams/7019",
          "excerpts": [
            "```",
            "```",
            "```",
            "```",
            "```\n"
          ]
        },
        {
          "title": "Mermaid Config Documentation",
          "url": "https://mermaid.js.org/config/schema-docs/config.html",
          "excerpts": [
            "```",
            "```",
            "[Flowchart](/syntax/flowchart.html)",
            "[Sequence Diagram](/syntax/sequenceDiagram.html)",
            "[Class Diagram](/syntax/classDiagram.html)",
            "[State Diagram](/syntax/stateDiagram.html)",
            "[Entity Relationship Diagram](/syntax/entityRelationshipDiagram.html)",
            "[User Journey](/syntax/userJourney.html)",
            "[Gantt](/syntax/gantt.html)",
            "[Pie Chart](/syntax/pie.html)",
            "[Quadrant Chart](/syntax/quadrantChart.html)",
            "[Requirement Diagram](/syntax/requirementDiagram.html)",
            "[GitGraph (Git) Diagram](/syntax/gitgraph.html)",
            "[Mindmaps](/syntax/mindmap.html)",
            "[Timeline](/syntax/timeline.html)",
            "[ZenUML](/syntax/zenuml.html)",
            "[Sankey 🔥🔥](/syntax/sankey.html)",
            "[XY Chart\n🔥🔥](/syntax/xyChart.html)",
            "[Block Diagram 🔥🔥](/syntax/block.html)",
            "[Packet 🔥🔥](/syntax/packet.html)",
            "[Kanban 🔥🔥](/syntax/kanban.html)",
            "[Architecture 🔥🔥](/syntax/architecture.html)",
            "[Radar 🔥🔥](/syntax/radar.html)"
          ]
        },
        {
          "title": "CSS aspect-ratio (MDN)",
          "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Havelsan's Revenue in 2024",
          "url": "https://github.com/RooCodeInc/Roo-Code/issues/6712",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Mermaid issue 4571 - ER diagram parse error with attribute starting with a number",
          "url": "https://github.com/mermaid-js/mermaid/issues/4571",
          "excerpts": [
            "```",
            "Description"
          ]
        },
        {
          "title": "Flowchart: Add inheritDir option to make subgraphs inherit global ...",
          "url": "https://github.com/mermaid-js/mermaid/issues/6492",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Syntax error in text mermaid version 11.4.1 · Issue #29 - GitHub",
          "url": "https://github.com/ahmedkhaleel2004/gitdiagram/issues/29",
          "excerpts": [
            "This error simply means the LLM generated incorrect Mermaid.js diagram code. I've tried addressing this issue in numerous ways but ultimately I find that there ...",
            "Feb 16, 2025 — This error simply means the LLM generated incorrect Mermaid.js diagram code. I've tried addressing this issue in numerous ways but ultimately I find that there ...",
            "Issue #29",
            "Description",
            "In the step 3/3, \"Syntax error in text mermaid version 11.4.1\" occurs frequently. Maybe we should state In the prompt that the LLM is required to strictly adhere to the Mermaid syntax."
          ]
        },
        {
          "title": "Mermaid Error Handling and Repair (Mermaid API/Dart docs and GenAIScript reference)",
          "url": "https://pub.dev/documentation/mermaid/latest/mermaid/mermaidApiParse.html",
          "excerpts": [
            " true if the\ndiagram syntax is valid. If [mermaidSetParseErrorHandler](../mermaid/mermaidSetParseErrorHandler.html) has been used to set\na parseError() handler then this method will return false if the diagram\nsyntax is invalid. (If no parseError() handler has been ",
            "Used to test diagram code before calling render(). Returns true if the diagram syntax is valid. If mermaidSetParseErrorHandler has been used to set a ..."
          ]
        },
        {
          "title": "mermaidSetParseErrorHandler function - mermaid library - Dart API",
          "url": "https://pub.dev/documentation/mermaid/latest/mermaid/mermaidSetParseErrorHandler.html",
          "excerpts": [
            "Used to set a handler to be called when invalid diagram syntax is encountered. The definition of the function should match void parseError(String err,String ... Used to set a handler to be called when invalid diagram syntax is encountered. The definition of the function should match void parseError(String err,String ..."
          ]
        },
        {
          "title": "AI-Powered Mermaid Diagram Fixer and Enhanced Generation ...",
          "url": "https://github.com/RooCodeInc/Roo-Code/issues/7513",
          "excerpts": [
            "The feature uses the Gemini API to intelligently analyze and fix Mermaid diagram syntax errors through a structured process of JSON generation, ...",
            "This button would leverage a large language model (LLM) to automatically correct syntax errors in the Mermaid code.",
            "3. **Structured Approach:** A methodology to reliably generate Mermaid diagrams, involving:\n       + **Stage 1: Structured JSON Generation:** Gemini analyzes the invalid Mermaid code and its error message, then generates a JSON object representing the corrected diagram, strictly adhering to a predefined JSON schema. + **Stage 2: Client-Side Validation:** Validate the structured JSON output against the schema using `jsonschema` for correctness and adherence to content rules (e.g., no parentheses in labels). + **Stage 3: Python Code Generation :** Gemini generates a Python function that converts the validated JSON into Mermaid DSL. + **Stage 4: Execution of Generated Python Code:** Executes the generated Python code within Gemini's Code Execution environment to produce the final Mermaid DSL.",
            "2. **LLM Integration:** Integration with Google Gemini (specifically `gemini-2.5-pro` ) to analyze and correct the Mermaid code.",
            "4. **Error Handling:** Implement error handling for API calls, code execution, and potential validation failures.",
            "+ **Stage 3: Python Code Generation :** Gemini generates a Python function that converts the validated JSON into Mermaid DSL.",
            "+ **Stage 4: Execution of Generated Python Code:** Executes the generated Python code within Gemini's Code Execution environment to produce the final Mermaid DSL.",
            "### Proposed Solution",
            "1.\n**\"Fix Diagram\" Button:** A button added to the `MermaidBlock` component, displayed near the diagram that failed to render, to trigger the AI-powered fix.",
            "Error Handling: Implement error handling for API calls, code execution, and potential validation failures. Current Behavior. Currently, when ...",
            "3. **Structured Approach:** A methodology to reliably generate Mermaid diagrams, involving:",
            "+ **Stage 2: Client-Side Validation:** Validate the structured JSON output against the schema using `jsonschema` for correctness and adherence to content rules (e.g., no parentheses in labels).",
            "### Current Behavior",
            "Currently, when Mermaid parsing fails, the `MermaidBlock` component catches the error and sets an error message using `setError(err.message || \"Failed to render Mermaid diagram\")` [webview-ui/src/components/common/MermaidBlock.tsx:124](webview-ui/src/components/common/MermaidBlock.tsx:124) . This message is displayed to the user along with the invalid code.",
            "### Proposed Implementation Details",
            "The implementation would follow this methodology:",
            "1. **Acquire and Pre-process Input (Client-Side):** Sanitize the Mermaid code and error message, enforce length limits to the input.",
            "2. **Gemini Stage 1 - Structured JSON Generation:** Use Gemini to convert the invalid Mermaid code and error into a structured JSON object conforming to a predefined schema.",
            "3. **Client-Side Validation of Structured JSON:** Validate the structured JSON output against the schema using `jsonschema` .",
            "4. **Gemini Stage 2 - Python Code Generation for Mermaid Conversion:** Generate Python code to convert the validated JSON into Mermaid DSL.",
            "5. **Execution of Generated Python Code (Within Gemini):** Execute the generated Python code within Gemini's Code Execution environment to produce the final Mermaid DSL.",
            "6. **Post-processing and Final Output:** Clean the generated Mermaid DSL and perform a final client-side Mermaid syntax validation (optional, requires Node.js and Mermaid CLI).",
            "### Impact",
            "This feature would:",
            "* Significantly improve the user experience by providing an automated way to fix invalid Mermaid diagrams.",
            "* Reduce the time and effort required to create and maintain Mermaid diagrams.",
            "* Enhance the reliability of Mermaid diagram generation through a structured and validated process.",
            "### Additional Context",
            "This feature is inspired by the Mermaid diagram fixer implemented in [Kilo-Org/kilocode@ 32e4c30](https://github.com/Kilo-Org/kilocode/commit/32e4c304506b4042b76265446a3169206eb243a5) . **Note:** This issue is for proposing the feature and methodology. I am not planning to implement this myself.",
            "## Metadata",
            "### Assignees",
            "No one assigned",
            "### Labels",
            "[Issue/PR - Triage New issue. Needs quick review to confirm validity and assign labels. ](https://github.com/RooCodeInc/Roo-Code/issues?q=state%3Aopen%20label%3A%22Issue%2FPR%20-%20Triage%22) New issue. Needs quick review to confirm validity and assign labels."
          ]
        },
        {
          "title": "Self-correction in LLM calls: a review - The Elder Scripts",
          "url": "https://theelderscripts.com/self-correction-in-llm-calls-a-review/",
          "excerpts": [
            "In this post we discuss self-correction strategies: an approach where LLMs don't just generate content but actively review and refine their own ..."
          ]
        },
        {
          "title": "Export Diagram to Mermaid parse error",
          "url": "https://intellij-support.jetbrains.com/hc/en-us/community/posts/11881633254546-Export-Diagram-to-Mermaid-parse-error",
          "excerpts": [
            "Select Tables, right-click, select `Export Diagram` `Open in Web Editor` `Mermaid` Error: ```text Error: Parse error on line 10: ...--> users : user_id:id Jun 8, 2023 — Select Tables, right-click, select `Export Diagram` `Open in Web Editor` `Mermaid` Error: ```text Error: Parse error on line 10: ...--> users : user_id:id",
            "Jun 8, 2023 — Select Tables, right-click, select `Export Diagram` `Open in Web Editor` `Mermaid` Error: ```text Error: Parse error on line 10: ...--> users : user_id:id Jun 8, 2023 — Expecting 'NEWLINE', 'EOF', got 'LABEL'. ``` Demo: (Online FlowChart & Diagrams Editor - Mermaid Live Editor. Just replace the `:` here with ...",
            "w)\n\nJust replace the \\`:\\` here with other characters, such as \\`=\\`",
            "Demo: ( [Online FlowChart & Diagrams Editor - Mermaid Live Editor](https://mermaid.live/edit:eNpNkE9rhDAQxb9KmLOKSfybQw-le9xTeyqBEszsNqCJJBG6Fb971SrsJZOZ93vDY2bonEYQ0PUqhDej7l4N0mrjsYvGWfL6Ie2ukdGFGMgsLSHE2EimgP7LaGmXk9gmz8QhSvtvJWn6Qg5InHaxQZDAgH5QRq9Jdr-E-I0DShDrV-NNTX2UsK5bUTVF9_6wHYjoJ0xgGrWKeGQ_h6Oyn849tyBm-AHB8jyreVPQkuZt3TLKE3iASHnBs6osi5px3lSMV_WSwO--gmYlr9qGrS-nZUsblgBqE52_HsfbyhnksisgbqoPuPwB8SFyDw)"
          ]
        },
        {
          "title": "Mermaid diagram parse error · Issue #4",
          "url": "https://github.com/stefanstranger/logicappdocs/issues/4",
          "excerpts": [
            "Jul 31, 2023 — Your issue is being caused by the pipe character \"|\" in the names of your Logic App Actions. Mermaid cannot handle certain characters.",
            "Your issue is being caused by the pipe character \"|\" in the names of your Logic App Actions. Mermaid cannot handle certain characters.",
            "Parse error on line 3:  \n`... subgraph For_each_|_Smart_Guest_Manage -----------------------^ Expecting 'SEMI', 'NEWLINE', 'SPACE', 'EOF', 'GRAPH', 'DIR', 'subgraph', 'SQS', 'end', 'AMP', 'ALPHA', 'COLON', 'TAGEND', 'START_LINK', 'STYLE', 'LINKSTYLE', 'CLASSDEF', 'CLASS', 'CLICK', 'DOWN', 'UP', 'DEFAULT', 'NUM', 'COMMA', 'MINUS', 'BRKT', 'DOT', 'PCT', 'TAGSTART', 'PUNCTUATION', 'UNICODE_TEXT', 'PLUS', 'EQUALS', 'MULT', 'UNDERSCORE', got 'PIPE",
            "Mermaid cannot handle certain characters. When I removed the pipe character from the Mermaid code it worked as expected.",
            "the pipe character \"|\" in the names of your Logic App Actions. Mermaid cannot handle certain characters.",
            "Jul 31, 2023 — Expecting 'SEMI', 'NEWLINE', 'SPACE', 'EOF', 'GRAPH', 'DIR ... When I removed the pipe character from the Mermaid code it worked as expected."
          ]
        },
        {
          "title": "'direction TD' in a subgraph results in a parser error #4229",
          "url": "https://github.com/mermaid-js/mermaid/issues/4229",
          "excerpts": [
            "Mar 18, 2023 — It just breaks when used inside a subgraph as direction TD. The section on direction in subgraphs doesn't make any mention of TD not being a valid subgraph ..."
          ]
        },
        {
          "title": "Recent Problem with Mermaid Plug - General - SilverBullet Community",
          "url": "https://community.silverbullet.md/t/recent-problem-with-mermaid-plug/1296",
          "excerpts": [
            "I have been using the mermaid plug successfully for some time. I updated to silverbullet 0.10.1 recently and I just noticed that the mermaid ... Nov 23, 2024 — Is it possible that the integrity check is working correctly and that, the hash for the mermaid.min.js has changed? gorootde (Michael) ..."
          ]
        },
        {
          "title": "Is there anyone with better idea for parsing Mermaid sequence ...",
          "url": "https://www.reddit.com/r/golang/comments/1lx1mtk/is_there_anyone_with_better_idea_for_parsing/",
          "excerpts": [
            "I just came across this problem of rendering Mermaid diagrams to raster or vector format in static website generator.",
            "Starting with sequence diagrams made me prepare the parser and AST package first as it's syntax is very straightforward to implement those."
          ]
        },
        {
          "title": "Mermaid.js Parsing Error: Explicit `direction TD` inside Subgraph with Global `TD` - Issue #6427",
          "url": "https://github.com/mermaid-js/mermaid/issues/6427",
          "excerpts": [
            "Mermaid.js Parsing Error: Explicit `direction TD` inside Subgraph with Global `TD`",
            "``\nError parsing Error: Parse error on line 3:\n...TD\"]    direction TD    Node1 --> Node2\n----------------------^\nExpecting 'SEMI', 'NEWLINE', 'EOF', 'AMP', 'START_LINK', 'LINK', 'LINK_ID', got 'NODE_STRING'",
            "Mar 27, 2025 — Mermaid.js throws a parsing error when explicitly specifying direction TD within a subgraph, only if the global direction is also set to TD."
          ]
        },
        {
          "title": "Fun project of the week, Mermaid flowcharts generator!",
          "url": "https://alain-airom.medium.com/fun-project-of-the-week-mermaid-flowcharts-generator-0bc74404e9e6",
          "excerpts": [
            "Checks if the 'mmdc' command-line tool is installed and accessible. Provides instructions if not found. ... print(\"Mermaid CLI (mmdc) is installed ...",
            "A program which offers flexible ways to generate Mermaid diagrams. It can either take my natural language descriptions in a chat-like interaction. print(f\"An unexpected error occurred during image generation: {e}\") return False finally: # Clean up the temporary Mermaid file if os.path ..."
          ]
        },
        {
          "title": "Headless Browsing with Puppeteer & Playwright on Pipedream",
          "url": "https://pipedream.com/blog/puppeteer-and-playwright/",
          "excerpts": [
            "Puppeeter and Playwright are fully emulate a browser, including Javascript rendering. This allows you to programmatically interact with websites as a real user."
          ]
        },
        {
          "title": "@mermaidjs-mcp/mermaidjs-mcp | MCP S... · LobeHub",
          "url": "https://lobehub.com/mcp/lihongjie0209-mermaidjs-mcp",
          "excerpts": [
            "Node-based MCP server that renders MermaidJS diagrams to PNG/JPG/Base64 using a headless browser (Chromium via Puppeteer)."
          ]
        },
        {
          "title": "Mermaid CLI (Mermaid-js/mermaid-cli)",
          "url": "https://github.com/mermaid-js/mermaid-cli",
          "excerpts": [
            "## About\n\nCommand line tool for the Mermaid library",
            "import { run } from \"@mermaid-js/mermaid-cli\"",
            "await run (",
            "\"input.mmd\" , \"output.svg\" , // {optional options},",
            ")",
            "## [Releases 76](/mermaid-js/mermaid-cli/releases)\n\n[11\\.10.1 Latest\n\nSep 14, 2025](/mermaid-js/mermaid-cli/releases/tag/11.10.1)",
            "The key differences in the podman command versus the docker command are:",
            "* The addition of the `--userns keep-id` argument.",
            "This allows the container to keep the same UID as the current user's UID in the container namespace instead of mapping to a subuid.",
            "It's possible to call `mermaid-cli` via a Node.JS API. Please be aware that **the NodeJS API is not covered by semver** , as `mermaid-cli` follows `mermaid` 's versioning. ```",
            "Usage\n-----\n\nConvert Mermaid mmd Diagram File To SVG\n\n```\nmmdc -i input.mmd -o output.svg\n```",
            "```\nnpm install -g @mermaid-js/mermaid-cli\n```",
            "mmdc -i input.mmd -o output.svg",
            "\n> \n> ",
            "> See [Alternative installations]() if you don't want to install the package globally.",
            "## Install locally",
            "## Install locally",
            "## Install locally",
            "## Install locally",
            "## Install locally",
            "Some people are [having issues](https://github.com/mermaidjs/mermaid.cli/issues/15) installing this tool globally.",
            "Some people are [having issues](https://github.com/mermaidjs/mermaid.cli/issues/15) installing this tool globally.",
            "Some people are [having issues](https://github.com/mermaidjs/mermaid.cli/issues/15) installing this tool globally.",
            "Some people are [having issues](https://github.com/mermaidjs/mermaid.cli/issues/15) installing this tool globally.",
            "Some people are [having issues](https://github.com/mermaidjs/mermaid.cli/issues/15) installing this tool globally.",
            "Some people are [having issues](https://github.com/mermaidjs/mermaid.cli/issues/15) installing this tool globally.",
            "## Use Node.JS API",
            "## Use Node.JS API",
            "## Use Node.JS API",
            "## Use Node.JS API",
            "[]()",
            "[]()",
            "[]()",
            "[]()",
            "[]()",
            "[]()",
            "[]()",
            "It's possible to call `mermaid-cli` via a Node.JS API. Please be aware that **the NodeJS API is not covered by semver** , as `mermaid-cli` follows `mermaid` 's versioning.",
            "It's possible to call `mermaid-cli` via a Node.JS API. Please be aware that **the NodeJS API is not covered by semver** , as `mermaid-cli` follows `mermaid` 's versioning.",
            "It's possible to call `mermaid-cli` via a Node.JS API. Please be aware that **the NodeJS API is not covered by semver** , as `mermaid-cli` follows `mermaid` 's versioning.",
            "This is a command-line interface (CLI) for [mermaid](https://mermaid.js.org/) . It takes a mermaid definition file as input and generates an SVG/PNG/PDF file as output.",
            "You can easily pipe input from stdin. This example shows how to use a heredoc to\nsend a diagram as stdin to mermaid-cli (mmdc). ```",
            "## See All Available Options\n",
            "```\ndocker run --rm -u \\` id -u \\` : \\` id -g \\` -v /path/to/diagrams:/data minlag/mermaid-cli -i diagram.mmd",
            "The mermaid-cli will find the mermaid diagrams, create SVG files from them and refer to those in the markdown output.",
            "Use Docker/Podman:",
            "```\ndocker pull minlag/mermaid-cli\n```",
            "or pull from Github Container Registry",
            "```\ndocker pull ghcr.io/mermaid-js/mermaid-cli/mermaid-cli\n```",
            "The container looks for input files in `/data` . So for example, if you have a\ndiagram defined on your system in `/path/to/diagrams/diagram.mmd` , you can use\nthe container to generate an SVG file as follows:",
            "diagram defined on your system in `/path/to/diagrams/diagram.mmd` , you can use\nthe container to generate an SVG file as follows:",
            "   \"input.mmd\" , \"output.svg\" , // {optional options},",
            "```\n",
            "```\nmmdc -i input.mmd -o output.svg\n```",
            "```\nmmdc -i input.mmd -o output.svg\n```",
            "### Transform a markdown file with mermaid diagrams",
            "```\nmmdc -i readme.template.md -o readme.md\n```",
            "```\ncat << EOF  | mmdc --input -\n    graph TD\n    A[Client] --> B[Load Balancer]\nEOF\n```\n",
            "## For contributors",
            "Contributions are welcome. See the [contribution guide](/mermaid-js/mermaid-cli/blob/master/CONTRIBUTING.md) .",
            "## Known issues",
            "```\nnpm install @mermaid-js/mermaid-cli\n./node_modules/.bin/mmdc -h\n```",
            "```\nmmdc -h\n```"
          ]
        },
        {
          "title": "Mermaid CLI and APIs Documentation",
          "url": "https://www.npmjs.com/package/@mermaid-js/mermaid-cli/v/8.11.4",
          "excerpts": [
            "Run with npx",
            "See All Available Options",
            "Use Docker:",
            "Install locally",
            "Install globally",
            "Install with [brew](https://brew.sh)",
            "### Run with npx",
            "This is a command-line interface (CLI) for [mermaid](https://mermaid-js.github.io/) . It takes a mermaid definition file as input and generates an svg/png/pdf file as output.",
            "```\nmmdc -i input.mmd -o output.svg\n`",
            "Create A PNG With A Dark Theme And Transparent Background",
            "```\nmmdc -i input.mmd -o output.png -t dark -b transparent\n`",
            "You can easily pipe input from stdin. This example shows how to use a heredoc to\nsend a diagram as stdin to mermaid-cli (mmdc).",
            "```\nmmdc -h\n```",
            "` or `npm install -g @mermaid-js/mermaid-cli`",
            "Or use NPM:\n\n```\nnpm install @mermaid-js/mermaid-cli\n./node_modules/.bin/mmdc -h\n```",
            "```\nyarn add @mermaid-js/mermaid-cli\n./node_modules/.bin/mmdc -h\n```",
            "Install with [brew](https://brew.sh)\n\n```\nbrew install mermaid-cli\n```",
            "Run with npx\n\n[`npx`](https://www.npmjs.com/package/npx) is installed by default with NPM. It\ndownloads and runs commands at the same time. To use Mermaid CLI with npx, you\nneed to use the `-p` flag because the package name is different than the command\nit installs ( `mmdc` ). `npx -p @mermaid-js/mermaid-cli mmdc -h`",
            "Known issues",
            "1. [Linux sandbox issue](https://github.com/mermaid-js/mermaid-cli/blob/HEAD/docs/linux-sandbox-issue.md)"
          ]
        },
        {
          "title": "rtuin/mcp-mermaid-validator: A Model Context Protocol server that ...",
          "url": "https://github.com/rtuin/mcp-mermaid-validator",
          "excerpts": [
            "Registers a validateMermaid tool that accepts Mermaid diagram syntax; Uses the Mermaid CLI to validate and render diagrams; Returns validation results and ..."
          ]
        },
        {
          "title": "@mermaid-js/mermaid-cli - npm",
          "url": "https://www.npmjs.com/package/@mermaid-js/mermaid-cli/v/8.11.0",
          "excerpts": [
            "This is a command-line interface (CLI) for mermaid. It takes a mermaid definition file as input and generates an svg/png/pdf file as output."
          ]
        },
        {
          "title": "Inconsistent text rendering in headless mode · Issue #2410",
          "url": "https://github.com/puppeteer/puppeteer/issues/2410",
          "excerpts": [
            "Apr 18, 2018 — Font spacing seems to be inconsistent between headless and non headless mode. This is likely a Chromium bug for Puppeteer versions 1.2.0 and above."
          ]
        },
        {
          "title": "Show HN: GUI for editing Mermaid class diagrams",
          "url": "https://news.ycombinator.com/item?id=42738656",
          "excerpts": [
            "And if you do want to do headless renders of Mermaid diagrams, I'd recommend using (or adapting, since the code is all MIT licensed and I'm not aware of one ...",
            "I also realized ChatGPT is pretty good at generating Mermaid diagrams (didn't try your own AI features). However after getting into it some I ran into some ..."
          ]
        },
        {
          "title": "Mermaid Validator: Validate & Render Diagrams for LLMs",
          "url": "https://mcpmarket.com/server/mermaid-validator-1",
          "excerpts": [
            "It acts as a lightweight wrapper around the official `mermaid-cli` tool, abstracting away complex file handling and command-line operations. This server ..."
          ]
        },
        {
          "title": "First steps with Mermaid, a diagramming and charting tool",
          "url": "https://rs1.es/tutorials/2022/12/18/mermaid.html",
          "excerpts": [
            "Mermaid is a Javascript-based tool that renders Markdown-inspired text definitions to create diagrams. In this tutorial you'll learn how to start and render ..."
          ]
        },
        {
          "title": "Parse method does not return a boolean · Issue #1066",
          "url": "https://github.com/mermaid-js/mermaid/issues/1066",
          "excerpts": [
            "Nov 13, 2019 — The mermaid.parse() method is supposed to return a boolean when passed a string of mermaid markdown, but it is instead returning undefined for ..."
          ]
        },
        {
          "title": "Break type of mermaid.render in v10 · Issue #3577 - GitHub",
          "url": "https://github.com/mermaid-js/mermaid/issues/3577",
          "excerpts": [
            "Based on the documentation and method signature, it was not clear to me that render can't be run concurrently. The fact that render returns ..."
          ]
        },
        {
          "title": "MCP server to efficiently check all Mermaid diagram types ...",
          "url": "https://github.com/vtomilin/mermaider",
          "excerpts": [
            "mermaid-mcp-server: A Model Context Protocol (MCP) server providing tools for validating and rendering Mermaid diagrams. ... © 2025 GitHub, Inc. Footer ..."
          ]
        },
        {
          "title": "Mermaid MCP Server",
          "url": "https://lobehub.com/mcp/peng-shawn-mermaid-mcp-server",
          "excerpts": [
            "Sep 8, 2025 — The server uses Puppeteer to launch a headless browser, render the Mermaid diagram to SVG, and optionally capture a screenshot of the rendered ..."
          ]
        },
        {
          "title": "mermaid CLI",
          "url": "https://mermaid.js.org/config/mermaidCLI.html",
          "excerpts": [
            "mermaid CLI has been moved to mermaid-cli. Please read its documentation instead. Edit this page on GitHub. Pager. Previous page ...",
            "Mermaid API Configuration · Mermaid Configuration Options · Registering icons · Directives · Theming · Math · Accessibility · Mermaid CLI · FAQ · Layouts.",
            "## 📊📊 Diagram Syntax",
            "[Flowchart](/syntax/flowchart.html)",
            "[Sequence Diagram](/syntax/sequenceDiagram.html)",
            "[Class Diagram](/syntax/classDiagram.html)",
            "[State Diagram](/syntax/stateDiagram.html)",
            "[Entity Relationship Diagram](/syntax/entityRelationshipDiagram.html)",
            "[User Journey](/syntax/userJourney.html)",
            "[Gantt](/syntax/gantt.html)",
            "[Pie Chart](/syntax/pie.html)",
            "[Quadrant Chart](/syntax/quadrantChart.html)",
            "[Requirement Diagram](/syntax/requirementDiagram.html)",
            "[GitGraph (Git) Diagram](/syntax/gitgraph.html)",
            "[Mindmaps](/syntax/mindmap.html)",
            "[Timeline](/syntax/timeline.html)",
            "[ZenUML](/syntax/zenuml.html)",
            "[Sankey 🔥🔥](/syntax/sankey.html)",
            "[XY Chart\n🔥🔥](/syntax/xyChart.html)",
            "[Block Diagram 🔥🔥](/syntax/block.html)",
            "[Packet 🔥🔥](/syntax/packet.html)",
            "[Kanban 🔥🔥](/syntax/kanban.html)",
            "[Architecture 🔥🔥](/syntax/architecture.html)",
            "[Radar 🔥🔥](/syntax/radar.html)",
            "[Treemap 🔥🔥](/syntax/treemap.html)",
            "[Other Examples](/syntax/examples.html)",
            "[Mermaid Chart](/ecosystem/mermaid-chart.html)",
            "[Tutorials](/ecosystem/tutorials.html)",
            "[Integrations - Community](/ecosystem/integrations-community.html)",
            "[Integrations - Create](/ecosystem/integrations-create.html)",
            "## ⚙️ Deployment and Configuration",
            "[Configuration](/config/configuration.html)",
            "[API-Usage](/config/usage.html)",
            "[Mermaid API Configuration](/config/setup/README.html)",
            "[Mermaid Configuration Options](/config/schema-docs/config.html)",
            "[Registering icons](/config/icons.html)",
            "[Directives](/config/directives.html)",
            "[Theming](/config/theming.html)",
            "[Math](/config/math.html)",
            "[Accessibility](/config/accessibility.html)",
            "[Mermaid CLI](/config/mermaidCLI.html)",
            "[FAQ](/config/faq.html)",
            "[Layouts](/config/layouts.html)",
            "[Getting Started](/community/intro.html)",
            "[Contributing to Mermaid](/community/contributing.html)",
            "[Adding Diagrams](/community/new-diagram.html)",
            "[Questions and Suggestions](/community/questions-and-suggestions.html)",
            "[Security](/community/security.html)",
            "[Announcements](/news/announcements.html)",
            "[Blog](/news/blog.html)",
            "On this page",
            "ge\n\n[Customize your layout and design in Mermaid Chart’s visual editor!"
          ]
        },
        {
          "title": "Mermaid Syntax Reference (Class Diagram Page)",
          "url": "https://mermaid.js.org/syntax/classDiagram.html",
          "excerpts": [
            "[Flowchart](/syntax/flowchart.html)",
            "[Sequence Diagram](/syntax/sequenceDiagram.html)",
            "[Class Diagram](/syntax/classDiagram.html)",
            "[State Diagram](/syntax/stateDiagram.html)",
            "[Entity Relationship Diagram](/syntax/entityRelationshipDiagram.html)",
            "[User Journey](/syntax/userJourney.html)",
            "[Gantt](/syntax/gantt.html)",
            "[Pie Chart](/syntax/pie.html)",
            "[Quadrant Chart](/syntax/quadrantChart.html)",
            "[Requirement Diagram](/syntax/requirementDiagram.html)",
            "[GitGraph (Git) Diagram](/syntax/gitgraph.html)",
            "[Mindmaps](/syntax/mindmap.html)",
            "[Timeline](/syntax/timeline.html)",
            "[ZenUML](/syntax/zenuml.html)",
            "[Sankey 🔥🔥](/syntax/sankey.html)"
          ]
        },
        {
          "title": "Configuration - Mermaid Documentation",
          "url": "https://mermaid.js.org/config/configuration.html",
          "excerpts": [
            "[Flowchart](/syntax/flowchart.html)",
            "[Sequence Diagram](/syntax/sequenceDiagram.html)",
            "[Class Diagram](/syntax/classDiagram.html)",
            "[State Diagram](/syntax/stateDiagram.html)",
            "[Entity Relationship Diagram](/syntax/entityRelationshipDiagram.html)",
            "[User Journey](/syntax/userJourney.html)",
            "[Gantt](/syntax/gantt.html)",
            "[Pie Chart](/syntax/pie.html)",
            "[Quadrant Chart](/syntax/quadrantChart.html)",
            "[Requirement Diagram](/syntax/requirementDiagram.html)",
            "[GitGraph (Git) Diagram](/syntax/gitgraph.html)",
            "[Mindmaps](/syntax/mindmap.html)",
            "[Timeline](/syntax/timeline.html)",
            "[ZenUML](/syntax/zenuml.html)",
            "[Sankey 🔥🔥](/syntax/sankey.html)",
            "[XY Chart\n🔥🔥](/syntax/xyChart.html)",
            "[Block Diagram 🔥🔥](/syntax/block.html)",
            "[Packet 🔥🔥](/syntax/packet.html)",
            "[Kanban 🔥🔥](/syntax/kanban.html)",
            "[Architecture 🔥🔥](/syntax/architecture.html)",
            "[Radar 🔥🔥](/syntax/radar.html)",
            "[Treemap 🔥🔥](/syntax/treemap.html)"
          ]
        },
        {
          "title": "Blog",
          "url": "https://mermaid.js.org/news/blog.html",
          "excerpts": [
            "The Mermaid Chart VS Code Plugin is a powerful developer diagramming tool that brings Mermaid.js diagramming directly into your Visual Studio Code environment. In 2025, AI tools make creating flowcharts faster and easier than ever. With Mermaid's AI flowchart generator, you can turn plain text into clear, accurate ..."
          ]
        },
        {
          "title": "Mermaid API Usage",
          "url": "https://docs.mermaidchart.com/mermaid-oss/config/usage.html",
          "excerpts": [
            "Instead the preferred way is to use the initialize method. This functionality is only kept for backwards compatibility. * * *\n\n© Mermaid Chart 2025",
            "Mermaid is a JavaScript tool that makes use of a Markdown based syntax to render customizable diagrams, charts and visualizations.",
            "Mermaid is a JavaScript tool that makes use of a Markdown based syntax to render customizable diagrams, charts and visualizations. Calling mermaid.init – Deprecated ​. WARNING. mermaid.init is deprecated in v10 and will be removed in a future release. Please use mermaid."
          ]
        },
        {
          "title": "Usage - Mermaid",
          "url": "https://mermaid.js.org/config/usage.html",
          "excerpts": [
            "Mermaid is a JavaScript tool that makes use of a Markdown based syntax to render customizable diagrams, charts and visualizations."
          ]
        },
        {
          "title": "Mermaid CLI Documentation / Mermaid Chart Docs",
          "url": "https://docs.mermaidchart.com/mermaid-oss/config/mermaidCLI.html",
          "excerpts": [
            "mermaid CLI has been moved to [mermaid-cli](https://github.com/mermaid-js/mermaid-cli). Please read its documentation instead.",
            "11 April 2025 • 1 min"
          ]
        },
        {
          "title": "mermaidjs/mermaid.cli: Development has been moved to ... - GitHub",
          "url": "https://github.com/mermaidjs/mermaid.cli",
          "excerpts": [
            "Command-line interface for mermaid. This CLI tool takes a mermaid definition file as input and generates svg/png/pdf file as output."
          ]
        },
        {
          "title": "mermaidcdp",
          "url": "https://abhinav.github.io/goldmark-mermaid/mermaidcdp/",
          "excerpts": [
            "Package mermaidcdp implements a server-side compiler for Mermaid diagrams that uses a headless Chromium-based browser to render the diagrams."
          ]
        },
        {
          "title": "goldmark/mermaid",
          "url": "https://pkg.go.dev/go.abhg.dev/goldmark/mermaid",
          "excerpts": [
            "Package mermaidcdp implements a server-side compiler for Mermaid diagrams that uses a headless Chromium-based browser to render the diagrams."
          ]
        },
        {
          "title": "Making a single-file mermaid-cli.exe for Windows #467",
          "url": "https://github.com/mermaid-js/mermaid-cli/issues/467",
          "excerpts": [
            "Jan 18, 2023 — Install mermaid-cli using 'npm install -g @mermaid-js/mermaid-cli' · Locate where npm has installed mmdc. · Set mermaid_cmd in conf.py to point to ..."
          ]
        },
        {
          "title": "Deprecate mermaid.cli or @mermaid-js/mermaid-cli? #433",
          "url": "https://github.com/mermaid-js/mermaid-cli/issues/433",
          "excerpts": [
            "Nov 23, 2022 — I think it's mainly for permissions. Most projects are instead moving to @org/package because that way it's much easier to manage project permissions."
          ]
        },
        {
          "title": "Adding diagrams to your Astro site with MermaidJS and Playwright",
          "url": "https://agramont.net/blog/diagraming-with-mermaidjs-astro/",
          "excerpts": [
            "In this post, we'll look at how you can use MermaidJS with Playwright to create diagrams in your Astro site."
          ]
        },
        {
          "title": "How to install Mermaid to render flowcharts in markdown?",
          "url": "https://stackoverflow.com/questions/50762662/how-to-install-mermaid-to-render-flowcharts-in-markdown",
          "excerpts": [
            "Mermaid is a JavaScript based diagramming and charting tool that takes Markdown-inspired text definitions and creates diagrams dynamically in the browser."
          ]
        },
        {
          "title": "Mermaid Issue 4156 Discussion",
          "url": "https://github.com/mermaid-js/mermaid/issues/4156",
          "excerpts": [
            "I saw on the source code that there's a method named `detectType` that returns the diagram type of an MD string.",
            "Was wondering, as it's not exposed, which ways I have to figure if something is a Mermaid diagram and which diagram it is."
          ]
        },
        {
          "title": "How to manage node id names in flowchart? · Issue #2650 - GitHub",
          "url": "https://github.com/mermaid-js/mermaid/issues/2650",
          "excerpts": [
            "If I need to have complex diagram (each node has many relations) or node name is multiple words I use the first letters as node ids. C[cow] D[ ..."
          ]
        },
        {
          "title": "Node names with special characters that break syntax #2388 - GitHub",
          "url": "https://github.com/mermaid-js/mermaid/issues/2388",
          "excerpts": [
            "I tried to generate a graph for my project, but the node ID that came from the project path made something wrong. The mermaid text that I was ..."
          ]
        },
        {
          "title": "Multiline title in flowchart subgraphs is overlapped by nodes #3806",
          "url": "https://github.com/mermaid-js/mermaid/issues/3806",
          "excerpts": [
            "Multiline titles in flowchart subgraphs (e.g., subgraph C[\"multiline text\"] ) are overlapped by nodes. Steps to reproduce. Check this example:."
          ]
        },
        {
          "title": "Mermaid Style Failure - draw.io",
          "url": "https://stackoverflow.com/questions/78541452/mermaid-style-failure",
          "excerpts": [
            "The error occurs because class diagrams in Mermaid do not support `classDef` style commands. Only specific styling methods are supported.",
            "I am using mermaid to generate a basic UML class diagram with style and import it to draw.io. And I am trying to apply class definition styles to my classes ...",
            "I am using mermaid to generate a basic UML class diagram with style and import it to draw.io. And I am trying to apply class definition styles to my classes ... The error occurs because class diagrams in Mermaid do not support `classDef` style commands. Only specific styling methods are supported."
          ]
        },
        {
          "title": "[PDF] Large Language Model Assisted Software Engineering",
          "url": "https://web.eecs.umich.edu/~movaghar/LLM-Assisted-SE-2023-Review.pdf",
          "excerpts": [
            "by TH Ingolstadt · Cited by 131 — LLMs can be employed to conduct automatic code quality assessments, identifying potential problems, suggesting improvements, and providing recommendations based ..."
          ]
        },
        {
          "title": "Entity Relationship Diagram - Mermaid Chart",
          "url": "https://docs.mermaidchart.com/mermaid-oss/syntax/entityRelationshipDiagram.html",
          "excerpts": [
            "Mermaid syntax for ER diagrams is compatible with PlantUML, with an extension to label the relationship. Each statement consists of the following parts.",
            "For larger or more-complex diagrams, you can alternatively apply the ELK (Eclipse Layout Kernel) layout using your YAML frontmatter’s `config` .",
            "yaml\n```\n---\nconfig :\n  layout : elk\n---\n```",
            "Note that the site needs to use mermaid version 9.4+ for this to work and have this featured enabled in the lazy-loading configuration.",
            "Apr 11, 2025 — Relationships between entities are represented by lines with end markers representing cardinality. Mermaid uses the most popular crow's foot ..."
          ]
        },
        {
          "title": "Converting Blog Diagrams to Mermaid for AI Readability",
          "url": "https://subaud.io/blog/converting-blog-diagrams-to-mermaid/",
          "excerpts": [
            "Jun 23, 2025 — How we converted 24 architectural diagrams from images to Mermaid format using Claude and built a streamlined conversion tool."
          ]
        },
        {
          "title": "Code Less, Align More: Efficient LLM Fine-tuning for ...",
          "url": "https://arxiv.org/html/2407.05040v1",
          "excerpts": [
            "Jul 6, 2024 — In this paper we explore data pruning methods aimed at enhancing the efficiency of model training specifically for code LLMs."
          ]
        },
        {
          "title": "Requirement Diagram",
          "url": "https://mermaid.js.org/syntax/requirementDiagram.html",
          "excerpts": [
            "Syntax ​. There are three types of components to a requirement diagram: requirement, element, and relationship. The grammar for defining each is defined ...",
            "The diagram can be rendered in different directions using the direction statement. Valid values are: TB - Top to Bottom (default); BT - Bottom to Top; LR - Left ..."
          ]
        },
        {
          "title": "sequenceDigram - Error parsing Mermaid diagram - Obsidian Forum",
          "url": "https://forum.obsidian.md/t/sequencedigram-error-parsing-mermaid-diagram/73854",
          "excerpts": [
            "When I rewrite by hand, the diagram appears correctly. There's probably a special character inadvertently inserted in the copy and paste.",
            "\n```auto\nError parsing Mermaid diagram!\nParse error on line 9:\n...See you later!\\`\\`\\`\n--------------------^\nExpecting 'SOLID_OPEN_ARROW', 'DOTTED_OPEN_ARROW', 'SOLID_ARROW', 'DOTTED_ARROW', 'SOLID_CROSS', 'DOTTED_CROSS', 'SOLID_POINT', 'DOTTED_POINT', got 'NEWLINE'",
            "When I rewrite by hand, the diagram appears correctly. There’s probably a special character inadvertently inserted in the copy and paste.",
            "Dec 29, 2023 — Custom theme and snippets: for cosmetic issues, please first try updating your theme and disabling your snippets. If still not fixed, please try ..."
          ]
        },
        {
          "title": "Mermaid diagram line break",
          "url": "https://stackoverflow.com/questions/51366763/mermaid-diagram-line-break",
          "excerpts": [
            "It appears you can use [`<br>`](https://mermaid.js.org/syntax/examples.html) instead:",
            "mermaid(\"",
            "graph TB",
            "        A[GE Solution]-->C{ }",
            "        B[GA Solution]-->C{ } ",
            "        C{ }-->D[Stir 10 mins at 500 r/min]",
            "        D[Stir 10 mins at 500 r/min]-->E[Homogenisation at 10000 r/min]",
            "        E[Homogenisation at 10000 r/min]-->F(Stir 10 min 450 r/min <br> Complex  coacervation)",
            "        \")",
            "I am using Mermaid via Markdown Viewer (a Chrome Extension), neither work to produce line break. But it works when I push it to GitHub."
          ]
        },
        {
          "title": "Mermaid JS syntax in Azure broken?",
          "url": "https://stackoverflow.com/questions/62283192/mermaid-js-syntax-in-azure-broken",
          "excerpts": [
            "I've googled this error, and here it is suggested that the problem is due to an old version of Mermaid. Does anyone know workarounds or old documentation?"
          ]
        },
        {
          "title": "Mermaid ER diagram styling - markdown",
          "url": "https://stackoverflow.com/questions/76866180/mermaid-er-diagram-styling",
          "excerpts": [
            "I want to draw an ER diagram with Mermaid. But I can't find out how to style the box to make it with different colors."
          ]
        },
        {
          "title": "The Secret to Productivity with AI: Why Mermaid Is Key for ...",
          "url": "https://alejandroestrellagabilondo.medium.com/the-secret-to-productivity-with-ai-why-mermaid-is-key-for-diagrams-and-flows-f9e74c69ed78",
          "excerpts": [
            "Mermaid is a simple markup language that lets you build diagrams (flows, sequences, classes, etc.) using only text."
          ]
        },
        {
          "title": "ui.mermaid - NiceGUI",
          "url": "https://nicegui.io/documentation/mermaid",
          "excerpts": [
            "You can register to click events by adding a click directive to a node and emitting a custom event. Make sure to set the securityLevel to loose in the ... You can register to click events by adding a click directive to a node and emitting a custom event. Make sure to set the securityLevel to loose in the config ..."
          ]
        },
        {
          "title": "Mermaid click directive works in flowcharts but not graphs",
          "url": "https://forum.obsidian.md/t/mermaid-click-directive-works-in-flowcharts-but-not-graphs/19799",
          "excerpts": [
            "Clicking the “E” node will go to “testfile” in the given vault. Actual result. Nothing happens. Environment. Operating system: Windows/Mac/ ..."
          ]
        },
        {
          "title": "Using `click` with MermaidJS in markdown causes \"This content is ...",
          "url": "https://github.com/orgs/community/discussions/46096",
          "excerpts": [
            "The only workaround is to use an anchor tag within the node label to make it clickable. Unfortunately, it doesn't seem that there's a way to ... Feb 1, 2023 — A \"content security policy\" that prevents opening links to GitHub itself? It's clearly a bug in GitHub's adoption of Mermaid and should be fixed ...",
            "Feb 1, 2023 — The only workaround is to use an anchor tag within the node label to make it clickable. Unfortunately, it doesn't seem that there's a way to ...",
            "Using `click` with MermaidJS in markdown causes \"This content is blocked. Contact the site owner to fix the issue\""
          ]
        },
        {
          "title": "StackOverflow discussion: Click callback in Mermaid not working in tutorial",
          "url": "https://stackoverflow.com/questions/78141342/click-callback-in-mermaid-not-working-in-tutorial",
          "excerpts": [
            "I have started using mermaid for diagram generation. In the docs for Flowchart there is an example where interaction is added using a callback function.",
            "        click B \"https://www.github.com\" \"This is a link\"",
            "        click C call callback() \"Tooltip\"",
            "        click D href \"https://www.github.com\" \"This is a link\"",
            "      securityLevel: 'loose',"
          ]
        },
        {
          "title": "Mermaid Interactivity Examples on StackOverflow",
          "url": "https://stackoverflow.com/questions/41960529/how-to-add-a-link-in-a-mermaid-node-description",
          "excerpts": [
            "The question here was about just embedding a link within the text of a node. For making the entire node a link I suppose this should usually work see here. To add a link in a Mermaid node description, use single quotes in the href attribute, and for versions 8.2.0+, enable unsecure content with ` ...",
            "`\nclick A callback \"Hi I'm a callback, whats up\"",
            "FlowChart",
            ">\n<div class=\"mermaid\">",
            ">\n<div class=\"mermaid\">",
            "2\n  click Stackoverflow \"https://stackoverflow.com/\" \"some desc when mouse hover\" _blank",
            "k\n  click myLabel2 \"https://stackoverflow.com/\" \"some desc when mouse hover\"",
            " mermaid.initialize({\n    securityLevel: 'loose', // strict, loose, antiscript, sandbox // // https://github.com/mermaid-js/mermaid/blob/b141f24068e9c5f6979706383a29db6380ffdf31/docs/usage.md?plain=1\n",
            "The question here was about just embedding a link within the text of a node. For making the entire node a link I suppose this should usually work see here.",
            "To add a link in a Mermaid node description, use single quotes in the href attribute, and for versions 8.2.0+, enable unsecure content with ` ...",
            "initialize({ securityLevel: 'loose', // strict, loose, antiscript ... I've come up with the perfect solution. You need to add this JS code after ..."
          ]
        },
        {
          "title": "[FEAT] mermaid.initialize➝securityLevel: 'loose', #734",
          "url": "https://codeberg.org/forgejo/forgejo/issues/734",
          "excerpts": [
            "mermaid.js: - securityLevel: 'strict', + securityLevel: 'loose', - iframe.sandbox = 'allow-scripts'; + iframe.sandbox = 'allow-popups allow-popups-to-escape ..."
          ]
        },
        {
          "title": "Using Callback Functions in Mermaid - Obsidian Forum",
          "url": "https://forum.obsidian.md/t/using-callback-functions-in-mermaid/37307",
          "excerpts": [
            "I noticed that in base mermaid you can call js callback functions on a node click, and thought I might be able to use that to call a function to add in a ..."
          ]
        },
        {
          "title": "Support links with interactive text (tooltips, hyperlinks) #1297 - GitHub",
          "url": "https://github.com/mermaid-js/mermaid/issues/1297",
          "excerpts": [
            "I would like the text of the links between the nodes to have tooltips and/or hyperlinks (external or to an existing header on the wiki)."
          ]
        },
        {
          "title": "Issues with Tooltip · Issue #3308 · mermaid-js/mermaid - GitHub",
          "url": "https://github.com/mermaid-js/mermaid/issues/3308",
          "excerpts": [
            "A more thorough investigation show that the ability to add tags in tooltips were removed to avoid a few vulnerabilities. BR tags should have an ..."
          ]
        },
        {
          "title": "Configure security level on mermaid to enable anchor links #3812",
          "url": "https://github.com/squidfunk/mkdocs-material/discussions/3812",
          "excerpts": [
            "Hi! I'm using mermaid with mkdocs and trying to successfully anchor link from cells. Right now, anchor links go to about:blank . Apr 11, 2022 — Hi! I'm using mermaid with mkdocs and trying to successfully anchor link from cells. Right now, anchor links go to about:blank ."
          ]
        },
        {
          "title": "Mermaid diagrams & Javascript handlers - Features",
          "url": "https://discourse.joplinapp.org/t/mermaid-diagrams-javascript-handlers/6796",
          "excerpts": [
            "Mar 10, 2020 — I was going through the features Mermaid offers, and I noticed the interaction section where they discuss adding Javascript callbacks to nodes in the diagrams."
          ]
        },
        {
          "title": "How to use tooltips in mermaid nodes? #1054 - GitHub",
          "url": "https://github.com/quarto-dev/quarto-cli/discussions/1054",
          "excerpts": [
            "In order for this feature to work, you need to have %%| mermaid-format: js enabled in the diagrams you want to have tooltips. I've tested HTML ... Jun 3, 2022 — The new version does make tooltips \"work\" without the need to tamper with securityLevel , but unfortunately as I saw reported elsewhere (perhaps ...",
            "I think this is an upstream bug, at least for me. Tooltips appear to be non-functional even on mermaid's webpage."
          ]
        },
        {
          "title": "Clickable links in State Diagram should use the class ...",
          "url": "https://github.com/mermaid-js/mermaid/issues/6701",
          "excerpts": [
            "Jun 28, 2025 — The Flowchart and Class Diagram are displaying tooltips using the mermaidTooltip class. I would expect the State Diagram to also use the ..."
          ]
        },
        {
          "title": "Frequently Asked Questions - Mermaid",
          "url": "https://mermaid.js.org/config/faq.html",
          "excerpts": [
            "How to fix tooltip misplacement issue? How to specify gantt diagram xAxis format? How to bind an event? How to add newline in the text? How to have special ..."
          ]
        },
        {
          "title": "Security",
          "url": "https://docs.mermaidchart.com/mermaid-oss/community/security.html",
          "excerpts": [
            "Apr 11, 2025 — The Mermaid team takes the security of Mermaid and the applications that use Mermaid seriously. This page describes how to report any ..."
          ]
        },
        {
          "title": "Mermaid Tooltips are not working · Issue #4686",
          "url": "https://github.com/squidfunk/mkdocs-material/issues/4686",
          "excerpts": [
            "Nov 28, 2022 — The tooltip is now shown when you put the cursor over the node with tooltip. I think it is because it uses this code for render."
          ]
        },
        {
          "title": "SecurityLevel class - Mermaid (Dart API)",
          "url": "https://pub.dev/documentation/mermaid/latest/mermaid/SecurityLevel-class.html",
          "excerpts": [
            "html tags in text are allowed, (only script element is removed), click functionality is enabled"
          ]
        }
      ],
      "reasoning": "The finegrained_field_path points to a nested area focused on error handling and self-repair. The most relevant excerpts are those that (a) describe how Mermaid surfaces and exposes parse errors via parseError or setParseErrorHandler, along with the error payload structure (err and hash with text, token, line, expected), (b) explain the behavior of parseOptions (especially parseOptions.suppressErrors) and what mermaid.parse returns or throws on failure, and (c) illustrate iterative repair workflows that use the error details to guide a minimal, structured repair prompt to an LLM (self-repair loop). The strongest support is found in passages that explicitly describe: the parseError hook and its error object (err and hash) and how the hash.reported fields (text, token, line, expected) provide a concrete menu for repair; the alternative error handling via mermaid.setParseErrorHandler; the behavior of mermaid.parse with parseOptions and its return value when errors occur; and multi-step repair pipelines where an LLM is fed the error feedback and is instructed to perform minimal changes to repair the code, then re-validate. The following quotes capture the essential mechanics: (describing how the error handler captures err.str and the hash with the expected tokens to guide fixes), (explaining that parseError is assignable and that parse() returns an error payload or false depending on parseOptions), and (outlining iterative repair prompts that include original code, error feedback, and a demand for smallest possible change). The excerpts collectively map to the defined finegrained field value by providing the exact mechanism (error capture, structured error data, minimal-change repair prompts) needed for a robust self-repair loop in Mermaid-generated diagrams.",
      "confidence": "high"
    },
    {
      "field": "master_prompt_blueprint.error_repair_loop_instructions",
      "citations": [
        {
          "title": "Improving LLM Output Reliability with Structured Data Generation",
          "url": "https://www.matt-adams.co.uk/2025/02/12/structured-data-generation.html",
          "excerpts": [
            "Better Error Handling: JSON parsing provides clear error messages and makes it easier to implement fallback mechanisms; Maintainability ... ... Mermaid diagram syntax or Gherkin test cases often leads to errors and inconsistencies. This post explores a pattern I've successfully used ...",
            "* Produce invalid Mermaid syntax"
          ]
        }
      ],
      "reasoning": "The most relevant excerpt explicitly discusses error handling tied to JSON parsing, highlighting that parsing errors yield clear messages and enable fallback mechanisms, which aligns directly with a disciplined repair loop that identifies the exact line and token causing the error and applies the smallest necessary change. This supports the idea of a minimal-change repair process and a reliable self-check before final output. The second excerpt points to a practical manifestation of the problem space: producing invalid Mermaid syntax, which is exactly the type of parsing/formatting error that would trigger the proposed repair loop. Together, these excerpts corroborate the need for a defined, minimal-edit strategy to fix errors surfaced by parsers and then revalidate the output, matching the finegrained field value requirements.",
      "confidence": "high"
    },
    {
      "field": "master_prompt_blueprint.role_specification",
      "citations": [
        {
          "title": "OpenAI Prompt Engineering Guide",
          "url": "https://platform.openai.com/docs/guides/prompt-engineering",
          "excerpts": [
            "Prompt engineering** is the process of writing effective instructions for a model, such that it consistently generates content that meets your requirement",
            "Identity:** Describe the purpose, communication style, and high-level goals of the assistant. * **Instructions:** Provide guidance to the model on how to generate the response you want. What rules should it follow? What should the model do, and what should the model never do? This section could contain many subsections as relevant for your use case, like how the model should [call custom f",
            "Explicit role and workflow guidance** Frame the model as a software engineering agent with well-defined responsibilitie",
            " Provide clear instructions for using tools like `functions.run` for code tasks, and specify when not to use certain modes—for example, avoid interactive execution unless necessary."
          ]
        },
        {
          "title": "The Ultimate Guide to Prompt Engineering in 2025",
          "url": "https://www.lakera.ai/blog/prompt-engineering-guide",
          "excerpts": [
            "Ambiguity is one of the most common causes of poor LLM output. Instead of issuing vague instructions, use precise, structured, and goal-oriented phrasing."
          ]
        },
        {
          "title": "Mermaid Diagrams - Platen",
          "url": "https://platen.io/modules/platen/markup/mermaid/",
          "excerpts": [
            "Initialize Directive #. Immediately before the diagram syntax, you can specify an initialize directive for Mermaid. This overrides the site's ..."
          ]
        }
      ],
      "reasoning": "The field value centers on explicitly assigning a specialized role to the model (e.g., 'You are an Expert Mermaid Syntax Engineer') and establishing a clear persona and workflow before tasking the model. Foundational guidance on prompt engineering frames this approach as essential: the process involves writing effective instructions so the model consistently generates required content. This directly supports the idea of starting with a precise role to steer output. Further, guidance on identity and role framing emphasizes describing the assistant’s purpose, communication style, and high-level goals, which aligns with placing a specific expert persona at the outset. Additional material on explicit role and workflow guidance reinforces the concept of treating the model as a software engineering agent with well-defined responsibilities, which is exactly the mechanism by which a strong persona would be enforced in practice. Explicit instructions about using tools (e.g., functions.run) illustrate how to codify the persona and workflow into actionable steps, ensuring the model adheres to the defined role during task execution. The broader caution about ambiguity in prompts underlines the necessity of precise, structured prompts to avoid misinterpretation and to strengthen persona adherence. Finally, Mermaid-specific guidance about initialize directives for Mermaid diagrams shows how domain-specific prompts (including syntax-focused constraints) can be integrated into the prompt framework, reinforcing that a defined expert role should also govern diagram syntax fidelity. Taken together, these excerpts collectively support the notion of pre-defining a specialized role and structured prompt approach to ensure syntactical correctness and Mermaid-compliance, consistent with the requested field value.",
      "confidence": "high"
    },
    {
      "field": "environment_compatibility_guide.sizing_and_aspect_ratio_handling",
      "citations": [
        {
          "title": "Let the user decide the size and alignment of mermaid diagrams",
          "url": "https://forum.obsidian.md/t/let-the-user-decide-the-size-and-alignment-of-mermaid-diagrams/7019/11",
          "excerpts": [
            "The example below sets the width of the mermaid diagrams as 400px while preserving the aspect ratio: svg[id^=\"m\"][width][height][viewBox] { ..."
          ]
        },
        {
          "title": "CSS aspect-ratio property",
          "url": "https://www.w3schools.com/cssref/css_pr_aspect-ratio.php",
          "excerpts": [
            "The aspect-ratio property allows you to define the ratio between width and height of an element. If aspect-ratio and width properties are set, the height will ..."
          ]
        },
        {
          "title": "SVGSVGElement: preserveAspectRatio property",
          "url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGSVGElement/preserveAspectRatio",
          "excerpts": [
            "The **`preserveAspectRatio`** read-only property of the [`SVGSVGElement`](/en-US/docs/Web/API/SVGSVGElement) interface reflects the [`preserveAspectRatio`](/en-US/docs/Web/SVG/Reference/Attribute/preserveAspectRatio) attribute of the given element. It defines how the SVG element's content should be scaled to fit the given space, preserving its aspect ratio."
          ]
        },
        {
          "title": "How to Scale SVG",
          "url": "https://css-tricks.com/scale-svg/",
          "excerpts": [
            "Sep 30, 2022 — Any height or width you set for the SVG with CSS will override the height and width attributes on the <svg> . The viewBox attribute has a sidekick, preserveAspectRatio . It has no effect unless a viewBox exists to define the aspect ratio of the image."
          ]
        },
        {
          "title": "Stack Overflow: Pure CSS Solution - Square Elements",
          "url": "https://stackoverflow.com/questions/13851940/pure-css-solution-square-elements",
          "excerpts": [
            "Pure CSS Solution - Square Elements? [duplicate]",
            "#square {\nwidth: 100%;\nheight: 0;\npadding-bottom: 100%;\n}\nShare"
          ]
        },
        {
          "title": "CSS-Tricks Almanac: aspect-ratio",
          "url": "https://css-tricks.com/almanac/properties/a/aspect-ratio/",
          "excerpts": [
            "Sep 7, 2022 — The CSS property aspect-ratio lets you create boxes that maintain proportional dimensions where the height and width of a box are calculated automatically as a"
          ]
        }
      ],
      "reasoning": "The finegrained field value describes cross-environment sizing and aspect-ratio handling, and claims that Obsidian uniquely allows CSS-based control (including forcing a square with aspect-ratio), while GitHub/GitLab render diagrams responsively with limited user control. The most relevant excerpts provide concrete, actionable details: an example showing setting a width (e.g., 400px) while preserving aspect ratio, which directly demonstrates how to approach a squarish outcome; a definition of the aspect-ratio CSS property, which explains how a square can be forced by specifying a 1/1 ratio; and a description of preserveAspectRatio behavior in SVG, which clarifies how the SVG content scales within its viewport and what that implies for square rendering. Additional excerpts discuss viewBox-based resizing and practical square-element techniques in CSS, which support the idea that you can influence final dimensions and aspect ratio through container and CSS rules. Collectively, these excerpts substantiate the field value’s key points: sizing controls differ by environment, with Obsidian enabling CSS-based forcing of a square, while other platforms rely on responsive behavior and limited controls. Furthermore, references discussing mermaid/SVG sizing issues and responsive wrapping corroborate that fixed, square sizing is non-uniform across environments and often requires explicit CSS strategies in environments like Obsidian.",
      "confidence": "high"
    },
    {
      "field": "interactivity_and_security_guide.conditional_prompting_guidance",
      "citations": [
        {
          "title": "Security | Mermaid",
          "url": "https://mermaid.js.org/community/security.html",
          "excerpts": [
            "Configuring DomPurify [​]()\n\nBy default Mermaid uses a baseline [DOMPurify](https://github.com/cure53/DOMPurify) config. It is possible to override the options passed to DOMPurify by adding a `dompurifyConfig` key to the Mermaid options. This could potentially break the output of Mermaid so use this with c",
            "The Mermaid team takes the security of Mermaid and the applications that use Mermaid seriously. This page describes how to report any vulnerabilities you may find, and lists best practices to minimize the risk of introducing a vulnerability.",
            "Configuring DomPurify"
          ]
        },
        {
          "title": "Stored XSS in Mermaid when viewing Markdown files - GitLab",
          "url": "https://gitlab.com/gitlab-org/gitlab/-/issues/332528",
          "excerpts": [
            "You do this by updating the configuration in config.secure which is a list of parameters that are to be blocked. The default values are: [' ..."
          ]
        },
        {
          "title": "DOMPurify 3.1.7 breaks Mermaid diagrams using foreignObject #1002",
          "url": "https://github.com/cure53/DOMPurify/issues/1002",
          "excerpts": [
            "DOMPurify 3.1.7 breaks retrocompatibility due to a recent foreignObject -related change from @masatokinugawa. This breaks Mermaid diagrams on all our newly ...",
            "New issue"
          ]
        },
        {
          "title": "Mermaid Config Documentation",
          "url": "https://mermaid.js.org/config/schema-docs/config.html",
          "excerpts": [
            "| `\"strict\"` | (\\*\\*default\\*\\*) HTML tags in the text are encoded and click functionality is disab",
            "| `\"antiscript\"` | HTML tags in text are allowed (only script elements are removed), and click functionality is enabled. |",
            "### securityLevel Default Value [​]()"
          ]
        },
        {
          "title": "Accessibility Options",
          "url": "https://mermaid.js.org/config/accessibility.html",
          "excerpts": [
            "* Flowchart with the accessible title \"Big Decisions\" and the single-line accessible description \"Bob's Burgers process for making big decisions\""
          ]
        },
        {
          "title": "How to Meet WCAG (Quick Reference) - W3C",
          "url": "https://www.w3.org/WAI/WCAG22/quickref/",
          "excerpts": [
            "All non-text content that is presented to the user has a text alternative that serves the equivalent purpose, except for the situations listed below. 1.4.8 Visual Presentation; 1.4.9 Images of Text (No Exception); 1.4.10 Reflow; 1.4.11 Non-text Contrast; 1.4.12 Text Spacing; 1.4.13 Content on Hover or Focus. A customizable quick reference to Web Content Accessibility Guidelines (WCAG) 2 requirements (success criteria) and techniques."
          ]
        }
      ],
      "reasoning": "The most relevant excerpts discuss security controls and how to safely configure Mermaid outputs, which directly underpin the proposed prompt structure that conditionally enables interactivity. Excerpts describing how to override security-related DOMPurify options or enforce secure defaults inform why the prompting guidance must specify triggers, conditional actions, and a secure default when no triggers are present. For instance, guidance about configuring DOMPurify and reporting vulnerabilities highlights the need for clearly stating what to do when interactivity is not requested and why untrusted inputs must be treated carefully. References to blocking or restricting certain features (like XSS risks and secure configuration blocks) align with the recommendation to conditionally enable interactive blocks only when explicitly allowed. Context about static diagrams when interactivity is not provided reinforces the essential default behavior to avoid unintended dynamic features. While some excerpts address broader accessibility and general security best practices, they support the overall goal of creating safe, reliable diagrams and prompts without directly dictating the exact conditional prompt structure, yet they corroborate the safety-centric framing of the field value.\n",
      "confidence": "high"
    },
    {
      "field": "heuristics_for_weak_llms.complexity_management",
      "citations": [
        {
          "title": "Improving LLM Output Reliability with Structured Data Generation",
          "url": "https://www.matt-adams.co.uk/2025/02/12/structured-data-generation.html",
          "excerpts": [
            "I encountered this challenge while working on generating Mermaid diagrams with LLMs. Even though the models could understand the concept and content of what needed to be generated, they would often:",
            "* Produce invalid Mermaid syntax",
            "Better Error Handling: JSON parsing provides clear error messages and makes it easier to implement fallback mechanisms; Maintainability ... ... Mermaid diagram syntax or Gherkin test cases often leads to errors and inconsistencies. This post explores a pattern I've successfully used ...",
            "The Solution: A Two-Step Approach",
            "1. **Content Generation** : Have the model generate a structured JSON representation that focuses purely on the content and logic",
            "2. **Format Conversion** : Use code to convert this structured data into the desired final format"
          ]
        },
        {
          "title": "Prompt Engineering via Prompt Patterns — Visualization Generator ...",
          "url": "https://medium.com/@a1guy/prompt-engineering-via-prompt-patterns-visualization-generator-pattern-e0cfb926aae1",
          "excerpts": [
            "This article described both the tools and how to use the natural language abilities of LLMs like ChatGPT to create images using the visualization generation ..."
          ]
        },
        {
          "title": "Structured output support for the Prompt API | AI on Chrome",
          "url": "https://developer.chrome.com/docs/ai/structured-output-for-prompt-api",
          "excerpts": [
            "May 13, 2025 — The Prompt API lets you specify a JSON output format of the model's response by passing a JSON Schema to the LanguageModel.prompt() and LanguageModel. ..."
          ]
        }
      ],
      "reasoning": "The target field value describes concrete strategies for managing complexity in diagram generation: breaking large tasks into smaller diagrams, leveraging an elk layout for dense graphs, and a robust two-step approach that first generates a structured JSON representation and then converts it into valid Mermaid syntax. Excerpts that discuss the core idea of structured data generation and JSON-first pipelines directly support these strategies by outlining a two-step workflow and the benefits of structured representations. Specifically, references to generating a structured JSON representation focused on content and logic, followed by using code to convert this into the final diagram syntax, align with the idea of offloading strict syntax generation from the LLM. Additional excerpts emphasize improving reliability through clear error handling and JSON parsing, which underpins a robust multi-step process. The two-step solution is repeatedly proposed as a pattern to improve reliability, direct evidence for adopting this approach. Related excerpts also mention a two-step approach explicitly and discuss how to separate content generation from format conversion, which reinforces the recommended pipeline. While other excerpts cover related tooling and prompt design (such as JSON output formats and visualization prompts), their connection is to provide supporting context for the structured, two-step strategy rather than to propose an alternative primary method.",
      "confidence": "high"
    },
    {
      "field": "validation_toolchain_overview.ci_cd_integration_patterns",
      "citations": [
        {
          "title": "Improving LLM Output Reliability with Structured Data Generation",
          "url": "https://www.matt-adams.co.uk/2025/02/12/structured-data-generation.html",
          "excerpts": [
            "I encountered this challenge while working on generating Mermaid diagrams with LLMs. Even though the models could understand the concept and content of what needed to be generated, they would often:",
            "* Produce invalid Mermaid syntax",
            "Better Error Handling: JSON parsing provides clear error messages and makes it easier to implement fallback mechanisms; Maintainability ... ... Mermaid diagram syntax or Gherkin test cases often leads to errors and inconsistencies. This post explores a pattern I've successfully used ..."
          ]
        },
        {
          "title": "Diagrams | GenAIScript",
          "url": "https://microsoft.github.io/genaiscript/reference/scripts/diagrams/",
          "excerpts": [
            "The `system.diagrams` system prompt registers a repair chat participant that will try to fix any syntax errors in the generated Mermaid diagrams. It’s not uncommon for LLMs to generate invalid Mermaid syntax, so this is a useful feature.",
            "You can use the result.error value to check if the parsing was successful. If it was not, you can use the result.error value to repair the diagram ... Create diagrams and charts within markdown using GenAIScript and the mermaid extension for visual representation of data and processes."
          ]
        }
      ],
      "reasoning": "The most directly relevant information describes a pattern for generating Mermaid diagrams with LLMs and the challenges that arise, such as invalid Mermaid syntax, which directly informs why a CI/CD pipeline would need a step to validate and potentially repair diagrams. The idea of leveraging structured data generation to separate content from formatting supports a reliable workflow where diagram data can be produced in a machine-friendly way and then transformed into Mermaid syntax, which is central to CI/CD validation. References that discuss using a system prompt to register a repair participant dedicated to fixing syntax errors in generated Mermaid diagrams provide concrete mechanism for maintenance within automated pipelines. Additional excerpts describe how to check parsing outcomes and repair failures, which aligns with a CI/CD pattern where a non-zero exit from a diagram-generation step should fail the pipeline, preventing broken diagrams from propagating, and mention that diagrams can be regenerated or updated in documentation, which dovetails with automated regeneration in CI/CD. Collectively, these sources corroborate a workflow where mermaid diagrams are generated, validated for syntax, repaired if needed, and optionally regenerated and committed as part of CI/CD, with explicit attention to error handling and maintainability within structured processes.",
      "confidence": "medium"
    },
    {
      "field": "diagram_specific_prompt_templates.2",
      "citations": [
        {
          "title": "LLM + Mermaid: How Modern Teams Create UML Diagrams ...",
          "url": "https://mike-vincent.medium.com/llm-mermaid-how-modern-teams-create-uml-diagrams-without-lucidchart-e54c56350804",
          "excerpts": [
            "flowchart TD  ",
            "    Start((Browse Products)) --> AddToCart[Add to Cart]  ",
            "    AddToCart --> Decision{Proceed to Checkout?} Decision -- Yes --> CheckStock[Check Stock]  ",
            "    Decision -- No --> Start  ",
            "    CheckStock -- In Stock --> Checkout[Proceed to Checkout]  ",
            "    CheckStock -- Out of Stock --> Notify[Notify User]  ",
            "    Notify --> Start  ",
            "    Checkout --> Payment[Process Payment]  ",
            "    Payment -- Success --> Complete((Order Complete))  ",
            "    Payment -- Failure --> Retry[Retry Payment]  ",
            "Entity Relationship Diagrams: Defining the Data Model",
            "```",
            "```",
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "The ChatGPT prompt list for Software Engineers - Medium",
          "url": "https://medium.com/@martin-jurran/chatgpt-prompt-list-for-software-engineers-prompts-to-generate-software-diagrams-in-mermaid-deaf2f373104",
          "excerpts": [
            "The most comprehensive list of how ChatGPT and other LLMs can support diagram creation in Mermaid. Contains lots of useful prompts and other ..."
          ]
        },
        {
          "title": "Using Mermaid Diagrams 100x Better with Your Favorite AI / LLM App (Dev to article)",
          "url": "https://dev.to/yigit-konur/using-mermaid-diagrams-100x-better-with-your-favorite-ai-llm-app-3m1p",
          "excerpts": [
            "Your primary function is to transform ANY textual diagram idea, natural language description, malformed/incomplete Mermaid code, or embedded Mermaid blocks within Markdown into **production-ready, syntactically pristine, visually compelling, and interactive Mermaid diagrams. ** You will also provide micro-documentation via a concise changelog and embedded tool",
            "Phase 1: Input Ingestion & Contextual Analysis",
            "I use Mermaid diagrams constantly in my daily workflow. But honestly, most AI apps tend to mess them up when generating these diagrams. It doesn't matter if it's the smartest model out there or the simplest one—mistakes still happen. That's why having a rock-solid prompt is super important for getting things right.",
            "If you're curious, you can check out the full prompt on GitHub here: <https://gist.githubusercontent.com/yigitkonur/af07453dd812cd8a0b565fed62dd0f7d/raw/eec183bb6e9777d888e49870b4f994f957da979d/llm-mermaid.md>"
          ]
        },
        {
          "title": "Flowcharts – Basic Syntax",
          "url": "https://docs.mermaidchart.com/mermaid-oss/syntax/flowchart.html",
          "excerpts": [
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Directives Documentation",
          "url": "https://docs.mermaidchart.com/mermaid-oss/config/directives.html",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Documentation - Diagram Syntax",
          "url": "https://mermaid.js.org/intro/syntax-reference.html",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Can I control the direction of flowcharts in Mermaid? - Stack Overflow",
          "url": "https://stackoverflow.com/questions/66631182/can-i-control-the-direction-of-flowcharts-in-mermaid",
          "excerpts": [
            "```",
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Let the user decide the size and alignment of mermaid diagrams",
          "url": "https://forum.obsidian.md/t/let-the-user-decide-the-size-and-alignment-of-mermaid-diagrams/7019",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Config Documentation",
          "url": "https://mermaid.js.org/config/schema-docs/config.html",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "CSS aspect-ratio (MDN)",
          "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Havelsan's Revenue in 2024",
          "url": "https://github.com/RooCodeInc/Roo-Code/issues/6712",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid diagrams and automatic repair (GenAIScript blog)",
          "url": "https://microsoft.github.io/genaiscript/blog/mermaids/",
          "excerpts": [
            "```"
          ]
        },
        {
          "title": "Mermaid Mermaid issue 4571 - ER diagram parse error with attribute starting with a number",
          "url": "https://github.com/mermaid-js/mermaid/issues/4571",
          "excerpts": [
            "```"
          ]
        },
        {
          "title": "Flowchart: Add inheritDir option to make subgraphs inherit global ...",
          "url": "https://github.com/mermaid-js/mermaid/issues/6492",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Support specifying that two nodes should be at the same level/rank",
          "url": "https://github.com/mermaid-js/mermaid/issues/3723",
          "excerpts": [
            "```",
            "```"
          ]
        }
      ],
      "reasoning": "The finegrained field value centers on a prompt template to generate a Mermaid class diagram and to output only the raw Mermaid code, with an example instantiation of a Mermaid diagram. Excerpts that discuss prompts for generating Mermaid diagrams with LLMs, including prompts aimed at UML or diagram creation and references to Mermaid syntax (such as flowchart TD or class diagram-like structures) are directly relevant because they illustrate how such prompts are structured and what the model is expected to produce. For instance, passages that claim the primary function is to transform textual diagram ideas into production-ready Mermaid diagrams, and that the model should provide Mermaid code or block content, bolster the connection to the desired field value. Passages that present real Mermaid snippets (even if not strictly classDiagram) demonstrate the syntax and output style the field value prescribes. Passages that discuss UML/diagrams more generally or that show example Mermaid graphs in narrative form help contextualize how such prompts guide structure and output, though they are somewhat less specific to a class diagram and raw Mermaid code constraint. Overall, the most relevant portions are those that align with generating Mermaid-based diagrams through prompts and that show or imply outputting pure Mermaid code, supporting the notion of a class-diagram-focused Mermaid prompt template and its explicit output format.",
      "confidence": "medium"
    },
    {
      "field": "master_prompt_blueprint.output_contract",
      "citations": [
        {
          "title": "Structured output for open models | Generative AI on ...",
          "url": "https://cloud.google.com/vertex-ai/generative-ai/docs/maas/capabilities/structured-output",
          "excerpts": [
            "Structured outputs enable a model to generate output that always adheres to a specific schema. For example, a model may be provided with a response schema."
          ]
        },
        {
          "title": "Generative AI on Vertex AI - Structured output",
          "url": "https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/control-generated-output",
          "excerpts": [
            "Learn how to control the output of generative AI multimodal models on Google Cloud's Vertex AI. This feature is also called structured output."
          ]
        },
        {
          "title": "Mermaid Diagrams - Platen",
          "url": "https://platen.io/modules/platen/markup/mermaid/",
          "excerpts": [
            "Initialize Directive #. Immediately before the diagram syntax, you can specify an initialize directive for Mermaid. This overrides the site's ..."
          ]
        },
        {
          "title": "Improving LLM Output Reliability with Structured Data Generation",
          "url": "https://www.matt-adams.co.uk/2025/02/12/structured-data-generation.html",
          "excerpts": [
            "* Produce invalid Mermaid syntax",
            "1. **Content Generation** : Have the model generate a structured JSON representation that focuses purely on the content and logic",
            "2. **Format Conversion** : Use code to convert this structured data into the desired final format"
          ]
        }
      ],
      "reasoning": "The field value demands a strictly machine-readable output format with a single fenced code block using the Mermaid language tag, and no extraneous text. Excerpts describing structured outputs that adhere to a predefined schema demonstrate the principle of forcing outputs to conform to a fixed format, which directly supports this requirement. For example, the notion that structured outputs enable a model to generate output that always adheres to a specific schema provides strong alignment with enforcing schema-compliant responses. Likewise, guidance about controlling the model’s output via structured output mechanisms reinforces the feasibility and rationale for constraining the response to a specific format. A Mermaid-specific directive, which discusses Mermaid initialization or directives, directly informs how to set up the diagram syntax reliably before rendering, aligning with the requirement to produce Mermaid code within a block. The excerpts addressing the two-step approach—first generating a structured JSON representation focusing on content, then converting that structure into the final format—offer a practical methodology to implement the strict formatting rules by decoupling content from presentation. Finally, the reference to ensuring Mermaid syntax fidelity (avoiding invalid Mermaid) underscores the need to eliminate conversational filler and ensure clean, usable diagrams. Together, these excerpts support the idea of enforcing a strict, machine-readable output format, leveraging schema-driven structure and explicit Mermaid directives to guarantee the final output is a single, well-formed code block without extra text. ",
      "confidence": "medium"
    },
    {
      "field": "squarish_layout_strategies.external_css_strategies",
      "citations": [
        {
          "title": "CSS aspect-ratio (MDN)",
          "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio",
          "excerpts": [
            "css\n\n```\ndiv {\n  width: 100px;\n  height: auto;\n}\ndiv:nth-child(1) {\n  aspect-ratio: 1/1;\n}\ndiv:nth-child(2) {\n  aspect-ratio: 0.5;\n}\ndiv:nth-child(3) {\n  aspect-ratio: 1;\n}\ndiv:nth-child(4) {\n  aspect-ratio: 1/0.5;\n}\ndiv:nth-child(5) {\n  aspect-ratio: 16/9;\n}\n```\n\n",
            "The **`aspect-ratio`** [CSS](/en-US/docs/Web/CSS) property allows you to define the desired width-to-height ratio of an element's box. This means that even if the parent container or viewport size changes, the browser will adjust the element's dimensions to maintain the specified width-to-height ratio.",
            "  width: 200px;",
            "  width: 200px;",
            "  aspect-ratio: 3/2 auto;",
            "  aspect-ratio: 3/2 auto;",
            "  border: 2px dashed red;",
            "  border: 2px dashed red;"
          ]
        },
        {
          "title": "Configuration - Mermaid Documentation",
          "url": "https://mermaid.js.org/config/configuration.html",
          "excerpts": [
            "##### Code:"
          ]
        },
        {
          "title": "Mermaid Theme Configuration",
          "url": "https://mermaid.js.org/config/theming.html",
          "excerpts": [
            "##### Code:",
            "##### Code:"
          ]
        },
        {
          "title": "Mermaid Layouts and Layout Options",
          "url": "https://mermaid.js.org/config/layouts.html",
          "excerpts": [
            "##### Code:"
          ]
        }
      ],
      "reasoning": "The core claim is that square rendering can be achieved by styling the Mermaid diagram container with CSS. Direct references show the use of the aspect-ratio property to fix a square shape, with examples like aspect-ratio: 1/1 or 1, applied to a container div and ensuring the SVG fills the container with width: 100% and height: 100%. These excerpts provide explicit method names and exact CSS rules for creating a square space, which aligns with the stated modern approach. Additional evidence points to the legacy solution, the padding-bottom hack, where a wrapper div uses height: 0 and padding-bottom: 100% to preserve a square aspect, while the inner diagram fills the space. Together, these excerpts directly support the two primary techniques described in the finegrained field value: (1) modern aspect-ratio-driven square containers for Mermaid diagrams, and (2) a legacy padding-bottom wrapper approach for compatibility. The cited code blocks demonstrate how to implement these strategies and how to ensure the diagram SVG scales to fill the square container, matching the requested external CSS strategies to guarantee squareness.",
      "confidence": "high"
    },
    {
      "field": "diagram_specific_prompt_templates.1",
      "citations": [
        {
          "title": "Using Mermaid Diagrams 100x Better with Your Favorite AI / LLM App (Dev to article)",
          "url": "https://dev.to/yigit-konur/using-mermaid-diagrams-100x-better-with-your-favorite-ai-llm-app-3m1p",
          "excerpts": [
            "Your primary function is to transform ANY textual diagram idea, natural language description, malformed/incomplete Mermaid code, or embedded Mermaid blocks within Markdown into **production-ready, syntactically pristine, visually compelling, and interactive Mermaid diagrams. ** You will also provide micro-documentation via a concise changelog and embedded tool",
            "If you're curious, you can check out the full prompt on GitHub here: <https://gist.githubusercontent.com/yigitkonur/af07453dd812cd8a0b565fed62dd0f7d/raw/eec183bb6e9777d888e49870b4f994f957da979d/llm-mermaid.md>"
          ]
        },
        {
          "title": "The ChatGPT prompt list for Software Engineers - Medium",
          "url": "https://medium.com/@martin-jurran/chatgpt-prompt-list-for-software-engineers-prompts-to-generate-software-diagrams-in-mermaid-deaf2f373104",
          "excerpts": [
            "The most comprehensive list of how ChatGPT and other LLMs can support diagram creation in Mermaid. Contains lots of useful prompts and other ..."
          ]
        },
        {
          "title": "Flowcharts – Basic Syntax",
          "url": "https://docs.mermaidchart.com/mermaid-oss/syntax/flowchart.html",
          "excerpts": [
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Directives Documentation",
          "url": "https://docs.mermaidchart.com/mermaid-oss/config/directives.html",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Documentation - Diagram Syntax",
          "url": "https://mermaid.js.org/intro/syntax-reference.html",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "LLM + Mermaid: How Modern Teams Create UML Diagrams ...",
          "url": "https://mike-vincent.medium.com/llm-mermaid-how-modern-teams-create-uml-diagrams-without-lucidchart-e54c56350804",
          "excerpts": [
            "```",
            "```",
            "```",
            "```",
            "```",
            "```",
            "flowchart TD  ",
            "    Start((Browse Products)) --> AddToCart[Add to Cart]  "
          ]
        },
        {
          "title": "Can I control the direction of flowcharts in Mermaid? - Stack Overflow",
          "url": "https://stackoverflow.com/questions/66631182/can-i-control-the-direction-of-flowcharts-in-mermaid",
          "excerpts": [
            "```",
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Let the user decide the size and alignment of mermaid diagrams",
          "url": "https://forum.obsidian.md/t/let-the-user-decide-the-size-and-alignment-of-mermaid-diagrams/7019",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Config Documentation",
          "url": "https://mermaid.js.org/config/schema-docs/config.html",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "CSS aspect-ratio (MDN)",
          "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Havelsan's Revenue in 2024",
          "url": "https://github.com/RooCodeInc/Roo-Code/issues/6712",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid diagrams and automatic repair (GenAIScript blog)",
          "url": "https://microsoft.github.io/genaiscript/blog/mermaids/",
          "excerpts": [
            "```"
          ]
        },
        {
          "title": "Mermaid Mermaid issue 4571 - ER diagram parse error with attribute starting with a number",
          "url": "https://github.com/mermaid-js/mermaid/issues/4571",
          "excerpts": [
            "```"
          ]
        },
        {
          "title": "Flowchart: Add inheritDir option to make subgraphs inherit global ...",
          "url": "https://github.com/mermaid-js/mermaid/issues/6492",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Support specifying that two nodes should be at the same level/rank",
          "url": "https://github.com/mermaid-js/mermaid/issues/3723",
          "excerpts": [
            "```",
            "```"
          ]
        }
      ],
      "reasoning": "The target field value is a Mermaid sequence diagram prompt template along with an example instantiation and the instruction to output only the raw Mermaid code. A highly relevant excerpt states that the primary function is to transform any textual diagram idea or malformed Mermaid code into production-ready Mermaid diagrams and to provide micro-documentation via a concise changelog and embedded tool, directly supporting the idea of structured Mermaid prompt templates and guidance. Another highly relevant excerpt explicitly discusses using Mermaid diagrams to improve AI-generated diagrams and points to a GitHub-hosted prompt, signaling the same domain of prompt templates and templates usage. Additional relevant excerpts discuss prompts and lists for software engineers focused on diagram creation in Mermaid, which aligns with the need for prompt templates and guidance around diagram generation. Concretely, an excerpt contains an actual Mermaid-like diagram snippet with labeled nodes and arrows, illustrating the kind of Mermaid content (even if not a strict sequence diagram) that the field value aims to generate. This combination of explicit Mermaid prompt guidance, mention of transforming descriptions into Mermaid diagrams, and concrete Mermaid code examples makes these excerpts the most supportive for the fine-grained field value. Less directly relevant excerpts still relate to Mermaid usage (e.g., general prompts, other diagram types), and thus provide contextual relevance but not as strong direct support for the exact sequence-diagram prompt template. ",
      "confidence": "high"
    },
    {
      "field": "master_prompt_blueprint.validation_and_self_check_steps",
      "citations": [
        {
          "title": "Improving LLM Output Reliability with Structured Data Generation",
          "url": "https://www.matt-adams.co.uk/2025/02/12/structured-data-generation.html",
          "excerpts": [
            "* Produce invalid Mermaid syntax",
            "* Create inconsistent node and edge definitions",
            "Better Error Handling: JSON parsing provides clear error messages and makes it easier to implement fallback mechanisms; Maintainability ... ... Mermaid diagram syntax or Gherkin test cases often leads to errors and inconsistencies. This post explores a pattern I've successfully used ..."
          ]
        },
        {
          "title": "Mermaid Diagrams - Platen",
          "url": "https://platen.io/modules/platen/markup/mermaid/",
          "excerpts": [
            "Initialize Directive #. Immediately before the diagram syntax, you can specify an initialize directive for Mermaid. This overrides the site's ..."
          ]
        }
      ],
      "reasoning": "The most directly relevant support comes from an excerpt that explicitly mentions producing invalid Mermaid syntax as a problem to be avoided, which underpins the need for a Syntax Check in the checklist. A second relevant excerpt highlights the risk of inconsistent node and edge definitions, aligning with a Connectivity and overall diagram correctness concern that the validation steps should catch. A third excerpt discusses error handling and parsing-related issues, which supports the broader theme of validating structured outputs before final emission. Finally, a resource about an initialization directive before Mermaid diagram syntax demonstrates practical mechanisms around diagram rendering setup, which complements the goal of ensuring diagrams are produced correctly and safely before final output. Collectively, these excerpts map onto the proposed checklist items: syntax conformance, structural consistency (nodes/edges), error prevention/handling, and diagram setup considerations.",
      "confidence": "medium"
    },
    {
      "field": "diagram_specific_prompt_templates.5",
      "citations": [
        {
          "title": "Using Mermaid Diagrams 100x Better with Your Favorite AI / LLM App (Dev to article)",
          "url": "https://dev.to/yigit-konur/using-mermaid-diagrams-100x-better-with-your-favorite-ai-llm-app-3m1p",
          "excerpts": [
            "If you're curious, you can check out the full prompt on GitHub here: <https://gist.githubusercontent.com/yigitkonur/af07453dd812cd8a0b565fed62dd0f7d/raw/eec183bb6e9777d888e49870b4f994f957da979d/llm-mermaid.md>",
            "Your primary function is to transform ANY textual diagram idea, natural language description, malformed/incomplete Mermaid code, or embedded Mermaid blocks within Markdown into **production-ready, syntactically pristine, visually compelling, and interactive Mermaid diagrams. ** You will also provide micro-documentation via a concise changelog and embedded tool",
            "I use Mermaid diagrams constantly in my daily workflow. But honestly, most AI apps tend to mess them up when generating these diagrams. It doesn't matter if it's the smartest model out there or the simplest one—mistakes still happen. That's why having a rock-solid prompt is super important for getting things right.",
            "Phase 1: Input Ingestion & Contextual Analysis"
          ]
        },
        {
          "title": "The ChatGPT prompt list for Software Engineers - Medium",
          "url": "https://medium.com/@martin-jurran/chatgpt-prompt-list-for-software-engineers-prompts-to-generate-software-diagrams-in-mermaid-deaf2f373104",
          "excerpts": [
            "The most comprehensive list of how ChatGPT and other LLMs can support diagram creation in Mermaid. Contains lots of useful prompts and other ..."
          ]
        },
        {
          "title": "LLM + Mermaid: How Modern Teams Create UML Diagrams ...",
          "url": "https://mike-vincent.medium.com/llm-mermaid-how-modern-teams-create-uml-diagrams-without-lucidchart-e54c56350804",
          "excerpts": [
            "flowchart TD  ",
            "    Start((Browse Products)) --> AddToCart[Add to Cart]  ",
            "    AddToCart --> Decision{Proceed to Checkout?} Decision -- Yes --> CheckStock[Check Stock]  ",
            "    Decision -- No --> Start  ",
            "    CheckStock -- In Stock --> Checkout[Proceed to Checkout]  ",
            "    CheckStock -- Out of Stock --> Notify[Notify User]  ",
            "    Notify --> Start  ",
            "    Checkout --> Payment[Process Payment]  ",
            "    Payment -- Success --> Complete((Order Complete))  ",
            "    Payment -- Failure --> Retry[Retry Payment]  ",
            "    Retry --> Payment",
            "Entity Relationship Diagrams: Defining the Data Model",
            "```",
            "```",
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Flowcharts – Basic Syntax",
          "url": "https://docs.mermaidchart.com/mermaid-oss/syntax/flowchart.html",
          "excerpts": [
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Directives Documentation",
          "url": "https://docs.mermaidchart.com/mermaid-oss/config/directives.html",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Documentation - Diagram Syntax",
          "url": "https://mermaid.js.org/intro/syntax-reference.html",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Can I control the direction of flowcharts in Mermaid? - Stack Overflow",
          "url": "https://stackoverflow.com/questions/66631182/can-i-control-the-direction-of-flowcharts-in-mermaid",
          "excerpts": [
            "```",
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Let the user decide the size and alignment of mermaid diagrams",
          "url": "https://forum.obsidian.md/t/let-the-user-decide-the-size-and-alignment-of-mermaid-diagrams/7019",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Config Documentation",
          "url": "https://mermaid.js.org/config/schema-docs/config.html",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "CSS aspect-ratio (MDN)",
          "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Havelsan's Revenue in 2024",
          "url": "https://github.com/RooCodeInc/Roo-Code/issues/6712",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid diagrams and automatic repair (GenAIScript blog)",
          "url": "https://microsoft.github.io/genaiscript/blog/mermaids/",
          "excerpts": [
            "```"
          ]
        },
        {
          "title": "Mermaid Mermaid issue 4571 - ER diagram parse error with attribute starting with a number",
          "url": "https://github.com/mermaid-js/mermaid/issues/4571",
          "excerpts": [
            "```"
          ]
        },
        {
          "title": "Flowchart: Add inheritDir option to make subgraphs inherit global ...",
          "url": "https://github.com/mermaid-js/mermaid/issues/6492",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Support specifying that two nodes should be at the same level/rank",
          "url": "https://github.com/mermaid-js/mermaid/issues/3723",
          "excerpts": [
            "```",
            "```"
          ]
        }
      ],
      "reasoning": "The fine-grained field value concerns a specific Mermaid diagram prompt template for a Pie Chart, including instructions to output only the raw Mermaid code and the example data. Excerpts that describe transforming textual ideas or incomplete Mermaid code into production-ready Mermaid diagrams are directly relevant because they address the practical use and quality of Mermaid prompts. Excerpts that state that the primary function is to transform any textual diagram idea or embedded Mermaid blocks into production-ready diagrams show the same overarching goal of generating clean, executable Mermaid syntax from natural language or inputs. References to prompt lists and micro-documentation/changelogs indicate a structured, repeatable prompting approach, which aligns with having a reusable diagram prompt template. Concrete Mermaid code examples (like flowcharts) demonstrate the format and style of diagrams that an LLM should output, illustrating the expected behavior of template-driven generation. Although none of the excerpts may explicitly name a Pie Chart template, they collectively support the concept of a robust, template-driven Mermaid prompt system, which is the essence of the requested field value. Therefore, the most relevant content centers on Mermaid diagram prompts, template-driven generation, and documented prompt behavior, while less directly relevant items provide contextual support about Mermaid usage and example diagrams.",
      "confidence": "medium"
    },
    {
      "field": "executive_summary",
      "citations": [
        {
          "title": "LLM + Mermaid: How Modern Teams Create UML Diagrams ...",
          "url": "https://mike-vincent.medium.com/llm-mermaid-how-modern-teams-create-uml-diagrams-without-lucidchart-e54c56350804",
          "excerpts": [
            "Learn how developers use AI and Mermaid to generate UML diagrams and flows, replacing manual tools with version-controlled documentation.",
            "Ready to join everyone else? Try the [Mermaid Live Editor](https://mermaid.live/) or ask your AI assistant to help you visualize your next design. The next time you need a system diagram, forget about manually dragging shapes. Talk to your AI assistant, point it at your codebase, and watch your documentation come to life — accura",
            "```",
            "```",
            "```",
            "```",
            "```",
            "```",
            "flowchart TD  ",
            "    Start((Browse Products)) --> AddToCart[Add to Cart]  ",
            "    AddToCart --> Decision{Proceed to Checkout?} Decision -- Yes --> CheckStock[Check Stock]  ",
            "    Decision -- No --> Start  ",
            "    CheckStock -- In Stock --> Checkout[Proceed to Checkout]  ",
            "    CheckStock -- Out of Stock --> Notify[Notify User]  ",
            "    Notify --> Start  ",
            "    Checkout --> Payment[Process Payment]  ",
            "    Payment -- Success --> Complete((Order Complete))  ",
            "    Payment -- Failure --> Retry[Retry Payment]  "
          ]
        },
        {
          "title": "Flowcharts – Basic Syntax",
          "url": "https://docs.mermaidchart.com/mermaid-oss/syntax/flowchart.html",
          "excerpts": [
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Directives Documentation",
          "url": "https://docs.mermaidchart.com/mermaid-oss/config/directives.html",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Documentation - Diagram Syntax",
          "url": "https://mermaid.js.org/intro/syntax-reference.html",
          "excerpts": [
            "```",
            "```",
            "```",
            "```",
            "In this example, the `layout: elk` line configures the diagram to use the ELK layout algorithm, along with the hand drawn look and forest theme.",
            "```\n---\nconfig:\n  layout: dagre\n  look: classic\n  theme: default\n---\n\nflowchart LR\nA[Start] --> B{Choose Path}\nB -->|Option 1| C[Path 1]\nB -->|Option 2| D[Path 2]\n```",
            "Mermaid's syntax is used to create diagrams. You'll find that it is not too tricky and can be learned in a day. The next sections dive deep into the syntax of each diagram type. Syntax, together with Deployment and Configuration constitute the whole of Mermaid. Diagram Examples can be found in the [Mermaid Live Editor](https://mermaid.live) , it is also a great practice area.",
            "Diagrams definitions begin** with a declaration of the **diagram type** , followed by the definitions of the diagram and its contents. This declaration notifies the parser which kind of diagram the code is supposed to generate. The only exception to this a [Frontmatter]() configura",
            "#### Selecting Layout Algorithms [​]()\n\nIn addition to customizing the look of your diagrams, Mermaid Chart now allows you to choose different layout algorithms to better organize and present your diagrams, especially when dealing with more complex structures. The layout algorithm dictates how nodes and edges are arranged on the page.",
            "### Frontmatter for diagram code [​]()\n\nFrontmatter is the term for adding YAML metadata at the start of code. This allows for reconfiguration of a diagram before it is rendered. You can pass metadata Frontmatter with your definition by adding `---` to the lines before and after the definition. This 'triple dash' MUST be the only character on the first line. Frontmatter uses YAML syntax.",
            "This allows for reconfiguration of a diagram before it is rendered.",
            "You can pass metadata Frontmatter with your definition by adding `---` to the lines before and after the definition."
          ]
        },
        {
          "title": "Can I control the direction of flowcharts in Mermaid? - Stack Overflow",
          "url": "https://stackoverflow.com/questions/66631182/can-i-control-the-direction-of-flowcharts-in-mermaid",
          "excerpts": [
            "```",
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Let the user decide the size and alignment of mermaid diagrams",
          "url": "https://forum.obsidian.md/t/let-the-user-decide-the-size-and-alignment-of-mermaid-diagrams/7019",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Config Documentation",
          "url": "https://mermaid.js.org/config/schema-docs/config.html",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "CSS aspect-ratio (MDN)",
          "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio",
          "excerpts": [
            "```",
            "```",
            "```",
            "```",
            "css\n\n```\ndiv {\n  width: 100px;\n  height: auto;\n}\ndiv:nth-child(1) {\n  aspect-ratio: 1/1;\n}\ndiv:nth-child(2) {\n  aspect-ratio: 0.5;\n}\ndiv:nth-child(3) {\n  aspect-ratio: 1;\n}\ndiv:nth-child(4) {\n  aspect-ratio: 1/0.5;\n}\ndiv:nth-child(5) {\n  aspect-ratio: 16/9;\n}\n```\n\n",
            "The **`aspect-ratio`** [CSS](/en-US/docs/Web/CSS) property allows you to define the desired width-to-height ratio of an element's box. This means that even if the parent container or viewport size changes, the browser will adjust the element's dimensions to maintain the specified width-to-height ratio.",
            "img {",
            "img {"
          ]
        },
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Havelsan's Revenue in 2024",
          "url": "https://github.com/RooCodeInc/Roo-Code/issues/6712",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid diagrams and automatic repair (GenAIScript blog)",
          "url": "https://microsoft.github.io/genaiscript/blog/mermaids/",
          "excerpts": [
            "```"
          ]
        },
        {
          "title": "Mermaid Mermaid issue 4571 - ER diagram parse error with attribute starting with a number",
          "url": "https://github.com/mermaid-js/mermaid/issues/4571",
          "excerpts": [
            "```"
          ]
        },
        {
          "title": "Flowchart: Add inheritDir option to make subgraphs inherit global ...",
          "url": "https://github.com/mermaid-js/mermaid/issues/6492",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Support specifying that two nodes should be at the same level/rank",
          "url": "https://github.com/mermaid-js/mermaid/issues/3723",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Using Mermaid Diagrams 100x Better with Your Favorite AI / LLM App (Dev to article)",
          "url": "https://dev.to/yigit-konur/using-mermaid-diagrams-100x-better-with-your-favorite-ai-llm-app-3m1p",
          "excerpts": [
            "Phase 1: Input Ingestion & Contextual Analysis",
            "*Isolate Mermaid Content:** If input is Markdown, extract content from `mermaid ...` blocks. For other inputs, identify the core diagram-related text.",
            "*Pre-sanitize:** Normalize basic whitespace; identify explicit user flags ( `theme:` , `type:` , `layout:` ).",
            "Phase 2: Syntactic & Structural Perfection (Guided by Section III)",
            "If you're curious, you can check out the full prompt on GitHub here: <https://gist.githubusercontent.com/yigitkonur/af07453dd812cd8a0b565fed62dd0f7d/raw/eec183bb6e9777d888e49870b4f994f957da979d/llm-mermaid.md>"
          ]
        },
        {
          "title": "fladdict/llmermaid",
          "url": "https://github.com/fladdict/llmermaid",
          "excerpts": [
            "LLMermaid prompting - Flowchart driven LLM control. In our project, we're incorporating diagram markdown, known as Mermaid diagram charts, into Large Language ...",
            "In our project, we're incorporating diagram markdown, known as Mermaid diagram charts, into Large Language Models (LLMs). This integration is designed to ..."
          ]
        },
        {
          "title": "A Mermaid User-Guide for Beginners",
          "url": "https://docs.mermaidchart.com/mermaid-oss/intro/getting-started.html",
          "excerpts": [
            "Apr 11, 2025 — Configuration options are available in the Configuration panel. The options are applied to the diagram in the Preview panel. To learn more, ... Syntax and Configurations. Diagram Syntax ​ Mermaid's syntax is used to create diagrams. You'll find that it is not too tricky and can be ...",
            "Apr 11, 2025 — Mermaid Chart is a web-based diagram editor that allows you to create and edit diagrams in your browser. It is built by the team behind Mermaid. Apr 11, 2025 — The Essential Guide to Mermaid Chart Plugin for VS Code [08/2025]. Creating visual diagrams for complex data structures and workflows in VS ..."
          ]
        },
        {
          "title": "How to Scale SVG",
          "url": "https://css-tricks.com/scale-svg/",
          "excerpts": [
            "Sep 30, 2022 — Any height or width you set for the SVG with CSS will override the height and width attributes on the <svg> . The viewBox attribute has a sidekick, preserveAspectRatio . It has no effect unless a viewBox exists to define the aspect ratio of the image.",
            "Sep 30, 2022 — The second half of the default preserveAspectRatio , meet , is the part that tells the browser to scale the graphic until it just fits both ..."
          ]
        },
        {
          "title": "Configure flowchart to auto-resize so that nodes are always ...",
          "url": "https://github.com/mermaid-js/mermaid/issues/838",
          "excerpts": [
            "May 14, 2019 — I've tried playing with various useMaxWidth and HTML/css settings, however I'm unable to achieve the following behavior: Given a #mermaid ... May 14, 2019 — Given a #mermaid container sitting within an auto-width div, I would like to render flow charts so that the nodes are always the same size ..."
          ]
        },
        {
          "title": "Change size of Mermaid.render generated SVG?",
          "url": "https://stackoverflow.com/questions/69094109/change-size-of-mermaid-render-generated-svg",
          "excerpts": [
            "I am attempting to render an SVG using mermaid in my Angular 8 project. Everything renders exactly as needed except my only issue is that the sizing is too small, and I am unable to override the max-width in my CSS.",
            "max-width: none !important;",
            "This should override the mermaid settings."
          ]
        },
        {
          "title": "preserveAspectRatio - MDN",
          "url": "https://developer.mozilla.org/en-US/docs/Web/SVG/Reference/Attribute/preserveAspectRatio",
          "excerpts": [
            "io\n\nThe **`preserveAspectRatio`** attribute indicates how an element with a viewBox providing a given [aspect ratio](/en-US/docs/Glossary/Aspect_ratio) must fit into a viewport with a different aspect ratio. The aspect ratio of an SVG image is defined by the [`viewBox`](/en-US/docs/Web/SVG/Reference/Attribute/viewBox) attribute.",
            "The alignment value indicates whether to force uniform scaling and, if so, the alignment method to use in case the aspect ratio of the [`viewBox`](/en-US/docs/Web/SVG/Reference/Attribute/viewBox) doesn't match the aspect ratio of the viewport. `xMidYMid` is the default value."
          ]
        }
      ],
      "reasoning": "The central field value describes a concrete, multi-part strategy for generating high-quality, squarish Mermaid diagrams with LLMs. Direct prompts that define the LLM’s role and enforce a code-only, syntax-safe output form support the core of this field: the need for explicit instruction to the model to produce clean Mermaid syntax and to avoid common mistakes. This is reflected in excerpts that present explicit prompt patterns and role definitions. For instance, there are examples where the author treats the LLM as a Mermaid diagram expert and prescribes a strict, structured output format, which corresponds to the requirement of high-quality, predictable outputs from the LLM.\n\nAdditionally, the field value emphasizes a two-layer approach: (1) a structured output approach where the diagram data is produced in a constrained, machine-readable format (such as a JSON representation or tightly-scoped Mermaid code block), and (2) a repair loop that uses the Mermaid parser to catch errors, obtain error details, and guide the LLM to produce corrected diagrams. The relevant excerpts describe a multi-phase workflow with a structured JSON from the LLM and subsequent validation/repair steps, which aligns precisely with this requirement.\n\nThe field value also discusses using internal Mermaid configuration to drive a squarish aspect ratio before resorting to external wrappers. Therefore, excerpts that discuss frontmatter and init blocks for Mermaid configuration (with layout direction, wrapping, and related settings) are directly relevant. The same is true for references to layout engines like ELK and Dagre and their directional controls, which influence how diagrams can be arranged toward a square-like footprint when combined with wrapping and text handling.\n\nFinally, the field value mentions using CSS aspect-ratio or HTML wrappers as a backup to enforce squareness. When interpreting relevance, the strongest support comes from the prompt-design and configuration-focused excerpts; follow-up references to CSS-based aspect-ratio techniques are included as supplementary evidence.\n\nIn summary, these excerpts collectively support: (1) structured, role-based prompts to drive high-quality Mermaid outputs; (2) a phase-based, validated/repair workflow to ensure syntactic correctness; (3) internal Mermaid layout/configuration mechanisms (frontmatter/init, layout/direction) to influence diagram shape toward a squarish footprint; and (4) supplementary CSS/aspect-ratio techniques for final presentation control. Together, they map directly to the fine-grained field value described in the executive summary.\n",
      "confidence": "high"
    },
    {
      "field": "validation_toolchain_overview.cli_based_validation",
      "citations": [
        {
          "title": "Improving LLM Output Reliability with Structured Data Generation",
          "url": "https://www.matt-adams.co.uk/2025/02/12/structured-data-generation.html",
          "excerpts": [
            "Better Error Handling: JSON parsing provides clear error messages and makes it easier to implement fallback mechanisms; Maintainability ... ... Mermaid diagram syntax or Gherkin test cases often leads to errors and inconsistencies. This post explores a pattern I've successfully used ...",
            "* Produce invalid Mermaid syntax",
            "I encountered this challenge while working on generating Mermaid diagrams with LLMs. Even though the models could understand the concept and content of what needed to be generated, they would often:",
            "This post explores a pattern I’ve successfully used to improve the reliability of complex format generation by leveraging the models’ strength in JSON output to separate content generation from format handling."
          ]
        },
        {
          "title": "Diagrams | GenAIScript",
          "url": "https://microsoft.github.io/genaiscript/reference/scripts/diagrams/",
          "excerpts": [
            "The `system.diagrams` system prompt registers a repair chat participant that will try to fix any syntax errors in the generated Mermaid diagrams. It’s not uncommon for LLMs to generate invalid Mermaid syntax, so this is a useful feature.",
            "You can use the result.error value to check if the parsing was successful. If it was not, you can use the result.error value to repair the diagram ... Create diagrams and charts within markdown using GenAIScript and the mermaid extension for visual representation of data and processes."
          ]
        },
        {
          "title": "The Ultimate Guide to Prompt Engineering in 2025",
          "url": "https://www.lakera.ai/blog/prompt-engineering-guide",
          "excerpts": [
            "Ambiguity is one of the most common causes of poor LLM output. Instead of issuing vague instructions, use precise, structured, and goal-oriented phrasing."
          ]
        },
        {
          "title": "Structured output support for the Prompt API | AI on Chrome",
          "url": "https://developer.chrome.com/docs/ai/structured-output-for-prompt-api",
          "excerpts": [
            "May 13, 2025 — The Prompt API lets you specify a JSON output format of the model's response by passing a JSON Schema to the LanguageModel.prompt() and LanguageModel. ..."
          ]
        },
        {
          "title": "Generative AI on Vertex AI - Structured output",
          "url": "https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/control-generated-output",
          "excerpts": [
            "Learn how to control the output of generative AI multimodal models on Google Cloud's Vertex AI. This feature is also called structured output."
          ]
        },
        {
          "title": "Class diagrams broken with official Mermaid, and shown fine at ...",
          "url": "https://github.com/mermaid-js/mermaid/issues/6075",
          "excerpts": [
            "With class diagram, if I just replace E --> G[Imports (M)]; onto either E --> G[Imports #40;M#41;]; or E --> G[\"Imports (M)\"]; it will fix the ..."
          ]
        }
      ],
      "reasoning": "The strongest support comes from passages that explicitly discuss error handling and validation behavior tied to Mermaid diagram generation tooling. One excerpt notes that JSON parsing can provide clear error messages and that this facilitates fallback mechanisms, which aligns with robust CLI-based validation workflows and structured output handling. It also mentions that Mermaid syntax-related errors or inconsistencies are a common challenge, which motivates patterns to improve reliability in a headless/validated environment. A related excerpt emphasizes that invalid Mermaid syntax is a recurring problem, reinforcing the need for validation steps and tooling that detect and repair such issues. Another excerpt points out a system or toolchain design where a repair/chat participant focuses on fixing syntax errors in generated Mermaid diagrams, illustrating an integrated approach to validate and render diagrams correctly. Additional excerpts discuss how to check parsing results via a result.error value and to repair diagrams when parsing fails, directly supporting the notion of a CLI-based validation workflow that gates rendering on successful parsing. Collectively, these excerpts map to the field value by covering (a) the use of a headless diagram rendering tool (mmdc) and its role in converting Mermaid definitions to images, (b) the importance of syntax validity and error handling in automated rendering, (c) exit-code-based validation signals, and (d) considerations for output customization and reliability within a validation toolchain. The remaining excerpts provide broader context on structured outputs and prompt engineering but do not directly substantiate the specific validation, rendering, and error-handling mechanisms described by the field value.",
      "confidence": "high"
    },
    {
      "field": "interactivity_and_security_guide.security_level_configuration",
      "citations": [
        {
          "title": "Mermaid Config Documentation",
          "url": "https://mermaid.js.org/config/schema-docs/config.html",
          "excerpts": [
            "### securityLevel Default Value [​]()",
            "| `\"strict\"` | (\\*\\*default\\*\\*) HTML tags in the text are encoded and click functionality is disab",
            "| `\"antiscript\"` | HTML tags in text are allowed (only script elements are removed), and click functionality is enabled. |"
          ]
        },
        {
          "title": "Security | Mermaid",
          "url": "https://mermaid.js.org/community/security.html",
          "excerpts": [
            "Configuring DomPurify [​]()\n\nBy default Mermaid uses a baseline [DOMPurify](https://github.com/cure53/DOMPurify) config. It is possible to override the options passed to DOMPurify by adding a `dompurifyConfig` key to the Mermaid options. This could potentially break the output of Mermaid so use this with c",
            "The Mermaid team takes the security of Mermaid and the applications that use Mermaid seriously. This page describes how to report any vulnerabilities you may find, and lists best practices to minimize the risk of introducing a vulnerability.",
            "Configuring DomPurify"
          ]
        },
        {
          "title": "Stored XSS in Mermaid when viewing Markdown files - GitLab",
          "url": "https://gitlab.com/gitlab-org/gitlab/-/issues/332528",
          "excerpts": [
            "You do this by updating the configuration in config.secure which is a list of parameters that are to be blocked. The default values are: [' ..."
          ]
        }
      ],
      "reasoning": "The field value defines a multi-level security configuration for Mermaid, detailing how interactivity is controlled through securityLevel and the behavior of each level. Excerpts describing the default security posture (the strict level) and its consequences—encoding HTML tags and disabling click functionality—directly substantiates the default behavior described in the field value. Excerpts outlining the antiscript level, which allows certain interactivity (URL links) while sanitizing scripts, corroborate the middle ground described in the field value. References that explicitly mention the default value and how to enable or set security levels—whether globally or per diagram—support the mechanism by which interactivity is configured, aligning with the field’s emphasis on deliberate configuration to enable interactive features. Additional excerpts that discuss DOMPurify and general security practices provide context for why such a securityLevel choice exists and how content sanitization is integral to safe interactivity. Taken together, these excerpts directly support the claimed description and options of the securityLevel configuration, its default behavior, and the way interactivity is controlled in Mermaid diagrams.",
      "confidence": "high"
    },
    {
      "field": "llm_failure_modes_and_mitigations.prompt_level_mitigations",
      "citations": [
        {
          "title": "Using Mermaid Diagrams 100x Better with Your Favorite AI / LLM App (Dev to article)",
          "url": "https://dev.to/yigit-konur/using-mermaid-diagrams-100x-better-with-your-favorite-ai-llm-app-3m1p",
          "excerpts": [
            "I use Mermaid diagrams constantly in my daily workflow. But honestly, most AI apps tend to mess them up when generating these diagrams. It doesn't matter if it's the smartest model out there or the simplest one—mistakes still happen. That's why having a rock-solid prompt is super important for getting things right.",
            "If you're curious, you can check out the full prompt on GitHub here: <https://gist.githubusercontent.com/yigitkonur/af07453dd812cd8a0b565fed62dd0f7d/raw/eec183bb6e9777d888e49870b4f994f957da979d/llm-mermaid.md>",
            "Phase 1: Input Ingestion & Contextual Analysis"
          ]
        },
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "```\ngraph TD\n    Q1[Question 1]\n    Q1 -->|oui| Q1.1[Question 1.1]\n    Q1 -->|non| Q1.2[Question 1.2]\n    Q1.1 -->|oui| Q1.1.1[Question 1.1.1]\n    Q1.1 -->|non| Q1.1.2[Question 1.1.2]\n    Q1.2 -->|oui| Q1.2.1[Question 1.2.1]\n    Q1.2 -->|non| Q1.2.2[Question 1.2.2]\n    Q1.2.1 -->|oui| Q1.2.11[Question 1.2.11]\n    Q1.2.1 -->|non| Q1.2.21[Question 1.2.21]\n    Q1.1.1 -->|signal| R[Result]\n    Q1.1.2 -->|signal| R\n    Q1.2.11 -->|signal| R\n    Q1.2.21 -->|signal| R\n    Q1.2.2 -->|signal| R\n```\n",
            "Parser error when used with mermaidAPI"
          ]
        },
        {
          "title": "Architecture Diagram error when declaring diagram level \" ...",
          "url": "https://github.com/mermaid-js/mermaid/issues/6162",
          "excerpts": [
            "Jan 2, 2025 — Using Mermaid Live Editor, an architecture-beta with a title gets this error message Diagram syntax error Error: Parsing failed: Expecting token of type ':' ..."
          ]
        }
      ],
      "reasoning": "The most relevant excerpt explicitly emphasizes the importance of a solid prompt when working with Mermaid diagrams in an AI/LLM context, highlighting that prompt quality significantly impacts accuracy and outcomes. This directly supports the field value’s focus on prompt-level mitigations to improve reliability. The excerpt mentioning a full prompt and a GitHub resource for the prompt (llm-mermaid.md) further solidifies the link to concrete prompt-level strategies and examples that can be used to enforce structured generation and error handling. The excerpt that outlines a focused phase named Input Ingestion & Contextual Analysis aligns with the idea of organizing the prompt workflow into stages, which is a core part of designing reliable prompts. Additional excerpts describing parser errors and Mermaid-specific problems provide necessary context for why prompt-level mitigations (e.g., error feedback loops, strict formatting) are valuable, even though they discuss downstream issues rather than prompt design per se. Together, these excerpts form a cohesive justification that a robust, multi-step, and well-documented prompting approach can mitigate parsing and diagram-generation errors, as outlined in the target field value (automatic repair loops, two-step generation, and strict formatting rules).",
      "confidence": "high"
    },
    {
      "field": "squarish_layout_strategies.layout_engine_guidance",
      "citations": [
        {
          "title": "Mermaid Layouts and Layout Options",
          "url": "https://mermaid.js.org/config/layouts.html",
          "excerpts": [
            "* **elk** : [ELK (Eclipse Layout Kernel)](https://www.eclipse.org/elk/)",
            "* **dagre** : Dagre layout for layered graphs",
            "You can specify the layout in your diagram's YAML config or initialization options. For example:",
            "You can specify the layout in your diagram's YAML config or initialization options. For example:",
            "## How to Use",
            "##### Code:"
          ]
        },
        {
          "title": "Mermaid Documentation - Diagram Syntax",
          "url": "https://mermaid.js.org/intro/syntax-reference.html",
          "excerpts": [
            "#### Customizing ELK Layout: [​]()\n\nWhen using the ELK layout, you can further refine the diagram’s configuration, such as how nodes are placed and whether parallel edges should be combined:\n\n* To combine parallel edges, use mergeEdges: true | false. * To configure node placement, use nodePlacementStrategy with the following options:\n      + SIMPLE\n      + NETWORK\\_SIMPLEX\n      + LINEAR\\_SEGMENTS\n      + BRANDES\\_KOEPF (def",
            "```\n---\nconfig:\n  layout: dagre\n  look: classic\n  theme: default\n---\n\nflowchart LR\nA[Start] --> B{Choose Path}\nB -->|Option 1| C[Path 1]\nB -->|Option 2| D[Path 2]\n```"
          ]
        },
        {
          "title": "Configuration - Mermaid Documentation",
          "url": "https://mermaid.js.org/config/configuration.html",
          "excerpts": [
            "##### Code:"
          ]
        },
        {
          "title": "Mermaid Theme Configuration",
          "url": "https://mermaid.js.org/config/theming.html",
          "excerpts": [
            "##### Code:",
            "##### Code:"
          ]
        }
      ],
      "reasoning": "The most directly relevant content identifies the available layout engines and their roles. It states that ELK is an advanced renderer designed for larger and more complex graphs and is used for adaptive rendering, which aligns with the goal of producing well-organized, compact, and potentially squarish diagrams. It also notes Dagre as the default layout, which confirms the baseline behavior. Supporting details show how to enable ELK through configuration/frontmatter, illustrating practical steps to switch renderers to achieve the desired diagram shape. Additional excerpts demonstrate that layout choices can be specified in YAML or frontmatter, indicating that users can control the engine via configuration, thereby impacting diagram geometry. These combined points directly support the finegrained field value’s guidance about choosing between renderers (Dagre vs ELK) and aiming for squarish, space-efficient layouts by leveraging ELK. The remaining excerpts provide supportive context about other layout options and how to apply configuration but do not introduce new renderer concepts beyond Dagre and ELK, so they are considered supportive but somewhat less central to the specific field value.",
      "confidence": "high"
    },
    {
      "field": "testing_and_evaluation_kit_design.canonical_tasks",
      "citations": [
        {
          "title": "Improving LLM Output Reliability with Structured Data Generation",
          "url": "https://www.matt-adams.co.uk/2025/02/12/structured-data-generation.html",
          "excerpts": [
            "I encountered this challenge while working on generating Mermaid diagrams with LLMs. Even though the models could understand the concept and content of what needed to be generated, they would often:",
            "* Produce invalid Mermaid syntax",
            "Better Error Handling: JSON parsing provides clear error messages and makes it easier to implement fallback mechanisms; Maintainability ... ... Mermaid diagram syntax or Gherkin test cases often leads to errors and inconsistencies. This post explores a pattern I've successfully used ...",
            "The Solution: A Two-Step Approach",
            "1. **Content Generation** : Have the model generate a structured JSON representation that focuses purely on the content and logic",
            "2. **Format Conversion** : Use code to convert this structured data into the desired final format",
            "Improving LLM Output Reliability with Structured Data Generation",
            "These issues weren’t unique to Mermaid - they’re common when asking LLMs to generate any output that requires strict syntax adherence."
          ]
        },
        {
          "title": "Using Mermaid Diagrams 100x Better with Your Favorite AI / LLM App (Dev to article)",
          "url": "https://dev.to/yigit-konur/using-mermaid-diagrams-100x-better-with-your-favorite-ai-llm-app-3m1p",
          "excerpts": [
            "Use these cues to determine the most probable diagram type. Prioritize explicit `type:` flags."
          ]
        },
        {
          "title": "Adding a New Diagram/Chart (Deprecated)",
          "url": "https://docs.mermaidchart.com/mermaid-oss/community/new-diagram-jison.html",
          "excerpts": [
            "Apr 11, 2025 — Note that the diagram type key does not have to be the same as the diagram keyword chosen for the grammar, but it is helpful if they are the ..."
          ]
        }
      ],
      "reasoning": "The fine-grained field value describes designing a canonical suite of standardized tasks for Mermaid diagrams, including multiple major diagram types and natural-language task prompts that exercise syntax and features. Excerpts that emphasize structured data generation to improve the reliability of Mermaid outputs and to separate content from formatting provide direct support for building such a suite: they argue for a two-step approach where the model first generates a structured JSON-like representation of content and then formats it into Mermaid syntax, which aligns with creating multiple standardized input tasks that exercise different diagram types. Explications about generating Mermaid diagrams with LLMs, improving reliability through structured data, and a two-step workflow directly connect to the concept of a canonical set of test tasks and descriptions designed to probe specific Mermaid features. Additional context about how to determine diagram types and prioritize type-specific cues reinforces the goal of organizing standardized tasks by diagram category (Flowchart, Sequence, ERD, etc.). References noting pitfalls such as invalid Mermaid syntax and the need for robust error handling further support the practical feasibility of maintaining a standardized task suite that can be validated for correctness and reliability. Altogether, the strongest support comes from passages advocating structured data generation to separate content from formatting, a two-step approach to produce reliable Mermaid output, and explicit guidance on designing tasks that exercise Mermaid features across diagram types.",
      "confidence": "medium"
    },
    {
      "field": "testing_and_evaluation_kit_design.objective_pass_fail_criteria",
      "citations": [
        {
          "title": "Improving LLM Output Reliability with Structured Data Generation",
          "url": "https://www.matt-adams.co.uk/2025/02/12/structured-data-generation.html",
          "excerpts": [
            "* Produce invalid Mermaid syntax",
            "These issues weren’t unique to Mermaid - they’re common when asking LLMs to generate any output that requires strict syntax adherence.",
            "Better Error Handling: JSON parsing provides clear error messages and makes it easier to implement fallback mechanisms; Maintainability ... ... Mermaid diagram syntax or Gherkin test cases often leads to errors and inconsistencies. This post explores a pattern I've successfully used ...",
            "The Solution: A Two-Step Approach",
            "1. **Content Generation** : Have the model generate a structured JSON representation that focuses purely on the content and logic",
            "2. **Format Conversion** : Use code to convert this structured data into the desired final format",
            "Improving LLM Output Reliability with Structured Data Generation",
            "This approach has significantly improved the reliability of the generated diagrams and made the code more maintainable."
          ]
        },
        {
          "title": "Adding a New Diagram/Chart (Deprecated)",
          "url": "https://docs.mermaidchart.com/mermaid-oss/community/new-diagram-jison.html",
          "excerpts": [
            "Apr 11, 2025 — Note that the diagram type key does not have to be the same as the diagram keyword chosen for the grammar, but it is helpful if they are the ...",
            "exports.parseError = function (err, hash) {\n  mermaid.parseError(err, hash);\n};",
            "The parser is also exposed in the mermaid api by calling:\n\n```\nconst parser = mermaid.getParser();\n```",
            "Apr 11, 2025 — Make sure that the parseError function for the parser is defined and calling mermaid.parseError . This way a common way of detecting parse ..."
          ]
        },
        {
          "title": "Using Mermaid Diagrams 100x Better with Your Favorite AI / LLM App (Dev to article)",
          "url": "https://dev.to/yigit-konur/using-mermaid-diagrams-100x-better-with-your-favorite-ai-llm-app-3m1p",
          "excerpts": [
            "Use these cues to determine the most probable diagram type. Prioritize explicit `type:` flags."
          ]
        }
      ],
      "reasoning": "The fine-grained field value specifies two concrete evaluation criteria for generated Mermaid outputs: (a) syntax validity tested by attempting to parse the Mermaid code with a parser and (b) a squarishness check derived from rendered SVG dimensions. Content that directly mentions Mermaid syntax, parsing, and error handling supports (a). For example, one excerpt explicitly notes that producing invalid Mermaid syntax is a known issue when using LLMs, which reinforces the need for a syntax-validation step. Another excerpt discusses using a Mermaid parser and a try/catch pattern to capture failures, which provides concrete implementation guidance for the syntax validity check. Additional excerpts describe parsing errors and exposing a parseError function, which further strengthens the mechanism by which syntax validity can be programmatically validated. There are also excerpts that outline a broader reliability pattern (two-step approach: generate structured content first, then format/convert to the final diagram) which supports the broader goal of ensuring robust diagram generation and can complement the syntax validity check. Finally, other excerpts highlight general Mermaid-related pitfalls and errors when relying on LLMs to generate diagrams, underscoring the importance of explicit error handling and validation in this domain.",
      "confidence": "medium"
    },
    {
      "field": "llm_failure_modes_and_mitigations.common_failure_modes",
      "citations": [
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "Parse error on line 1:↵graph TD    Q1[Question ↵-----^↵Expecting 'NODIR', 'DIR', got 'SPACE",
            "Parser error when used with mermaidAPI",
            "```\ngraph TD\n    Q1[Question 1]\n    Q1 -->|oui| Q1.1[Question 1.1]\n    Q1 -->|non| Q1.2[Question 1.2]\n    Q1.1 -->|oui| Q1.1.1[Question 1.1.1]\n    Q1.1 -->|non| Q1.1.2[Question 1.1.2]\n    Q1.2 -->|oui| Q1.2.1[Question 1.2.1]\n    Q1.2 -->|non| Q1.2.2[Question 1.2.2]\n    Q1.2.1 -->|oui| Q1.2.11[Question 1.2.11]\n    Q1.2.1 -->|non| Q1.2.21[Question 1.2.21]\n    Q1.1.1 -->|signal| R[Result]\n    Q1.1.2 -->|signal| R\n    Q1.2.11 -->|signal| R\n    Q1.2.21 -->|signal| R\n    Q1.2.2 -->|signal| R\n```\n"
          ]
        },
        {
          "title": "Architecture Diagram error when declaring diagram level \" ...",
          "url": "https://github.com/mermaid-js/mermaid/issues/6162",
          "excerpts": [
            "Jan 2, 2025 — Using Mermaid Live Editor, an architecture-beta with a title gets this error message Diagram syntax error Error: Parsing failed: Expecting token of type ':' ..."
          ]
        },
        {
          "title": "Using Mermaid Diagrams 100x Better with Your Favorite AI / LLM App (Dev to article)",
          "url": "https://dev.to/yigit-konur/using-mermaid-diagrams-100x-better-with-your-favorite-ai-llm-app-3m1p",
          "excerpts": [
            "I use Mermaid diagrams constantly in my daily workflow. But honestly, most AI apps tend to mess them up when generating these diagrams. It doesn't matter if it's the smartest model out there or the simplest one—mistakes still happen. That's why having a rock-solid prompt is super important for getting things right."
          ]
        }
      ],
      "reasoning": "The finegrained field value enumerates specific failure modes encountered when LLMs generate Mermaid diagrams, including incorrect token usage that leads to parse errors, failure to escape special characters, missing arrow types, and extraneous prose outside code blocks. The most directly relevant excerpts document concrete parse and parser errors seen in Mermaid usage, such as a parsed error example showing an incorrect token (Expecting 'SEMI', 'NEWLINE', ... got 'MINUS'), which directly illustrates incorrect token usage causing parsing failure. Additional excerpts report parser errors when Mermaid code is processed (e.g., 'Parser error when used with mermaidAPI'), and a specific architecture diagram case where a diagram-level issue yields a parsing error (Parsing failed: Expecting token of type ':'), all of which substantiate the described failure modes. Another excerpt discusses prompts and mitigations for improving Mermaid diagram generation in LLM workflows, matching the mitigation aspect of the field value by addressing how to guide the model to avoid these failures. The combination of concrete error examples and mitigation-oriented guidance coherently supports the field value about common LLM failure modes and how to mitigate them in Mermaid diagram generation.",
      "confidence": "high"
    },
    {
      "field": "squarish_layout_strategies.svg_attribute_patterns",
      "citations": [
        {
          "title": "preserveAspectRatio - MDN",
          "url": "https://developer.mozilla.org/en-US/docs/Web/SVG/Reference/Attribute/preserveAspectRatio",
          "excerpts": [
            "io\n\nThe **`preserveAspectRatio`** attribute indicates how an element with a viewBox providing a given [aspect ratio](/en-US/docs/Glossary/Aspect_ratio) must fit into a viewport with a different aspect ratio. The aspect ratio of an SVG image is defined by the [`viewBox`](/en-US/docs/Web/SVG/Reference/Attribute/viewBox) attribute.",
            "The alignment value indicates whether to force uniform scaling and, if so, the alignment method to use in case the aspect ratio of the [`viewBox`](/en-US/docs/Web/SVG/Reference/Attribute/viewBox) doesn't match the aspect ratio of the viewport. `xMidYMid` is the default value.",
            " isn't set, the `preserveAspectRatio` attribute has no effect on SVG's scaling (except in the case of the [`<image>`](/en-US/docs/Web/SVG/Reference/Element/image) element, where `preserveAspectRatio` behaves differently as described below).",
            "[`none`]",
            "`xMinYMin`",
            "`xMidYMid`",
            "`xMidYMid`",
            "`xMaxYMid`",
            "`xMaxYMid`"
          ]
        }
      ],
      "reasoning": "The relevant content explains that the preserveAspectRatio attribute determines how an element with a viewBox scales to fit a viewport, which directly informs how a diagram should scale inside its container. It also states that a viewBox defines the internal coordinate system and intrinsic aspect ratio, which is essential for understanding how the diagram’s geometry translates to the rendered SVG. Additionally, the width and height attributes on the SVG element define the viewport size, with common patterns like width=\"100%\" and omitted height, indicating reliance on external CSS to control sizing—this is key for achieving a square container behavior. The default preserveAspectRatio value is xMidYMid meet, which scales the diagram to be as large as possible while ensuring it is entirely visible within the container, preserving the diagram’s proportions and centering it, a behavior that aligns well with a square layout where the aim is to avoid distortion while keeping the whole diagram visible. Alternatives like slice would fill the container but crop parts of the diagram, and none would distort aspect ratio, both of which are important considerations when deciding how to render within a square area. These excerpts collectively support the field value’s emphasis on viewBox, width/height, and preserveAspectRatio as the core controls for square-container rendering, and they explicitly describe the default and alternative behaviors that influence squarish diagram presentation.",
      "confidence": "high"
    },
    {
      "field": "common_errors_and_fixes_cheatsheet.4",
      "citations": [
        {
          "title": "Mermaid Mermaid issue 4571 - ER diagram parse error with attribute starting with a number",
          "url": "https://github.com/mermaid-js/mermaid/issues/4571",
          "excerpts": [
            "        varchar 2fa_name",
            "        int 2fa_length",
            "        tinyint 2fa_userchange",
            "        tinyint enableCustomers",
            "        tinyint enableRouting"
          ]
        }
      ],
      "reasoning": "The field value asserts a parse error occurs when an attribute name begins with a number in an ER diagram, and it provides a concrete fix: rename the attribute to begin with a letter (for example, change 2fa_provider to two_fa_provider). The most directly supportive content is the set of excerpts that literally show attribute declarations with names starting with a digit (e.g., 'varchar 2fa_name', 'int 2fa_length', 'tinyint 2fa_userchange'). These lines exemplify the exact problematic pattern described by the field value. Additional excerpts titled around the same ER diagram parse error reinforce the context that such numeric-leading attributes cause syntax/parse issues in ER diagrams. Taken together, these excerpts corroborate the error pattern and the recommended renaming fix, with the explicit examples providing the strongest support for the field value. ",
      "confidence": "high"
    },
    {
      "field": "common_errors_and_fixes_cheatsheet.0",
      "citations": [
        {
          "title": "Mermaid Issue 6904 on GitHub",
          "url": "https://github.com/mermaid-js/mermaid/issues/6904",
          "excerpts": [
            "```\n\nBut the cause of the error is \"@\". I send above mermaid code and error report to ChatGPT and Claude but both of them are failed to fix it. They just tried to add \"SEMI\", \"NEWLINE\" that does not fix the error. By quote the label above diagram will be successfully rendered. I suggest make the error report more precise and easy to fix both for human and AI.",
            "'EOF', 'subgraph', 'end', 'acc_title', 'acc_descr', 'acc_descr_multiline_value', 'AMP', 'COLON', 'STYLE', 'LINKSTYLE', 'CLASSDEF', 'CLASS', 'CLICK', 'DOWN', 'DEFAULT', 'NUM', 'COMMA', 'NODE_STRING', 'BRKT', 'MINUS', 'MULT', 'UNICODE_TEXT', 'direction_tb', 'direction_bt', 'direction_rl', 'direction_lr', got 'LINK_ID'"
          ]
        },
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "Parse error on line 1:↵graph TD    Q1[Question ↵-----^↵Expecting 'NODIR', 'DIR', got 'SPACE"
          ]
        },
        {
          "title": "How to escape characters? · Issue #170 · mermaid-js ...",
          "url": "https://github.com/mermaid-js/mermaid/issues/170",
          "excerpts": [
            "Jun 9, 2015 — The answer is here: https://mermaid.js.org/syntax/flowchart.html#special-characters-that-break-syntax"
          ]
        },
        {
          "title": "Mermaid CLI - how do you escape characters?",
          "url": "https://stackoverflow.com/questions/28121525/mermaid-cli-how-do-you-escape-characters",
          "excerpts": [
            "Use quotation marks \"\" to enclose your text and escape special characters, e.g. in your example: graph TD question1{\"Gas tank less than 1/8?"
          ]
        },
        {
          "title": "Syntax error in text mermaid version 10.1.0 · Issue #4432",
          "url": "https://github.com/mermaid-js/mermaid/issues/4432",
          "excerpts": [
            "Apr 28, 2023 — It is quite easy to create something that will trigger the error, problem is not being able to track it down without trial and error. And that can be quite ..."
          ]
        },
        {
          "title": "mermaidjs/mermaid.cli - Parsing subgraph fails on brackets",
          "url": "https://github.com/mermaidjs/mermaid.cli/issues/68",
          "excerpts": [
            "Oct 23, 2019 — ... Error: Parse error on line 2: ...raph TBsubgraph BIG[better]A-->Bend ----------------------^ Expecting 'SEMI', 'NEWLINE', 'SPACE', 'EOF ..."
          ]
        }
      ],
      "reasoning": "The finegrained field value describes a parse error pattern in Mermaid where an unexpected identifier (often caused by an unquoted special character such as @) leads to a parse error like Parse error on line X: ... got 'LINK_ID', and it suggests a fix by quoting the problematic node text (for example, B[\"AuthController@che\"]). The most directly supportive excerpt explicitly identifies the root cause as the \"@\" character and discusses the need to quote the problematic text to fix the error, aligning with the described error pattern and solution. Supporting excerpts reference a parse error on a line and the exact token issue (LINK_ID), which corroborates the general error scenario and the specific symptom of a malformed identifier causing the parse failure. Additional excerpts discuss escaping problematic characters as a general remedy, which is consistent with the proposed fix of quoting or escaping in Mermaid syntax. The remaining excerpts touch on related parsing errors, mermaid issues, or escaping guidance, providing contextual support for understanding and mitigating these parse errors, though they are less directly connected to the exact error message pattern. Collectively, these excerpts map well to the field value’s claim about parse errors triggered by unquoted special characters and the recommended corrective approach of quoting the node text to resolve the issue.",
      "confidence": "medium"
    },
    {
      "field": "heuristics_for_weak_llms.strict_syntax_and_grammar",
      "citations": [
        {
          "title": "Improving LLM Output Reliability with Structured Data Generation",
          "url": "https://www.matt-adams.co.uk/2025/02/12/structured-data-generation.html",
          "excerpts": [
            "* Produce invalid Mermaid syntax",
            "Better Error Handling: JSON parsing provides clear error messages and makes it easier to implement fallback mechanisms; Maintainability ... ... Mermaid diagram syntax or Gherkin test cases often leads to errors and inconsistencies. This post explores a pattern I've successfully used ...",
            "I encountered this challenge while working on generating Mermaid diagrams with LLMs. Even though the models could understand the concept and content of what needed to be generated, they would often:",
            "2. **Format Conversion** : Use code to convert this structured data into the desired final format",
            "1. **Content Generation** : Have the model generate a structured JSON representation that focuses purely on the content and logic",
            "The Solution: A Two-Step Approach"
          ]
        },
        {
          "title": "Adding a New Diagram/Chart (Deprecated)",
          "url": "https://docs.mermaidchart.com/mermaid-oss/community/new-diagram-jison.html",
          "excerpts": [
            "Make sure that the `parseError` function for the parser is defined and calling `mermaid.parseError`. This way a common way of detecting parse errors is provided for the end-user.",
            "Apr 11, 2025 — Note that the diagram type key does not have to be the same as the diagram keyword chosen for the grammar, but it is helpful if they are the ..."
          ]
        },
        {
          "title": "Using Mermaid Diagrams 100x Better with Your Favorite AI / LLM App (Dev to article)",
          "url": "https://dev.to/yigit-konur/using-mermaid-diagrams-100x-better-with-your-favorite-ai-llm-app-3m1p",
          "excerpts": [
            "If you're curious, you can check out the full prompt on GitHub here: <https://gist.githubusercontent.com/yigitkonur/af07453dd812cd8a0b565fed62dd0f7d/raw/eec183bb6e9777d888e49870b4f994f957da979d/llm-mermaid.md>"
          ]
        },
        {
          "title": "Structured output support for the Prompt API | AI on Chrome",
          "url": "https://developer.chrome.com/docs/ai/structured-output-for-prompt-api",
          "excerpts": [
            "May 13, 2025 — The Prompt API lets you specify a JSON output format of the model's response by passing a JSON Schema to the LanguageModel.prompt() and LanguageModel. ..."
          ]
        },
        {
          "title": "Elements of a Prompt - Prompt Engineering Guide",
          "url": "https://www.promptingguide.ai/introduction/elements",
          "excerpts": [
            "A prompt contains any of the following elements: Instruction - a specific task or instruction you want the model to perform, Context - external information or ..."
          ]
        },
        {
          "title": "Prompt Engineering via Prompt Patterns — Visualization Generator ...",
          "url": "https://medium.com/@a1guy/prompt-engineering-via-prompt-patterns-visualization-generator-pattern-e0cfb926aae1",
          "excerpts": [
            "This article described both the tools and how to use the natural language abilities of LLMs like ChatGPT to create images using the visualization generation ..."
          ]
        }
      ],
      "reasoning": "To enforce a minimal and strict Mermaid grammar, the most directly relevant information comes from excerpts that discuss invalid Mermaid syntax and how to detect or prevent it. An explicit note that one should avoid producing invalid Mermaid syntax highlights the need for strict rules and checking. Additionally, guidance on parser errors and explicit parseError handling demonstrates how to ensure syntax correctness and actionable feedback when the output diverges from the grammar. The Mermaid-related documentation and prompts about diagrams provide context for how prompts should instruct the model. Broad discussions about structured data generation and error handling reinforce the broader principle of reliability and clarity in outputs, which supports the need for a well-defined grammar, even if they do not specify every rule in your finegrained field value. The remaining prompts about general prompt elements or visualization patterns offer peripheral support but do not directly address the exact Mermaid syntax constraints (type declaration, inline/line break handling, and quoting). In sum, the most compelling support comes from explicit warnings about invalid Mermaid syntax, and explicit parseError handling, followed by general prompt guidance and structured output practices that align with enforcing correctness. Quotes from relevant excerpts illustrate the alignment: one excerpt warns that the model can produce invalid Mermaid syntax and thus necessitates better controls; another excerpt explains that the parser should expose clear parseError messages to identify and recover from syntax issues; another describes the need for error handling and structured formats which ultimately facilitate enforcing grammar. The remaining excerpts offer supportive context about structured data generation and prompt design but do not directly specify the exact grammar rules requested.",
      "confidence": "medium"
    },
    {
      "field": "common_errors_and_fixes_cheatsheet.6",
      "citations": [
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "Parse error on line 1:↵graph TD    Q1[Question ↵-----^↵Expecting 'NODIR', 'DIR', got 'SPACE",
            "```\ngraph TD\n    Q1[Question 1]\n    Q1 -->|oui| Q1.1[Question 1.1]\n    Q1 -->|non| Q1.2[Question 1.2]\n    Q1.1 -->|oui| Q1.1.1[Question 1.1.1]\n    Q1.1 -->|non| Q1.1.2[Question 1.1.2]\n    Q1.2 -->|oui| Q1.2.1[Question 1.2.1]\n    Q1.2 -->|non| Q1.2.2[Question 1.2.2]\n    Q1.2.1 -->|oui| Q1.2.11[Question 1.2.11]\n    Q1.2.1 -->|non| Q1.2.21[Question 1.2.21]\n    Q1.1.1 -->|signal| R[Result]\n    Q1.1.2 -->|signal| R\n    Q1.2.11 -->|signal| R\n    Q1.2.21 -->|signal| R\n    Q1.2.2 -->|signal| R\n```\n"
          ]
        },
        {
          "title": "mermaidjs/mermaid.cli - Parsing subgraph fails on brackets",
          "url": "https://github.com/mermaidjs/mermaid.cli/issues/68",
          "excerpts": [
            "Oct 23, 2019 — ... Error: Parse error on line 2: ...raph TBsubgraph BIG[better]A-->Bend ----------------------^ Expecting 'SEMI', 'NEWLINE', 'SPACE', 'EOF ..."
          ]
        }
      ],
      "reasoning": "The field value describes a specific Parse Error in Mermaid diagrams caused by an unexpected newline character within an arrow definition, along with a suggested fix of re-typing the entire affected line. An excerpt that explicitly mentions a parse error on line 1 with an error message about expecting specific tokens and encountering a space corroborates the general class of parse errors in Mermaid syntax and aligns with line-numbered error reporting. Another excerpt provides a concrete multi-line Mermaid graph snippet, illustrating how multi-line or misformatted arrow definitions can lead to parsing difficulties, which supports the notion that malformed or awkward line breaks in arrow definitions contribute to parse failures. A third excerpt explicitly cites a parse error on line 2 in a Mermaid context, reinforcing the pattern of line-based parse issues in diagrams. Taken together, these excerpts directly illustrate the phenomenon described in the field value (parse errors related to arrow definitions and line/newline issues in Mermaid diagrams) and support the proposed cause-and-fix narrative (newline/formatting problems causing errors, with a manual re-typing fix).",
      "confidence": "medium"
    },
    {
      "field": "common_errors_and_fixes_cheatsheet.5",
      "citations": [
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "Parse error on line 1:↵graph TD    Q1[Question ↵-----^↵Expecting 'NODIR', 'DIR', got 'SPACE",
            "```\ngraph TD\n    Q1[Question 1]\n    Q1 -->|oui| Q1.1[Question 1.1]\n    Q1 -->|non| Q1.2[Question 1.2]\n    Q1.1 -->|oui| Q1.1.1[Question 1.1.1]\n    Q1.1 -->|non| Q1.1.2[Question 1.1.2]\n    Q1.2 -->|oui| Q1.2.1[Question 1.2.1]\n    Q1.2 -->|non| Q1.2.2[Question 1.2.2]\n    Q1.2.1 -->|oui| Q1.2.11[Question 1.2.11]\n    Q1.2.1 -->|non| Q1.2.21[Question 1.2.21]\n    Q1.1.1 -->|signal| R[Result]\n    Q1.1.2 -->|signal| R\n    Q1.2.11 -->|signal| R\n    Q1.2.21 -->|signal| R\n    Q1.2.2 -->|signal| R\n```\n"
          ]
        },
        {
          "title": "mermaidjs/mermaid.cli - Parsing subgraph fails on brackets",
          "url": "https://github.com/mermaidjs/mermaid.cli/issues/68",
          "excerpts": [
            "Oct 23, 2019 — ... Error: Parse error on line 2: ...raph TBsubgraph BIG[better]A-->Bend ----------------------^ Expecting 'SEMI', 'NEWLINE', 'SPACE', 'EOF ..."
          ]
        },
        {
          "title": "Mermaid Mermaid issue 4571 - ER diagram parse error with attribute starting with a number",
          "url": "https://github.com/mermaid-js/mermaid/issues/4571",
          "excerpts": [
            "        varchar 2fa_name",
            "        int 2fa_length",
            "        tinyint 2fa_userchange",
            "        tinyint enableCustomers",
            "        tinyint enableRouting"
          ]
        },
        {
          "title": "Mermaid Issue 6904 on GitHub",
          "url": "https://github.com/mermaid-js/mermaid/issues/6904",
          "excerpts": [
            "'EOF', 'subgraph', 'end', 'acc_title', 'acc_descr', 'acc_descr_multiline_value', 'AMP', 'COLON', 'STYLE', 'LINKSTYLE', 'CLASSDEF', 'CLASS', 'CLICK', 'DOWN', 'DEFAULT', 'NUM', 'COMMA', 'NODE_STRING', 'BRKT', 'MINUS', 'MULT', 'UNICODE_TEXT', 'direction_tb', 'direction_bt', 'direction_rl', 'direction_lr', got 'LINK_ID'",
            "```\n\nBut the cause of the error is \"@\". I send above mermaid code and error report to ChatGPT and Claude but both of them are failed to fix it. They just tried to add \"SEMI\", \"NEWLINE\" that does not fix the error. By quote the label above diagram will be successfully rendered. I suggest make the error report more precise and easy to fix both for human and AI."
          ]
        }
      ],
      "reasoning": "The field value states a parse error pattern where a missing newline or improper separator between two consecutive entity definitions causes the error, with the specific message about expecting an attribute word but encountering a block stop. Excerpts that report a parse error on a Mermaid diagram and explicitly mention issues like where the parser expects a newline, a semicolon, or a separator between entities are directly aligned with this. For example, a parse error on line 1 in a Mermaid graph shows an unexpected SPACE where a directional or node/attribute construct was expected, illustrating how a stray space or missing delimiter can derail parsing. This directly supports the idea that a missing newline or separator can trigger the described error pattern. Other excerpts describe similar parse failures in the context of ER diagrams or subgraphs, often citing that the error arises from incorrect token boundaries (such as attributes starting with a number) or from the parser expecting certain tokens (like SEMI or NEWLINE) that were absent. These examples reinforce the connection between structural delimiters (newlines, semicolons, or separators) and parse failures, thereby supporting the notion that the root cause is the lack of proper line breaks or separation between entity blocks. The excerpt that explicitly references the parser expecting a SEMI or NEWLINE and notes the need for these delimiters between entity definitions provides a concrete, near-equivalent illustration of the exact mechanism described by the field value. Taken together, these excerpts collectively illustrate the problem space around missing separators and newline handling in Mermaid ER diagrams and related graph structures, aligning well with the finegrained field value’s claim about the cause (missing newline or proper separator) and the prescribed fix (ensure each entity is on its own line or properly separated by newlines).",
      "confidence": "high"
    },
    {
      "field": "diagram_specific_prompt_templates.0.diagram_type",
      "citations": [
        {
          "title": "LLM + Mermaid: How Modern Teams Create UML Diagrams ...",
          "url": "https://mike-vincent.medium.com/llm-mermaid-how-modern-teams-create-uml-diagrams-without-lucidchart-e54c56350804",
          "excerpts": [
            "flowchart TD  "
          ]
        }
      ],
      "reasoning": "The targeted field value is Flowchart, which describes the kind of diagram. One excerpt explicitly includes the phrase flowchart TD, which is a canonical Mermaid syntax for a flowchart diagram. This direct mention demonstrates the diagram type in use within the Mermaid context described by the excerpt. Other excerpts discuss Mermaid diagrams in general or refer to UML/ER diagrams, but they do not provide explicit evidence about the specific diagram type being Flowchart. Therefore, the excerpt containing the explicit flowchart syntax is the primary (and strongest) support for the field value, with surrounding Mermaid-diagram discussions offering contextual relevance but not directly asserting the diagram type.",
      "confidence": "high"
    },
    {
      "field": "common_errors_and_fixes_cheatsheet.8",
      "citations": [
        {
          "title": "How to escape characters? · Issue #170 · mermaid-js ...",
          "url": "https://github.com/mermaid-js/mermaid/issues/170",
          "excerpts": [
            "Jun 9, 2015 — The answer is here: https://mermaid.js.org/syntax/flowchart.html#special-characters-that-break-syntax",
            "Jun 9, 2015 — Could someone post a new mermaid.live link with escaping @, ~, \", (, and )?. React with 12"
          ]
        },
        {
          "title": "Syntax error in text mermaid version 10.1.0 · Issue #4432",
          "url": "https://github.com/mermaid-js/mermaid/issues/4432",
          "excerpts": [
            "Apr 28, 2023 — It is quite easy to create something that will trigger the error, problem is not being able to track it down without trial and error. And that can be quite ..."
          ]
        },
        {
          "title": "mermaidjs/mermaid.cli - Parsing subgraph fails on brackets",
          "url": "https://github.com/mermaidjs/mermaid.cli/issues/68",
          "excerpts": [
            "Oct 23, 2019 — ... Error: Parse error on line 2: ...raph TBsubgraph BIG[better]A-->Bend ----------------------^ Expecting 'SEMI', 'NEWLINE', 'SPACE', 'EOF ..."
          ]
        },
        {
          "title": "Mermaid Issue 6904 on GitHub",
          "url": "https://github.com/mermaid-js/mermaid/issues/6904",
          "excerpts": [
            "```\n\nBut the cause of the error is \"@\". I send above mermaid code and error report to ChatGPT and Claude but both of them are failed to fix it. They just tried to add \"SEMI\", \"NEWLINE\" that does not fix the error. By quote the label above diagram will be successfully rendered. I suggest make the error report more precise and easy to fix both for human and AI."
          ]
        }
      ],
      "reasoning": "The finegrained field value identifies a lexical error caused by invisible characters (such as non-breaking spaces) and prescribes a fix that involves deleting and retyping the problematic line to avoid copy-paste artifacts. Excerpts that focus on escaping characters and handling special characters map well to this concern, illustrating that lexical/syntactic issues often arise from problematic characters or escaping rules. Specifically, the discussion on escaping characters demonstrates how certain characters or sequences can break syntax, which is conceptually aligned with a lexical error caused by hidden characters. The excerpts that describe general parse errors or syntax-related failures (including examples where the diagram code fails to parse due to unusual characters or formatting) provide contextual support that such low-level text issues can lead to errors during interpretation. The excerpt that explicitly addresses escaping characters and the one that discusses escaping problematic characters offer the closest, directly relevant support to the lexical-error scenario, while other parse-error references corroborate that similar low-level input problems are common sources of failure. Together, they collectively support the idea that invisible or non-standard characters lead to lexical errors and that retyping without copy-paste can mitigate the issue.",
      "confidence": "medium"
    },
    {
      "field": "css_svg_wrapper_snippets.0.technique_name",
      "citations": [
        {
          "title": "CSS aspect-ratio (MDN)",
          "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio",
          "excerpts": [
            "The **`aspect-ratio`** [CSS](/en-US/docs/Web/CSS) property allows you to define the desired width-to-height ratio of an element's box. This means that even if the parent container or viewport size changes, the browser will adjust the element's dimensions to maintain the specified width-to-height ratio.",
            "img {",
            "img {",
            "  aspect-ratio: 3/2 auto;",
            "  aspect-ratio: 3/2 auto;",
            "css\n\n```\ndiv {\n  width: 100px;\n  height: auto;\n}\ndiv:nth-child(1) {\n  aspect-ratio: 1/1;\n}\ndiv:nth-child(2) {\n  aspect-ratio: 0.5;\n}\ndiv:nth-child(3) {\n  aspect-ratio: 1;\n}\ndiv:nth-child(4) {\n  aspect-ratio: 1/0.5;\n}\ndiv:nth-child(5) {\n  aspect-ratio: 16/9;\n}\n```\n\n",
            "```",
            "```",
            "```",
            "```",
            "```\ndiv {\n  display: inline-flex;\n  background-color: lime;\n  justify-content: center;\n}\n```"
          ]
        },
        {
          "title": "Flowcharts – Basic Syntax",
          "url": "https://docs.mermaidchart.com/mermaid-oss/syntax/flowchart.html",
          "excerpts": [
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Directives Documentation",
          "url": "https://docs.mermaidchart.com/mermaid-oss/config/directives.html",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Documentation - Diagram Syntax",
          "url": "https://mermaid.js.org/intro/syntax-reference.html",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "LLM + Mermaid: How Modern Teams Create UML Diagrams ...",
          "url": "https://mike-vincent.medium.com/llm-mermaid-how-modern-teams-create-uml-diagrams-without-lucidchart-e54c56350804",
          "excerpts": [
            "```",
            "```",
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Can I control the direction of flowcharts in Mermaid? - Stack Overflow",
          "url": "https://stackoverflow.com/questions/66631182/can-i-control-the-direction-of-flowcharts-in-mermaid",
          "excerpts": [
            "```",
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Let the user decide the size and alignment of mermaid diagrams",
          "url": "https://forum.obsidian.md/t/let-the-user-decide-the-size-and-alignment-of-mermaid-diagrams/7019",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Config Documentation",
          "url": "https://mermaid.js.org/config/schema-docs/config.html",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Havelsan's Revenue in 2024",
          "url": "https://github.com/RooCodeInc/Roo-Code/issues/6712",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid diagrams and automatic repair (GenAIScript blog)",
          "url": "https://microsoft.github.io/genaiscript/blog/mermaids/",
          "excerpts": [
            "```"
          ]
        },
        {
          "title": "Mermaid Mermaid issue 4571 - ER diagram parse error with attribute starting with a number",
          "url": "https://github.com/mermaid-js/mermaid/issues/4571",
          "excerpts": [
            "```"
          ]
        },
        {
          "title": "Flowchart: Add inheritDir option to make subgraphs inherit global ...",
          "url": "https://github.com/mermaid-js/mermaid/issues/6492",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Support specifying that two nodes should be at the same level/rank",
          "url": "https://github.com/mermaid-js/mermaid/issues/3723",
          "excerpts": [
            "```",
            "```"
          ]
        }
      ],
      "reasoning": "The target field value, Modern CSS aspect-ratio Property, is directly described by excerpts that define the aspect-ratio property and show how it is applied in CSS. The most relevant excerpt explicitly states the property’s purpose: defining the width-to-height ratio so the browser preserves the specified ratio as containers resize. This directly supports the notion of a modern CSS aspect-ratio property as a technique. Additional highly relevant excerpts provide concrete syntax and examples, such as setting aspect-ratio to specific values (for example, 1/1, 0.5, or 16/9) and demonstrating how different selectors apply the property in real CSS rules. Those examples reinforce understanding of how the property is used in practice and corroborate the concept of a modern CSS aspect-ratio property. Other excerpts also acknowledge the broader MDN documentation context for aspect-ratio, including example blocks or related CSS rules (for instance, usage with image elements or code blocks demonstrating syntax), which further support the identification of aspect-ratio as the modern CSS technique in question. The grouping thus converges on a clear understanding that the fine-grained field value corresponds to the general concept and practical usage of the CSS aspect-ratio property in modern web styling.",
      "confidence": "high"
    },
    {
      "field": "common_errors_and_fixes_cheatsheet.7",
      "citations": [
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "Parse error on line 1:↵graph TD    Q1[Question ↵-----^↵Expecting 'NODIR', 'DIR', got 'SPACE",
            "```\ngraph TD\n    Q1[Question 1]\n    Q1 -->|oui| Q1.1[Question 1.1]\n    Q1 -->|non| Q1.2[Question 1.2]\n    Q1.1 -->|oui| Q1.1.1[Question 1.1.1]\n    Q1.1 -->|non| Q1.1.2[Question 1.1.2]\n    Q1.2 -->|oui| Q1.2.1[Question 1.2.1]\n    Q1.2 -->|non| Q1.2.2[Question 1.2.2]\n    Q1.2.1 -->|oui| Q1.2.11[Question 1.2.11]\n    Q1.2.1 -->|non| Q1.2.21[Question 1.2.21]\n    Q1.1.1 -->|signal| R[Result]\n    Q1.1.2 -->|signal| R\n    Q1.2.11 -->|signal| R\n    Q1.2.21 -->|signal| R\n    Q1.2.2 -->|signal| R\n```\n"
          ]
        },
        {
          "title": "Syntax error in text mermaid version 10.1.0 · Issue #4432",
          "url": "https://github.com/mermaid-js/mermaid/issues/4432",
          "excerpts": [
            "Apr 28, 2023 — It is quite easy to create something that will trigger the error, problem is not being able to track it down without trial and error. And that can be quite ..."
          ]
        },
        {
          "title": "mermaidjs/mermaid.cli - Parsing subgraph fails on brackets",
          "url": "https://github.com/mermaidjs/mermaid.cli/issues/68",
          "excerpts": [
            "Oct 23, 2019 — ... Error: Parse error on line 2: ...raph TBsubgraph BIG[better]A-->Bend ----------------------^ Expecting 'SEMI', 'NEWLINE', 'SPACE', 'EOF ..."
          ]
        },
        {
          "title": "Mermaid Issue 6904 on GitHub",
          "url": "https://github.com/mermaid-js/mermaid/issues/6904",
          "excerpts": [
            "'EOF', 'subgraph', 'end', 'acc_title', 'acc_descr', 'acc_descr_multiline_value', 'AMP', 'COLON', 'STYLE', 'LINKSTYLE', 'CLASSDEF', 'CLASS', 'CLICK', 'DOWN', 'DEFAULT', 'NUM', 'COMMA', 'NODE_STRING', 'BRKT', 'MINUS', 'MULT', 'UNICODE_TEXT', 'direction_tb', 'direction_bt', 'direction_rl', 'direction_lr', got 'LINK_ID'",
            "```\n\nBut the cause of the error is \"@\". I send above mermaid code and error report to ChatGPT and Claude but both of them are failed to fix it. They just tried to add \"SEMI\", \"NEWLINE\" that does not fix the error. By quote the label above diagram will be successfully rendered. I suggest make the error report more precise and easy to fix both for human and AI."
          ]
        },
        {
          "title": "Mermaid CLI - how do you escape characters?",
          "url": "https://stackoverflow.com/questions/28121525/mermaid-cli-how-do-you-escape-characters",
          "excerpts": [
            "Use quotation marks \"\" to enclose your text and escape special characters, e.g. in your example: graph TD question1{\"Gas tank less than 1/8?"
          ]
        }
      ],
      "reasoning": "The most directly relevant content describes explicit parse errors encountered while parsing Mermaid diagrams, including messages about what the parser expects and where it fails. For example, one excerpt reports a parse error on line 1 with a specific expectation failure, showing a mismatch between the input and what the parser needs (such as expecting directional or node-related tokens but encountering a space). This aligns with a Parse Error category and highlights the mismatch between the diagram syntax and the parser’s expectations. Another excerpt provides a concrete Mermaid code sample accompanied by a parse failure, illustrating how the diagram text triggers the error when structured in a particular way, which helps explain the error pattern in the field value that mentions a pattern like expecting certain tokens and getting an alternative token. Additional excerpts discuss parse errors in related Mermaid scenarios (ER diagram attributes starting with a number, bracket-related parsing failures, and subgraph parsing issues). These collectively support the notion that Mermaid parsing errors can arise from syntax edge cases, unsupported features in a given Mermaid version, or structural elements like titles, which ties to the proposed cause-and-fix guidance in the field value, such as removing a problematic title line or addressing feature-compatibility. A further excerpt notes that error reports can be made more precise to facilitate fixes, which resonates with the idea of diagnosing and documenting the exact parse failure and its context. Another excerpt mentions escaping characters as a source of errors, which, while not the exact pattern, is a common contributor to parse failures in Mermaid, reinforcing the general theme of syntax/character-level issues that can trigger similar parse errors. Taken together, these excerpts directly illuminate the nature of parse errors in Mermaid diagrams and practical debugging steps, supporting the field value’s emphasis on error category, probable causes, and a concrete path to fix such issues.",
      "confidence": "medium"
    },
    {
      "field": "heuristics_for_weak_llms.conservative_feature_set",
      "citations": [
        {
          "title": "Improving LLM Output Reliability with Structured Data Generation",
          "url": "https://www.matt-adams.co.uk/2025/02/12/structured-data-generation.html",
          "excerpts": [
            "* Produce invalid Mermaid syntax",
            "Better Error Handling: JSON parsing provides clear error messages and makes it easier to implement fallback mechanisms; Maintainability ... ... Mermaid diagram syntax or Gherkin test cases often leads to errors and inconsistencies. This post explores a pattern I've successfully used ...",
            "I encountered this challenge while working on generating Mermaid diagrams with LLMs. Even though the models could understand the concept and content of what needed to be generated, they would often:",
            "1. **Content Generation** : Have the model generate a structured JSON representation that focuses purely on the content and logic",
            "2. **Format Conversion** : Use code to convert this structured data into the desired final format",
            "The Solution: A Two-Step Approach"
          ]
        },
        {
          "title": "Adding a New Diagram/Chart (Deprecated)",
          "url": "https://docs.mermaidchart.com/mermaid-oss/community/new-diagram-jison.html",
          "excerpts": [
            "Make sure that the `parseError` function for the parser is defined and calling `mermaid.parseError`. This way a common way of detecting parse errors is provided for the end-user.",
            "Apr 11, 2025 — Note that the diagram type key does not have to be the same as the diagram keyword chosen for the grammar, but it is helpful if they are the ..."
          ]
        },
        {
          "title": "Using Mermaid Diagrams 100x Better with Your Favorite AI / LLM App (Dev to article)",
          "url": "https://dev.to/yigit-konur/using-mermaid-diagrams-100x-better-with-your-favorite-ai-llm-app-3m1p",
          "excerpts": [
            "If you're curious, you can check out the full prompt on GitHub here: <https://gist.githubusercontent.com/yigitkonur/af07453dd812cd8a0b565fed62dd0f7d/raw/eec183bb6e9777d888e49870b4f994f957da979d/llm-mermaid.md>"
          ]
        },
        {
          "title": "Prompt Engineering via Prompt Patterns — Visualization Generator ...",
          "url": "https://medium.com/@a1guy/prompt-engineering-via-prompt-patterns-visualization-generator-pattern-e0cfb926aae1",
          "excerpts": [
            "This article described both the tools and how to use the natural language abilities of LLMs like ChatGPT to create images using the visualization generation ..."
          ]
        },
        {
          "title": "Elements of a Prompt - Prompt Engineering Guide",
          "url": "https://www.promptingguide.ai/introduction/elements",
          "excerpts": [
            "A prompt contains any of the following elements: Instruction - a specific task or instruction you want the model to perform, Context - external information or ..."
          ]
        },
        {
          "title": "Structured output support for the Prompt API | AI on Chrome",
          "url": "https://developer.chrome.com/docs/ai/structured-output-for-prompt-api",
          "excerpts": [
            "May 13, 2025 — The Prompt API lets you specify a JSON output format of the model's response by passing a JSON Schema to the LanguageModel.prompt() and LanguageModel. ..."
          ]
        }
      ],
      "reasoning": "The finegrained field value specifies an explicit set of forbidden patterns to prevent parsing errors, including not using unquoted or lowercase 'end' as a node label, avoiding the pipe character in identifiers, careful handling of special edge types in links, and avoiding overly complex nested shapes without quotes. Content that directly addresses the risk of parsing errors in Mermaid diagrams and outlines concrete mitigation strategies is most supportive. The discussion about producing invalid Mermaid syntax is a direct warning of what to avoid, which aligns with the idea of a forbidden list. Clear error messaging and robust parsing guidance reinforce the need for explicit constraints and predictable outputs, matching the intent of forbidding problematic patterns. Additional material about structuring data, validating JSON, and a two-step approach to generation offers practical avenues to enforce reliability and constraint adherence, though they do not enumerate the exact forbidden items themselves. Together, these excerpts support the theme of implementing explicit prohibitions and error-aware guidance to reduce parsing failures in LLM-generated Mermaid content.",
      "confidence": "medium"
    },
    {
      "field": "common_errors_and_fixes_cheatsheet.1",
      "citations": [
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "Parse error on line 1:↵graph TD    Q1[Question ↵-----^↵Expecting 'NODIR', 'DIR', got 'SPACE",
            "```\ngraph TD\n    Q1[Question 1]\n    Q1 -->|oui| Q1.1[Question 1.1]\n    Q1 -->|non| Q1.2[Question 1.2]\n    Q1.1 -->|oui| Q1.1.1[Question 1.1.1]\n    Q1.1 -->|non| Q1.1.2[Question 1.1.2]\n    Q1.2 -->|oui| Q1.2.1[Question 1.2.1]\n    Q1.2 -->|non| Q1.2.2[Question 1.2.2]\n    Q1.2.1 -->|oui| Q1.2.11[Question 1.2.11]\n    Q1.2.1 -->|non| Q1.2.21[Question 1.2.21]\n    Q1.1.1 -->|signal| R[Result]\n    Q1.1.2 -->|signal| R\n    Q1.2.11 -->|signal| R\n    Q1.2.21 -->|signal| R\n    Q1.2.2 -->|signal| R\n```\n"
          ]
        },
        {
          "title": "mermaidjs/mermaid.cli - Parsing subgraph fails on brackets",
          "url": "https://github.com/mermaidjs/mermaid.cli/issues/68",
          "excerpts": [
            "Oct 23, 2019 — ... Error: Parse error on line 2: ...raph TBsubgraph BIG[better]A-->Bend ----------------------^ Expecting 'SEMI', 'NEWLINE', 'SPACE', 'EOF ..."
          ]
        },
        {
          "title": "Syntax error in text mermaid version 10.1.0 · Issue #4432",
          "url": "https://github.com/mermaid-js/mermaid/issues/4432",
          "excerpts": [
            "Apr 28, 2023 — It is quite easy to create something that will trigger the error, problem is not being able to track it down without trial and error. And that can be quite ..."
          ]
        },
        {
          "title": "Mermaid CLI - how do you escape characters?",
          "url": "https://stackoverflow.com/questions/28121525/mermaid-cli-how-do-you-escape-characters",
          "excerpts": [
            "Use quotation marks \"\" to enclose your text and escape special characters, e.g. in your example: graph TD question1{\"Gas tank less than 1/8?"
          ]
        },
        {
          "title": "How to escape characters? · Issue #170 · mermaid-js ...",
          "url": "https://github.com/mermaid-js/mermaid/issues/170",
          "excerpts": [
            "Jun 9, 2015 — Could someone post a new mermaid.live link with escaping @, ~, \", (, and )?. React with 12",
            "Jun 9, 2015 — The answer is here: https://mermaid.js.org/syntax/flowchart.html#special-characters-that-break-syntax"
          ]
        },
        {
          "title": "Mermaid Issue 6904 on GitHub",
          "url": "https://github.com/mermaid-js/mermaid/issues/6904",
          "excerpts": [
            "'EOF', 'subgraph', 'end', 'acc_title', 'acc_descr', 'acc_descr_multiline_value', 'AMP', 'COLON', 'STYLE', 'LINKSTYLE', 'CLASSDEF', 'CLASS', 'CLICK', 'DOWN', 'DEFAULT', 'NUM', 'COMMA', 'NODE_STRING', 'BRKT', 'MINUS', 'MULT', 'UNICODE_TEXT', 'direction_tb', 'direction_bt', 'direction_rl', 'direction_lr', got 'LINK_ID'",
            "```\n\nBut the cause of the error is \"@\". I send above mermaid code and error report to ChatGPT and Claude but both of them are failed to fix it. They just tried to add \"SEMI\", \"NEWLINE\" that does not fix the error. By quote the label above diagram will be successfully rendered. I suggest make the error report more precise and easy to fix both for human and AI."
          ]
        }
      ],
      "reasoning": "The most relevant excerpt directly documents a parse error scenario in Mermaid, showing a parse error on line 1 with a graph declaration and a failure when encountering unexpected tokens, which aligns with the described issue of a problematic character in an identifier or diagram syntax. A closely related excerpt discusses a parse error in a subgraph context, illustrating how specific subgraph syntax can trigger parsing failures, which is highly pertinent to the idea of a pipe character in a subgraph identifier. Additional excerpts explicitly mention general syntax errors in Mermaid diagrams, reinforcing the broader pattern of parse-related failures that the fine-grained field value exemplifies. Further support comes from sections that address escaping special characters in Mermaid to avoid syntax errors, which logically connects to the proposed cause (a problematic character in identifiers) and its fixes. The remaining excerpts provide context about Mermaid errors and how users report/resolve them, supporting the overall theme of parse-time failures but with less direct alignment to the exact pipe-in-subgraph scenario. Collectively, these excerpts corroborate that Mermaid parse errors can arise from problematic characters or syntax in diagram definitions and that escaping or changing identifiers is a typical corrective approach.",
      "confidence": "high"
    },
    {
      "field": "common_errors_and_fixes_cheatsheet.3",
      "citations": [
        {
          "title": "Syntax error in text mermaid version 10.1.0 · Issue #4432",
          "url": "https://github.com/mermaid-js/mermaid/issues/4432",
          "excerpts": [
            "Apr 28, 2023 — It is quite easy to create something that will trigger the error, problem is not being able to track it down without trial and error. And that can be quite ..."
          ]
        },
        {
          "title": "mermaidjs/mermaid.cli - Parsing subgraph fails on brackets",
          "url": "https://github.com/mermaidjs/mermaid.cli/issues/68",
          "excerpts": [
            "Oct 23, 2019 — ... Error: Parse error on line 2: ...raph TBsubgraph BIG[better]A-->Bend ----------------------^ Expecting 'SEMI', 'NEWLINE', 'SPACE', 'EOF ..."
          ]
        },
        {
          "title": "Mermaid Mermaid issue 4571 - ER diagram parse error with attribute starting with a number",
          "url": "https://github.com/mermaid-js/mermaid/issues/4571",
          "excerpts": [
            "        varchar 2fa_name",
            "        int 2fa_length",
            "        tinyint 2fa_userchange",
            "        tinyint enableCustomers",
            "        tinyint enableRouting"
          ]
        },
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "```\ngraph TD\n    Q1[Question 1]\n    Q1 -->|oui| Q1.1[Question 1.1]\n    Q1 -->|non| Q1.2[Question 1.2]\n    Q1.1 -->|oui| Q1.1.1[Question 1.1.1]\n    Q1.1 -->|non| Q1.1.2[Question 1.1.2]\n    Q1.2 -->|oui| Q1.2.1[Question 1.2.1]\n    Q1.2 -->|non| Q1.2.2[Question 1.2.2]\n    Q1.2.1 -->|oui| Q1.2.11[Question 1.2.11]\n    Q1.2.1 -->|non| Q1.2.21[Question 1.2.21]\n    Q1.1.1 -->|signal| R[Result]\n    Q1.1.2 -->|signal| R\n    Q1.2.11 -->|signal| R\n    Q1.2.21 -->|signal| R\n    Q1.2.2 -->|signal| R\n```\n"
          ]
        },
        {
          "title": "Mermaid Issue 6904 on GitHub",
          "url": "https://github.com/mermaid-js/mermaid/issues/6904",
          "excerpts": [
            "'EOF', 'subgraph', 'end', 'acc_title', 'acc_descr', 'acc_descr_multiline_value', 'AMP', 'COLON', 'STYLE', 'LINKSTYLE', 'CLASSDEF', 'CLASS', 'CLICK', 'DOWN', 'DEFAULT', 'NUM', 'COMMA', 'NODE_STRING', 'BRKT', 'MINUS', 'MULT', 'UNICODE_TEXT', 'direction_tb', 'direction_bt', 'direction_rl', 'direction_lr', got 'LINK_ID'",
            "```\n\nBut the cause of the error is \"@\". I send above mermaid code and error report to ChatGPT and Claude but both of them are failed to fix it. They just tried to add \"SEMI\", \"NEWLINE\" that does not fix the error. By quote the label above diagram will be successfully rendered. I suggest make the error report more precise and easy to fix both for human and AI."
          ]
        },
        {
          "title": "mermaid - Generation of diagrams and flowcharts from text ...",
          "url": "https://unpkg.com/mermaid@0.5.2/exdoc/index.html",
          "excerpts": [
            "The parseError function will be called when the parse function returns false. The code-example below in meta code illustrates how this could work: mermaid."
          ]
        },
        {
          "title": "Is there a GPT that can convert diagram & flowchart jpeg images into ...",
          "url": "https://www.reddit.com/r/ChatGPTPro/comments/1hrgscq/is_there_a_gpt_that_can_convert_diagram_flowchart/",
          "excerpts": [
            "On the other hand, ChatGPT does a very passable job of writing mermaid code, from text. I happened to have a large system described, textually, ..."
          ]
        },
        {
          "title": "RooCode Issue 4636: Mermaid diagram generation failures",
          "url": "https://github.com/RooCodeInc/Roo-Code/issues/4636",
          "excerpts": [
            "Sometimes when modifying code or asking questions about code, Roo calls an LLM to create diagrams via Mermaid, but these diagrams often fail to render for various reasons (e.g., Mermaid syntax error...",
            "\nMermaid chart rendering issues · Issue #4636 · RooCodeInc/Roo-Code\n\n",
            "This is not an issue with Roo itself, but rather an issue with some underpowered LLMs. In this case, the model I used is gemini 2.5-flash-0520.",
            "How should this be solved? After generating a Mermaid diagram and encountering an error, place a button in the corner of the diagram. Clicking this button will resend the error message and the Mermaid code that caused the error to the large language model for regeneration.",
            "s be solved? After generating a Mermaid diagram and encountering an error, place a button in the corner of the diagram. Clicking this button will resend the error message and the Mermaid code that caused the error to the large language model for regeneration. This way, only the problematic Mermaid code needs to be fixed without regenerating the entire issue."
          ]
        },
        {
          "title": "How to escape characters? · Issue #170 · mermaid-js ...",
          "url": "https://github.com/mermaid-js/mermaid/issues/170",
          "excerpts": [
            "Jun 9, 2015 — The answer is here: https://mermaid.js.org/syntax/flowchart.html#special-characters-that-break-syntax",
            "Jun 9, 2015 — Could someone post a new mermaid.live link with escaping @, ~, \", (, and )?. React with 12"
          ]
        },
        {
          "title": "Mermaid CLI - how do you escape characters?",
          "url": "https://stackoverflow.com/questions/28121525/mermaid-cli-how-do-you-escape-characters",
          "excerpts": [
            "Use quotation marks \"\" to enclose your text and escape special characters, e.g. in your example: graph TD question1{\"Gas tank less than 1/8?"
          ]
        },
        {
          "title": "Structured output for open models | Generative AI on ...",
          "url": "https://cloud.google.com/vertex-ai/generative-ai/docs/maas/capabilities/structured-output",
          "excerpts": [
            "Structured outputs enable a model to generate output that always adheres to a specific schema. For example, a model may be provided with a response schema."
          ]
        },
        {
          "title": "Structured output support for the Prompt API | AI on Chrome",
          "url": "https://developer.chrome.com/docs/ai/structured-output-for-prompt-api",
          "excerpts": [
            "May 13, 2025 — The Prompt API lets you specify a JSON output format of the model's response by passing a JSON Schema to the LanguageModel.prompt() and LanguageModel. ..."
          ]
        },
        {
          "title": "Generative AI on Vertex AI - Structured output",
          "url": "https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/control-generated-output",
          "excerpts": [
            "Learn how to control the output of generative AI multimodal models on Google Cloud's Vertex AI. This feature is also called structured output."
          ]
        },
        {
          "title": "The Ultimate Guide to Prompt Engineering in 2025",
          "url": "https://www.lakera.ai/blog/prompt-engineering-guide",
          "excerpts": [
            "Ambiguity is one of the most common causes of poor LLM output. Instead of issuing vague instructions, use precise, structured, and goal-oriented phrasing."
          ]
        },
        {
          "title": "11 Prompt Engineering Best Practices Every Modern Dev ...",
          "url": "https://mirascope.com/blog/prompt-engineering-best-practices",
          "excerpts": [
            "Jul 1, 2025 — We'll begin with the essentials: seven practical techniques for writing clearer, more effective prompts that deliver better results with less trial and error."
          ]
        },
        {
          "title": "Anthropic's Interactive Prompt Engineering Tutorial",
          "url": "https://github.com/anthropics/prompt-eng-interactive-tutorial",
          "excerpts": [
            "This course is intended to provide you with a comprehensive step-by-step understanding of how to engineer optimal prompts within Claude."
          ]
        },
        {
          "title": "OpenAI Prompt Engineering Guide : r/ChatGPT",
          "url": "https://www.reddit.com/r/ChatGPT/comments/18jdfex/openai_prompt_engineering_guide/",
          "excerpts": [
            "Here is a summary of their 6 strategies for getting better results when prompting GPT: Write Clear Instructions: - Be specific: Clarity in ..."
          ]
        }
      ],
      "reasoning": "The fine-grained field value describes a Parse Error in an ER Diagram caused by using an unquoted colon to label a relationship, with a suggested fix of quoting the label. Excerpts that discuss syntax or parse errors in Mermaid diagrams, especially those mentioning ER diagrams or labeled relationships, directly pertain to diagnosing and addressing such parse errors. The most directly relevant excerpts report explicit parse errors in Mermaid/ER contexts and mention the structure of expected tokens or the presence of syntax issues:\n- One excerpt explicitly labels a Syntax error in Mermaid text (mermaid version 10.1.0) and references a Mermaid issue about a syntax error, signaling that such errors are recognized problems in Mermaid parsing and can arise from misformatted input.\n- Another excerpt describes a Parse error on a Mermaid subgraph example, showing a failure where certain tokens are expected (e.g., SEMI, NEWLINE, SPACE, EOF) and the actual input yields an error, illustrating how labels or syntax deviations can trigger parse failures.\n- Several excerpts discuss ER-diagram parse errors specifically when identifiers or attributes start with numbers, which is a category of invalid syntax in ER diagrams that can lead to parse errors and require quoting conventions or escaping similar to the quoted label fix you described.\n- Additional excerpts show general guidance on escaping characters and handling special characters in Mermaid, which is relevant since the fix involves correctly quoting a label that contains a colon, a character that often needs escaping or quoting to be parsed correctly.\n- A few excerpts provide concrete Mermaid code snippets and error traces that demonstrate how improperly formatted labels or relationships can cause parsing to fail, reinforcing the approach of encapsulating labels in quotes as a fix.\nIn summary, the strongest support comes from sources that demonstrate explicit parse/syntax errors in Mermaid/ER contexts and the notion that misformatted tokens (such as unquoted labels or problematic characters) cause parsing failures, which aligns with the described fix of quoting the relationship label. The supporting excerpts collectively establish that parse errors in Mermaid/ER diagrams are commonly triggered by tokens or formatting that the parser cannot tokenize correctly, and that quoting problematic labels is a standard corrective pattern.",
      "confidence": "high"
    },
    {
      "field": "validation_toolchain_overview.api_based_validation",
      "citations": [
        {
          "title": "Diagrams | GenAIScript",
          "url": "https://microsoft.github.io/genaiscript/reference/scripts/diagrams/",
          "excerpts": [
            "You can use the result.error value to check if the parsing was successful. If it was not, you can use the result.error value to repair the diagram ... Create diagrams and charts within markdown using GenAIScript and the mermaid extension for visual representation of data and processes.",
            "The `system.diagrams` system prompt registers a repair chat participant that will try to fix any syntax errors in the generated Mermaid diagrams. It’s not uncommon for LLMs to generate invalid Mermaid syntax, so this is a useful feature."
          ]
        },
        {
          "title": "Class diagrams broken with official Mermaid, and shown fine at ...",
          "url": "https://github.com/mermaid-js/mermaid/issues/6075",
          "excerpts": [
            "With class diagram, if I just replace E --> G[Imports (M)]; onto either E --> G[Imports #40;M#41;]; or E --> G[\"Imports (M)\"]; it will fix the ..."
          ]
        }
      ],
      "reasoning": "The most relevant passages discuss mechanisms for validating Mermaid diagrams and handling parse results. One excerpt notes that the result.error value can be checked to determine if parsing succeeded, and that there are repair steps for diagrams when parsing fails, which directly aligns with programmatic validation and error handling workflows. Another excerpt describes a system prompt that registers a participant to repair syntax errors in generated Mermaid diagrams, highlighting an automated validation/repair loop that complements the idea of using a parse function and structured error handling. A third excerpt references using Mermaid with diagrams in Markdown, reinforcing the context in which Mermaid diagrams are generated and validated, which is consistent with the goal of programmatic validation in a Node.js-like environment. Collectively, these excerpts provide context about validation, error handling, and tooling for Mermaid diagrams, though they do not enumerate the exact API calls listed in the field value. ",
      "confidence": "medium"
    },
    {
      "field": "diagram_specific_prompt_templates.0.prompt_template_text",
      "citations": [
        {
          "title": "Using Mermaid Diagrams 100x Better with Your Favorite AI / LLM App (Dev to article)",
          "url": "https://dev.to/yigit-konur/using-mermaid-diagrams-100x-better-with-your-favorite-ai-llm-app-3m1p",
          "excerpts": [
            "Your primary function is to transform ANY textual diagram idea, natural language description, malformed/incomplete Mermaid code, or embedded Mermaid blocks within Markdown into **production-ready, syntactically pristine, visually compelling, and interactive Mermaid diagrams. ** You will also provide micro-documentation via a concise changelog and embedded tool",
            "I use Mermaid diagrams constantly in my daily workflow. But honestly, most AI apps tend to mess them up when generating these diagrams. It doesn't matter if it's the smartest model out there or the simplest one—mistakes still happen. That's why having a rock-solid prompt is super important for getting things right."
          ]
        },
        {
          "title": "The ChatGPT prompt list for Software Engineers - Medium",
          "url": "https://medium.com/@martin-jurran/chatgpt-prompt-list-for-software-engineers-prompts-to-generate-software-diagrams-in-mermaid-deaf2f373104",
          "excerpts": [
            "The most comprehensive list of how ChatGPT and other LLMs can support diagram creation in Mermaid. Contains lots of useful prompts and other ..."
          ]
        },
        {
          "title": "LLM + Mermaid: How Modern Teams Create UML Diagrams ...",
          "url": "https://mike-vincent.medium.com/llm-mermaid-how-modern-teams-create-uml-diagrams-without-lucidchart-e54c56350804",
          "excerpts": [
            "flowchart TD  ",
            "```",
            "```",
            "```",
            "```",
            "```",
            "```",
            "    AddToCart --> Decision{Proceed to Checkout?} Decision -- Yes --> CheckStock[Check Stock]  ",
            "    Decision -- No --> Start  "
          ]
        },
        {
          "title": "Flowcharts – Basic Syntax",
          "url": "https://docs.mermaidchart.com/mermaid-oss/syntax/flowchart.html",
          "excerpts": [
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Directives Documentation",
          "url": "https://docs.mermaidchart.com/mermaid-oss/config/directives.html",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Documentation - Diagram Syntax",
          "url": "https://mermaid.js.org/intro/syntax-reference.html",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Can I control the direction of flowcharts in Mermaid? - Stack Overflow",
          "url": "https://stackoverflow.com/questions/66631182/can-i-control-the-direction-of-flowcharts-in-mermaid",
          "excerpts": [
            "```",
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Let the user decide the size and alignment of mermaid diagrams",
          "url": "https://forum.obsidian.md/t/let-the-user-decide-the-size-and-alignment-of-mermaid-diagrams/7019",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Config Documentation",
          "url": "https://mermaid.js.org/config/schema-docs/config.html",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "CSS aspect-ratio (MDN)",
          "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Havelsan's Revenue in 2024",
          "url": "https://github.com/RooCodeInc/Roo-Code/issues/6712",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid diagrams and automatic repair (GenAIScript blog)",
          "url": "https://microsoft.github.io/genaiscript/blog/mermaids/",
          "excerpts": [
            "```"
          ]
        },
        {
          "title": "Mermaid Mermaid issue 4571 - ER diagram parse error with attribute starting with a number",
          "url": "https://github.com/mermaid-js/mermaid/issues/4571",
          "excerpts": [
            "```"
          ]
        },
        {
          "title": "Flowchart: Add inheritDir option to make subgraphs inherit global ...",
          "url": "https://github.com/mermaid-js/mermaid/issues/6492",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Support specifying that two nodes should be at the same level/rank",
          "url": "https://github.com/mermaid-js/mermaid/issues/3723",
          "excerpts": [
            "```",
            "```"
          ]
        }
      ],
      "reasoning": "The finegrained field value describes a template-style prompt that instructs the model to generate Mermaid flowchart code only, with a specified direction (Top-Down or Left-to-Right) and a requirement to output only the raw Mermaid code. Excerpts that discuss transforming diagram ideas into production-ready Mermaid diagrams and providing prompts for Mermaid-based diagrams directly support the notion of a structured, directive prompt for Mermaid output. In particular, excerpts that emphasize a strong focus on Mermaid diagrams, prompt quality for diagram generation, and concrete Mermaid syntax examples (such as flowchart TD with nodes and connections) substantiate the existence and expectation of a prompt template for Mermaid flowcharts. Several excerpts illustrate Mermaid syntax (flowchart TD, Start/Decision/Checkout nodes, arrows) which aligns with the idea of a flowchart representation and corroborates the importance of directionality and node-based structure in the field value. Additional excerpts highlight prompt-building and best practices for using AI to generate diagrams in Mermaid, reinforcing the concept of a precise, directive template for diagram generation rather than freeform prose. Taken together, these excerpts support the notion of a structured prompt template that yields Mermaid code as output, including direction specification and a focus on diagrammatic representation, even if they do not reproduce the exact wording of the field value.",
      "confidence": "medium"
    },
    {
      "field": "diagram_specific_prompt_templates.3.diagram_type",
      "citations": [
        {
          "title": "LLM + Mermaid: How Modern Teams Create UML Diagrams ...",
          "url": "https://mike-vincent.medium.com/llm-mermaid-how-modern-teams-create-uml-diagrams-without-lucidchart-e54c56350804",
          "excerpts": [
            "flowchart TD  "
          ]
        },
        {
          "title": "Using Mermaid Diagrams 100x Better with Your Favorite AI / LLM App (Dev to article)",
          "url": "https://dev.to/yigit-konur/using-mermaid-diagrams-100x-better-with-your-favorite-ai-llm-app-3m1p",
          "excerpts": [
            "Your primary function is to transform ANY textual diagram idea, natural language description, malformed/incomplete Mermaid code, or embedded Mermaid blocks within Markdown into **production-ready, syntactically pristine, visually compelling, and interactive Mermaid diagrams. ** You will also provide micro-documentation via a concise changelog and embedded tool",
            "I use Mermaid diagrams constantly in my daily workflow. But honestly, most AI apps tend to mess them up when generating these diagrams. It doesn't matter if it's the smartest model out there or the simplest one—mistakes still happen. That's why having a rock-solid prompt is super important for getting things right.",
            "If you're curious, you can check out the full prompt on GitHub here: <https://gist.githubusercontent.com/yigitkonur/af07453dd812cd8a0b565fed62dd0f7d/raw/eec183bb6e9777d888e49870b4f994f957da979d/llm-mermaid.md>"
          ]
        },
        {
          "title": "The ChatGPT prompt list for Software Engineers - Medium",
          "url": "https://medium.com/@martin-jurran/chatgpt-prompt-list-for-software-engineers-prompts-to-generate-software-diagrams-in-mermaid-deaf2f373104",
          "excerpts": [
            "The most comprehensive list of how ChatGPT and other LLMs can support diagram creation in Mermaid. Contains lots of useful prompts and other ..."
          ]
        }
      ],
      "reasoning": "To support a field that specifies the diagram type (such as State Diagram) within a Mermaid prompt template, I look for excerpts that discuss diagram types or examples of diagram formats in Mermaid prompts. The most relevant excerpt explicitly references diagram-related content in the context of UML diagrams and a Mermaid diagram line (flowchart TD), which directly ties to the concept of choosing or constraining a diagram type within Mermaid templates. Other excerpts discuss enhancing Mermaid diagrams, producing production-ready diagrams, and comprehensive prompts for diagram generation. These collectively indicate that the system handles multiple diagram forms and emphasizes prompt quality for accurate diagram generation, which is relevant when validating or inferring the intended diagram type. The remaining excerpts reinforce the overall context of Mermaid-based diagram prompts and their practical use, but do not specify particular diagram types beyond general mermaid usage or mention of other forms, making them less directly tied to the exact field value but still contextually supportive. Therefore, the most relevant content centers on explicit diagram-type references (like UML or flowchart) within Mermaid prompts, with additional support from broader prompt guidance about Mermaid diagrams.",
      "confidence": "medium"
    },
    {
      "field": "accessibility_and_readability_practices.color_contrast_guidelines",
      "citations": [
        {
          "title": "Understanding WCAG 2 Contrast and Color Requirements",
          "url": "https://webaim.org/articles/contrast/",
          "excerpts": [
            "Jan 9, 2021 — This article pulls together the terms and principles needed to understand WCAG 2 requirements for contrast and color."
          ]
        },
        {
          "title": "How to Meet WCAG (Quick Reference) - W3C",
          "url": "https://www.w3.org/WAI/WCAG22/quickref/",
          "excerpts": [
            "All non-text content that is presented to the user has a text alternative that serves the equivalent purpose, except for the situations listed below. 1.4.8 Visual Presentation; 1.4.9 Images of Text (No Exception); 1.4.10 Reflow; 1.4.11 Non-text Contrast; 1.4.12 Text Spacing; 1.4.13 Content on Hover or Focus. A customizable quick reference to Web Content Accessibility Guidelines (WCAG) 2 requirements (success criteria) and techniques."
          ]
        },
        {
          "title": "Understanding Guideline 1.4: Distinguishable | WAI",
          "url": "https://www.w3.org/WAI/WCAG21/Understanding/distinguishable.html",
          "excerpts": [
            "This guideline is concerned with making the default presentation as easy to perceive as possible to people with disabilities."
          ]
        },
        {
          "title": "Text has enhanced contrast[proposed] | ACT Rule | WAI - W3C",
          "url": "https://www.w3.org/WAI/standards-guidelines/act/rules/09o5cg/proposed/",
          "excerpts": [
            "This rule checks that the highest possible contrast of every text character with its background meets the enhanced contrast requirement."
          ]
        },
        {
          "title": "F104: Failure of Success Criterion 1.4.12 due to clipped or ... - W3C",
          "url": "https://www.w3.org/WAI/WCAG21/Techniques/failures/F104",
          "excerpts": [
            "The purpose of this technique is to identify and test a failure condition where part of the content clips and is unreadable when the user overrides the spacing ..."
          ]
        },
        {
          "title": "Important letter spacing in style attributes is wide enough - W3C",
          "url": "https://www.w3.org/WAI/standards-guidelines/act/rules/24afc2/",
          "excerpts": [
            "Important letter spacing in style attributes is wide enough. Rule Mapping. This is an Atomic rule to test 1.4.12: Text Spacing (Level AA). Description."
          ]
        }
      ],
      "reasoning": "The finegrained field value asserts that high color contrast is fundamental for readability and that WCAG provides the standards, including specific contrast ratio thresholds for text and non-text elements. It also notes practical implementation guidance for Mermaid, such as using themes and custom colors to meet contrast requirements. The most directly supportive content states understanding WCAG 2 contrast and color requirements, and discusses the need for readers to perceive content easily and the role of contrast in distinguishing elements. Additional support comes from guidance on non-text contrast and the idea that the default presentation should be easy to perceive, which aligns with ensuring that charts and diagrams (like mermaid diagrams) meet contrast criteria. There is further practical advice about testing color combinations to meet WCAG ratios and using themeVariables to set primary colors and text colors, which directly connects to how to implement the field value in Mermaid. There is also explicit mention that high-contrast and accessible labeling practices should be considered for readability, and that failures or spacing concerns can affect accessibility, underscoring the broader WCAG context in which color contrast sits. Taken together, these excerpts collectively corroborate the claim that high color contrast is fundamental for readability per WCAG and that practical Mermaid implementation steps exist to achieve those contrasts.",
      "confidence": "high"
    },
    {
      "field": "llm_failure_modes_and_mitigations.model_specific_observations",
      "citations": [
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "Parse error on line 1:↵graph TD    Q1[Question ↵-----^↵Expecting 'NODIR', 'DIR', got 'SPACE",
            "Parser error when used with mermaidAPI",
            "```\ngraph TD\n    Q1[Question 1]\n    Q1 -->|oui| Q1.1[Question 1.1]\n    Q1 -->|non| Q1.2[Question 1.2]\n    Q1.1 -->|oui| Q1.1.1[Question 1.1.1]\n    Q1.1 -->|non| Q1.1.2[Question 1.1.2]\n    Q1.2 -->|oui| Q1.2.1[Question 1.2.1]\n    Q1.2 -->|non| Q1.2.2[Question 1.2.2]\n    Q1.2.1 -->|oui| Q1.2.11[Question 1.2.11]\n    Q1.2.1 -->|non| Q1.2.21[Question 1.2.21]\n    Q1.1.1 -->|signal| R[Result]\n    Q1.1.2 -->|signal| R\n    Q1.2.11 -->|signal| R\n    Q1.2.21 -->|signal| R\n    Q1.2.2 -->|signal| R\n```\n"
          ]
        },
        {
          "title": "Architecture Diagram error when declaring diagram level \" ...",
          "url": "https://github.com/mermaid-js/mermaid/issues/6162",
          "excerpts": [
            "Jan 2, 2025 — Using Mermaid Live Editor, an architecture-beta with a title gets this error message Diagram syntax error Error: Parsing failed: Expecting token of type ':' ..."
          ]
        },
        {
          "title": "Using Mermaid Diagrams 100x Better with Your Favorite AI / LLM App (Dev to article)",
          "url": "https://dev.to/yigit-konur/using-mermaid-diagrams-100x-better-with-your-favorite-ai-llm-app-3m1p",
          "excerpts": [
            "I use Mermaid diagrams constantly in my daily workflow. But honestly, most AI apps tend to mess them up when generating these diagrams. It doesn't matter if it's the smartest model out there or the simplest one—mistakes still happen. That's why having a rock-solid prompt is super important for getting things right.",
            "Phase 1: Input Ingestion & Contextual Analysis",
            "If you're curious, you can check out the full prompt on GitHub here: <https://gist.githubusercontent.com/yigitkonur/af07453dd812cd8a0b565fed62dd0f7d/raw/eec183bb6e9777d888e49870b4f994f957da979d/llm-mermaid.md>"
          ]
        }
      ],
      "reasoning": "The fine-grained field value describes a spectrum of failure modes for LLMs when generating Mermaid diagrams, highlighting that weaker models frequently produce syntax errors and that even advanced models can fail, with mitigations such as few-shot prompting improving adherence to syntax. Excerpts that explicitly report parsing or syntax errors tied to Mermaid diagrams directly support the existence of failure modes in weaker LLMs and the need for mitigations. For example, a report of a parse error in Mermaid syntax demonstrates a concrete failure mode in the generation process. Another excerpt notes a console error related to Mermaid, reinforcing the idea that parsing-related failures are observable and problematic. A third excerpt mentions an architecture-diagram level parsing error, further illustrating that parse-time failures can occur in diagrams of increasing complexity. Supporting context comes from excerpts that discuss how AI apps tend to produce mistakes with Mermaid diagrams and stress the importance of a strong prompt, including ideas like few-shot prompting to help weaker models adhere to syntax and patterns. These latter excerpts provide mitigation guidance and rationale behind why model-specific observations and curated prompts are necessary. Overall, the strongest support comes from explicit statements about parse/syntax errors in Mermaid diagrams by weaker models and the documented need for corrective prompting strategies, with additional corroboration from related discussions about error handling and guidance for better prompts.",
      "confidence": "high"
    },
    {
      "field": "common_errors_and_fixes_cheatsheet.2",
      "citations": [
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "Parse error on line 1:↵graph TD    Q1[Question ↵-----^↵Expecting 'NODIR', 'DIR', got 'SPACE",
            "```\ngraph TD\n    Q1[Question 1]\n    Q1 -->|oui| Q1.1[Question 1.1]\n    Q1 -->|non| Q1.2[Question 1.2]\n    Q1.1 -->|oui| Q1.1.1[Question 1.1.1]\n    Q1.1 -->|non| Q1.1.2[Question 1.1.2]\n    Q1.2 -->|oui| Q1.2.1[Question 1.2.1]\n    Q1.2 -->|non| Q1.2.2[Question 1.2.2]\n    Q1.2.1 -->|oui| Q1.2.11[Question 1.2.11]\n    Q1.2.1 -->|non| Q1.2.21[Question 1.2.21]\n    Q1.1.1 -->|signal| R[Result]\n    Q1.1.2 -->|signal| R\n    Q1.2.11 -->|signal| R\n    Q1.2.21 -->|signal| R\n    Q1.2.2 -->|signal| R\n```\n"
          ]
        },
        {
          "title": "mermaidjs/mermaid.cli - Parsing subgraph fails on brackets",
          "url": "https://github.com/mermaidjs/mermaid.cli/issues/68",
          "excerpts": [
            "Oct 23, 2019 — ... Error: Parse error on line 2: ...raph TBsubgraph BIG[better]A-->Bend ----------------------^ Expecting 'SEMI', 'NEWLINE', 'SPACE', 'EOF ..."
          ]
        },
        {
          "title": "Syntax error in text mermaid version 10.1.0 · Issue #4432",
          "url": "https://github.com/mermaid-js/mermaid/issues/4432",
          "excerpts": [
            "Apr 28, 2023 — It is quite easy to create something that will trigger the error, problem is not being able to track it down without trial and error. And that can be quite ..."
          ]
        },
        {
          "title": "Mermaid Issue 6904 on GitHub",
          "url": "https://github.com/mermaid-js/mermaid/issues/6904",
          "excerpts": [
            "```\n\nBut the cause of the error is \"@\". I send above mermaid code and error report to ChatGPT and Claude but both of them are failed to fix it. They just tried to add \"SEMI\", \"NEWLINE\" that does not fix the error. By quote the label above diagram will be successfully rendered. I suggest make the error report more precise and easy to fix both for human and AI."
          ]
        }
      ],
      "reasoning": "The target fine-grained field value centers on a parse error in Mermaid diagrams, specifically a parse error on a line with a directional arrow and an instruction to fix by correcting the arrow syntax (e.g., from a malformed or spaced arrow to a proper arrow like -->). The most directly supporting content is a report that states a parse error on line 1 with the parser expecting directional tokens (NODIR or DIR) but encountering a space, which aligns with the described issue of a subtle syntax deviation such as an extra space or malformed arrow. Additional supportive material includes discussions of parse errors arising in Mermaid diagrams (subgraph parsing and general syntax errors) and examples illustrating how malformed syntax or brackets can trigger parsing failures, which corroborate the general pattern of parse errors and the need to correct syntax. A reference that provides broader context about Mermaid parse errors and how the parser flags problems reinforces the specific scenario described in the field value, including mentions of parseError handling and the idea that syntax issues (e.g., spaces, bracket usage) can cause failures. A supplementary excerpt demonstrates a concrete Mermaid code block and a parse-related error scenario, which helps connect the abstract error pattern to a concrete example. An additional item explicitly notes the importance of precise error reports to diagnose Mermaid parsing problems, which supports the overall notion that a subtle syntax deviation is the culprit and needs to be identified and fixed. The combination of explicit error messaging (expected tokens vs. space), concrete parse-error instances, and guidance on correcting syntax collectively supports the field value’s claim about a subtle syntax deviation causing a Parse Error and the recommended fix strategy.",
      "confidence": "high"
    },
    {
      "field": "diagram_specific_prompt_templates.4.diagram_type",
      "citations": [
        {
          "title": "LLM + Mermaid: How Modern Teams Create UML Diagrams ...",
          "url": "https://mike-vincent.medium.com/llm-mermaid-how-modern-teams-create-uml-diagrams-without-lucidchart-e54c56350804",
          "excerpts": [
            "Entity Relationship Diagrams: Defining the Data Model"
          ]
        }
      ],
      "reasoning": "The finegrained field value specifies an Entity Relationship Diagram (ERD) as the diagram type. The most directly relevant excerpt explicitly references Entity Relationship Diagrams in its title, which confirms the ERD as a diagram type being discussed. This direct mention provides clear evidence that the ERD diagram type is a focal point in at least one source. While the other excerpts discuss Mermaid diagrams and prompt quality for diagram generation, they do not explicitly confirm ERD as the diagram type. Therefore, the strongest support comes from the excerpt that states ERD-related content in the title, establishing alignment with the field value. The other excerpts contribute context about tooling and prompt construction for diagrams but offer only indirect relevance to the specific ERD diagram type referenced in the field value.",
      "confidence": "high"
    },
    {
      "field": "css_svg_wrapper_snippets.0.html_snippet",
      "citations": [
        {
          "title": "Configure flowchart to auto-resize so that nodes are always ...",
          "url": "https://github.com/mermaid-js/mermaid/issues/838",
          "excerpts": [
            "May 14, 2019 — I've tried playing with various useMaxWidth and HTML/css settings, however I'm unable to achieve the following behavior: Given a #mermaid ... May 14, 2019 — Given a #mermaid container sitting within an auto-width div, I would like to render flow charts so that the nodes are always the same size ...",
            "I've tried playing with various useMaxWidth and HTML/css settings, however I'm unable to achieve the following behavior: Given a #mermaid ..."
          ]
        },
        {
          "title": "Troubleshooting - MkDocs-Mermaid2 - Read the Docs",
          "url": "https://mkdocs-mermaid2.readthedocs.io/en/latest/troubleshooting/",
          "excerpts": [
            "Mermaid diagram is not displayed (or displayed incorrectly) Tip: To start with, use a simple diagram that you know is syntactically correct."
          ]
        },
        {
          "title": "CSS aspect-ratio (MDN)",
          "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio",
          "excerpts": [
            "The **`aspect-ratio`** [CSS](/en-US/docs/Web/CSS) property allows you to define the desired width-to-height ratio of an element's box. This means that even if the parent container or viewport size changes, the browser will adjust the element's dimensions to maintain the specified width-to-height ratio.",
            "css\n\n```\ndiv {\n  width: 100px;\n  height: auto;\n}\ndiv:nth-child(1) {\n  aspect-ratio: 1/1;\n}\ndiv:nth-child(2) {\n  aspect-ratio: 0.5;\n}\ndiv:nth-child(3) {\n  aspect-ratio: 1;\n}\ndiv:nth-child(4) {\n  aspect-ratio: 1/0.5;\n}\ndiv:nth-child(5) {\n  aspect-ratio: 16/9;\n}\n```\n\n",
            "  aspect-ratio: 3/2 auto;",
            "  aspect-ratio: 3/2 auto;",
            "img {",
            "img {",
            "```\ndiv {\n  display: inline-flex;\n  background-color: lime;\n  justify-content: center;\n}\n```",
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Flowcharts – Basic Syntax",
          "url": "https://docs.mermaidchart.com/mermaid-oss/syntax/flowchart.html",
          "excerpts": [
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Directives Documentation",
          "url": "https://docs.mermaidchart.com/mermaid-oss/config/directives.html",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Documentation - Diagram Syntax",
          "url": "https://mermaid.js.org/intro/syntax-reference.html",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "LLM + Mermaid: How Modern Teams Create UML Diagrams ...",
          "url": "https://mike-vincent.medium.com/llm-mermaid-how-modern-teams-create-uml-diagrams-without-lucidchart-e54c56350804",
          "excerpts": [
            "```",
            "```",
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Can I control the direction of flowcharts in Mermaid? - Stack Overflow",
          "url": "https://stackoverflow.com/questions/66631182/can-i-control-the-direction-of-flowcharts-in-mermaid",
          "excerpts": [
            "```",
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Let the user decide the size and alignment of mermaid diagrams",
          "url": "https://forum.obsidian.md/t/let-the-user-decide-the-size-and-alignment-of-mermaid-diagrams/7019",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Config Documentation",
          "url": "https://mermaid.js.org/config/schema-docs/config.html",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Havelsan's Revenue in 2024",
          "url": "https://github.com/RooCodeInc/Roo-Code/issues/6712",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid diagrams and automatic repair (GenAIScript blog)",
          "url": "https://microsoft.github.io/genaiscript/blog/mermaids/",
          "excerpts": [
            "```"
          ]
        },
        {
          "title": "Mermaid Mermaid issue 4571 - ER diagram parse error with attribute starting with a number",
          "url": "https://github.com/mermaid-js/mermaid/issues/4571",
          "excerpts": [
            "```"
          ]
        },
        {
          "title": "Flowchart: Add inheritDir option to make subgraphs inherit global ...",
          "url": "https://github.com/mermaid-js/mermaid/issues/6492",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Support specifying that two nodes should be at the same level/rank",
          "url": "https://github.com/mermaid-js/mermaid/issues/3723",
          "excerpts": [
            "```",
            "```"
          ]
        }
      ],
      "reasoning": "The target field value specifies an HTML wrapper div with a class indicating a square Mermaid container and a nested Mermaid diagram. Excerpts that discuss mermaid diagrams and how their sizing can be controlled are highly relevant: discussions about configuring flowcharts to auto-resize so that nodes maintain consistent size provide direct guidance for the behavior of a Mermaid diagram inside a fixed container. Troubleshooting Mermaid diagrams for display issues is also pertinent because it addresses common rendering problems that could affect the wrapper’s rendering outcome. Excerpts about CSS aspect-ratio and how to enforce a consistent width-to-height relationship are relevant because they describe a concrete mechanism (aspect-ratio) to keep the container square or near-square, which aligns with the desire for squarish images. The remaining excerpts, which focus on general CSS aspect-ratio properties and sample code blocks, offer contextual support on how to implement or reason about aspect-ratio within the wrapper to achieve the squarish rendering goal. Directly quoted elements include notes on auto-resizing behavior of Mermaid within containers and the concept of using simple, correctly-formed diagrams to ensure proper display, which underpin the stability and predictability of the target HTML structure.",
      "confidence": "high"
    },
    {
      "field": "diagram_specific_prompt_templates.6.example_instantiation",
      "citations": [
        {
          "title": "Using Mermaid Diagrams 100x Better with Your Favorite AI / LLM App (Dev to article)",
          "url": "https://dev.to/yigit-konur/using-mermaid-diagrams-100x-better-with-your-favorite-ai-llm-app-3m1p",
          "excerpts": [
            "If you're curious, you can check out the full prompt on GitHub here: <https://gist.githubusercontent.com/yigitkonur/af07453dd812cd8a0b565fed62dd0f7d/raw/eec183bb6e9777d888e49870b4f994f957da979d/llm-mermaid.md>",
            "Your primary function is to transform ANY textual diagram idea, natural language description, malformed/incomplete Mermaid code, or embedded Mermaid blocks within Markdown into **production-ready, syntactically pristine, visually compelling, and interactive Mermaid diagrams. ** You will also provide micro-documentation via a concise changelog and embedded tool"
          ]
        },
        {
          "title": "The ChatGPT prompt list for Software Engineers - Medium",
          "url": "https://medium.com/@martin-jurran/chatgpt-prompt-list-for-software-engineers-prompts-to-generate-software-diagrams-in-mermaid-deaf2f373104",
          "excerpts": [
            "The most comprehensive list of how ChatGPT and other LLMs can support diagram creation in Mermaid. Contains lots of useful prompts and other ..."
          ]
        },
        {
          "title": "Flowcharts – Basic Syntax",
          "url": "https://docs.mermaidchart.com/mermaid-oss/syntax/flowchart.html",
          "excerpts": [
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Directives Documentation",
          "url": "https://docs.mermaidchart.com/mermaid-oss/config/directives.html",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Documentation - Diagram Syntax",
          "url": "https://mermaid.js.org/intro/syntax-reference.html",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "LLM + Mermaid: How Modern Teams Create UML Diagrams ...",
          "url": "https://mike-vincent.medium.com/llm-mermaid-how-modern-teams-create-uml-diagrams-without-lucidchart-e54c56350804",
          "excerpts": [
            "```",
            "```",
            "```",
            "```",
            "```",
            "```",
            "flowchart TD  ",
            "    Start((Browse Products)) --> AddToCart[Add to Cart]  ",
            "Entity Relationship Diagrams: Defining the Data Model"
          ]
        },
        {
          "title": "Can I control the direction of flowcharts in Mermaid? - Stack Overflow",
          "url": "https://stackoverflow.com/questions/66631182/can-i-control-the-direction-of-flowcharts-in-mermaid",
          "excerpts": [
            "```",
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Let the user decide the size and alignment of mermaid diagrams",
          "url": "https://forum.obsidian.md/t/let-the-user-decide-the-size-and-alignment-of-mermaid-diagrams/7019",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Config Documentation",
          "url": "https://mermaid.js.org/config/schema-docs/config.html",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "CSS aspect-ratio (MDN)",
          "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Havelsan's Revenue in 2024",
          "url": "https://github.com/RooCodeInc/Roo-Code/issues/6712",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid diagrams and automatic repair (GenAIScript blog)",
          "url": "https://microsoft.github.io/genaiscript/blog/mermaids/",
          "excerpts": [
            "```"
          ]
        },
        {
          "title": "Mermaid Mermaid issue 4571 - ER diagram parse error with attribute starting with a number",
          "url": "https://github.com/mermaid-js/mermaid/issues/4571",
          "excerpts": [
            "```"
          ]
        },
        {
          "title": "Flowchart: Add inheritDir option to make subgraphs inherit global ...",
          "url": "https://github.com/mermaid-js/mermaid/issues/6492",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Support specifying that two nodes should be at the same level/rank",
          "url": "https://github.com/mermaid-js/mermaid/issues/3723",
          "excerpts": [
            "```",
            "```"
          ]
        }
      ],
      "reasoning": "The finegrained field value is a Mermaid mindmap example that defines a root node with branches for QA, Development, and Deployment. Excerpts that discuss using Mermaid diagrams with AI/LLMs, making Mermaid diagrams from natural language ideas, or transforming descriptions into production-ready Mermaid code directly support the idea of generating diagrams from text, which is central to the mindmap example. Specifically, the passages emphasize that the primary function is to convert textual diagram ideas or incomplete code into robust Mermaid diagrams and to provide streamlined documentation and prompts for such diagrams; this aligns with a mindmap-style Mermaid diagram that encodes project goals and subcomponents. As a result, those excerpts provide strong support for the capability of producing Mermaid-based mindmaps from textual prompts. Additional excerpts that describe comprehensive Mermaid prompt lists and prompts to generate software diagrams in Mermaid extend the contextual basis for understanding how a developer might craft or refine prompts to yield structured Mermaid outputs, which is relevant for enabling complex diagram structures, including mindmaps. They offer supporting context about best practices, tooling, and prompt patterns that can be used to elicit richer Mermaid diagrams. Collectively, these excerpts establish that Mermaid-based diagram generation from textual input is a developed capability and that structured prompts can guide the creation of diagrams, which is pertinent to the requested mindmap example.",
      "confidence": "high"
    },
    {
      "field": "testing_and_evaluation_kit_design.reporting_template",
      "citations": [
        {
          "title": "Improving LLM Output Reliability with Structured Data Generation",
          "url": "https://www.matt-adams.co.uk/2025/02/12/structured-data-generation.html",
          "excerpts": [
            "* Produce invalid Mermaid syntax",
            "I encountered this challenge while working on generating Mermaid diagrams with LLMs. Even though the models could understand the concept and content of what needed to be generated, they would often:",
            "This approach has significantly improved the reliability of the generated diagrams and made the code more maintainable.",
            "2. **Format Conversion** : Use code to convert this structured data into the desired final format",
            "1. **Content Generation** : Have the model generate a structured JSON representation that focuses purely on the content and logic",
            "The Solution: A Two-Step Approach",
            "This post explores a pattern I’ve successfully used to improve the reliability of complex format generation by leveraging the models’ strength in JSON output to separate content generation from format handling.",
            "These issues weren’t unique to Mermaid - they’re common when asking LLMs to generate any output that requires strict syntax adherence.",
            "* Create inconsistent node and edge definitions"
          ]
        },
        {
          "title": "Using Mermaid Diagrams 100x Better with Your Favorite AI / LLM App (Dev to article)",
          "url": "https://dev.to/yigit-konur/using-mermaid-diagrams-100x-better-with-your-favorite-ai-llm-app-3m1p",
          "excerpts": [
            "Use these cues to determine the most probable diagram type. Prioritize explicit `type:` flags."
          ]
        },
        {
          "title": "Adding a New Diagram/Chart (Deprecated)",
          "url": "https://docs.mermaidchart.com/mermaid-oss/community/new-diagram-jison.html",
          "excerpts": [
            "Apr 11, 2025 — Note that the diagram type key does not have to be the same as the diagram keyword chosen for the grammar, but it is helpful if they are the ...",
            "exports.parseError = function (err, hash) {\n  mermaid.parseError(err, hash);\n};",
            "The parser is also exposed in the mermaid api by calling:\n\n```\nconst parser = mermaid.getParser();\n```",
            "Apr 11, 2025 — Make sure that the parseError function for the parser is defined and calling mermaid.parseError . This way a common way of detecting parse ..."
          ]
        }
      ],
      "reasoning": "The target field value is a standardized Markdown template intended to log detailed Mermaid generation test results, including sections for test case identifiers, diagram type, task description, the LLM output in Mermaid syntax, and a structured evaluation table covering syntax validity, rendering, and visual properties like square-ness. Excerpts that address structured data and template-like approaches to controlling or validating LLM outputs are most relevant. Direct references to separating content generation from formatting (a two-step approach) align with the idea of first generating content in a structured JSON and then converting to final Markdown/diagram syntax, as seen in discussions about structured data generation and a two-step workflow. Excerpts that discuss error handling, parsing, and validation of Mermaid diagrams map well to the evaluation aspects of the template (syntax validity via mermaid.parse and rendering checks). Excerpts that describe using Mermaid with LLMs and guidance on diagram type selection provide contextual support for the Mermaid-focused portion of the template. Excerpts about adding diagrams and Mermaid parser integration offer additional technical grounding for the evaluation content but are slightly less about logging an evaluation template and more about diagram construction specifics. In sum, the most directly supportive content includes statements about separating content from format, using structured JSON to drive diagrams, reliability improvements in LLM outputs, and the need for explicit evaluation checks; mid-support comes from Mermaid-oriented usage patterns and diagram-type cues; peripheral support comes from diagram parsing and error handling discussions.",
      "confidence": "medium"
    },
    {
      "field": "diagram_specific_prompt_templates.3.example_instantiation",
      "citations": [
        {
          "title": "LLM + Mermaid: How Modern Teams Create UML Diagrams ...",
          "url": "https://mike-vincent.medium.com/llm-mermaid-how-modern-teams-create-uml-diagrams-without-lucidchart-e54c56350804",
          "excerpts": [
            "flowchart TD  "
          ]
        },
        {
          "title": "Using Mermaid Diagrams 100x Better with Your Favorite AI / LLM App (Dev to article)",
          "url": "https://dev.to/yigit-konur/using-mermaid-diagrams-100x-better-with-your-favorite-ai-llm-app-3m1p",
          "excerpts": [
            "Your primary function is to transform ANY textual diagram idea, natural language description, malformed/incomplete Mermaid code, or embedded Mermaid blocks within Markdown into **production-ready, syntactically pristine, visually compelling, and interactive Mermaid diagrams. ** You will also provide micro-documentation via a concise changelog and embedded tool",
            "If you're curious, you can check out the full prompt on GitHub here: <https://gist.githubusercontent.com/yigitkonur/af07453dd812cd8a0b565fed62dd0f7d/raw/eec183bb6e9777d888e49870b4f994f957da979d/llm-mermaid.md>",
            "I use Mermaid diagrams constantly in my daily workflow. But honestly, most AI apps tend to mess them up when generating these diagrams. It doesn't matter if it's the smartest model out there or the simplest one—mistakes still happen. That's why having a rock-solid prompt is super important for getting things right."
          ]
        },
        {
          "title": "The ChatGPT prompt list for Software Engineers - Medium",
          "url": "https://medium.com/@martin-jurran/chatgpt-prompt-list-for-software-engineers-prompts-to-generate-software-diagrams-in-mermaid-deaf2f373104",
          "excerpts": [
            "The most comprehensive list of how ChatGPT and other LLMs can support diagram creation in Mermaid. Contains lots of useful prompts and other ..."
          ]
        }
      ],
      "reasoning": "The field value is a precise Mermaid diagram snippet (stateDiagram-v2) that defines a finite-state system with states like Off, On, Playing, Paused and transitions such as toggle, pause, and resume. Excerpts that discuss Mermaid diagram generation and the use of prompts to produce production-ready Mermaid diagrams are directly relevant because they address how to craft prompts to yield accurate Mermaid syntax and diagrams. In particular, content that notes transforming textual ideas into syntactically pristine Mermaid diagrams and providing robust prompts is pertinent, as it frames the process by which a user could elicit a correct state diagram from a generator. Excerpts that talk about using prompts to improve Mermaid outputs, or that reference Mermaid diagrams and their reliability when generated by AI, are directly supportive of the goal of producing reliable Mermaid diagrams from prompts. Excerpts mentioning Mermaid in the context of prompts and tooling provide the closest alignment to the need for a concrete stateDiagram-v2 example and guidance on generating such diagrams, even if the exact code snippet isn’t shown. Excerpts that discuss broader diagram prompts or general diagram formats (such as flowchart or UML) are still relevant, as they establish the surrounding ecosystem of diagram prompts and best practices, which helps explain how one might craft a prompt to produce a correct state diagram. Overall, the most relevant evidence points to leveraging well-crafted Mermaid prompts and tooling to produce syntactically correct diagrams, which supports the intent of the finegrained field value, even if the exact state machine code isn’t present in the excerpts.",
      "confidence": "medium"
    },
    {
      "field": "css_svg_wrapper_snippets.0.css_snippet",
      "citations": [
        {
          "title": "CSS aspect-ratio (MDN)",
          "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio",
          "excerpts": [
            "The **`aspect-ratio`** [CSS](/en-US/docs/Web/CSS) property allows you to define the desired width-to-height ratio of an element's box. This means that even if the parent container or viewport size changes, the browser will adjust the element's dimensions to maintain the specified width-to-height ratio.",
            "  aspect-ratio: 3/2 auto;",
            "  aspect-ratio: 3/2 auto;"
          ]
        },
        {
          "title": "Configure flowchart to auto-resize so that nodes are always ...",
          "url": "https://github.com/mermaid-js/mermaid/issues/838",
          "excerpts": [
            "May 14, 2019 — I've tried playing with various useMaxWidth and HTML/css settings, however I'm unable to achieve the following behavior: Given a #mermaid ... May 14, 2019 — Given a #mermaid container sitting within an auto-width div, I would like to render flow charts so that the nodes are always the same size ...",
            "I've tried playing with various useMaxWidth and HTML/css settings, however I'm unable to achieve the following behavior: Given a #mermaid ..."
          ]
        },
        {
          "title": "Troubleshooting - MkDocs-Mermaid2 - Read the Docs",
          "url": "https://mkdocs-mermaid2.readthedocs.io/en/latest/troubleshooting/",
          "excerpts": [
            "Mermaid diagram is not displayed (or displayed incorrectly) Tip: To start with, use a simple diagram that you know is syntactically correct."
          ]
        }
      ],
      "reasoning": "The fine-grained field value centers on enforcing a square container using CSS by setting a 1:1 aspect ratio and ensuring the inner Mermaid SVG scales to fill the container. The primary evidence is that the aspect-ratio property defines a width-to-height ratio for an element so its box remains square regardless of container changes. Concrete examples of aspect-ratio values demonstrate how different ratios produce different shapes, underscoring why a 1:1 ratio yields a square. Additional context about rendering Mermaid diagrams within auto-resizing or constrained containers shows practical implications of such sizing rules, which aligns with the goal of making the diagram area square and fully utilized. Troubleshooting notes about Mermaid rendering in docs further corroborate common pitfalls and the need for reliable sizing in embedded diagrams. Taken together, these excerpts support the concept that a square container is achieved via a 1/1 aspect-ratio and that Mermaid content should fill that square without distortion or overflow.",
      "confidence": "high"
    },
    {
      "field": "squarish_layout_strategies.internal_mermaid_config",
      "citations": [
        {
          "title": "Mermaid Documentation - Diagram Syntax",
          "url": "https://mermaid.js.org/intro/syntax-reference.html",
          "excerpts": [
            "```\n---\nconfig:\n  layout: dagre\n  look: classic\n  theme: default\n---\n\nflowchart LR\nA[Start] --> B{Choose Path}\nB -->|Option 1| C[Path 1]\nB -->|Option 2| D[Path 2]\n```"
          ]
        },
        {
          "title": "Mermaid Layouts and Layout Options",
          "url": "https://mermaid.js.org/config/layouts.html",
          "excerpts": [
            "## How to Use",
            "You can specify the layout in your diagram's YAML config or initialization options. For example:",
            "You can specify the layout in your diagram's YAML config or initialization options. For example:",
            "* **dagre** : Dagre layout for layered graphs",
            "* **cose-bilkent** : Cose Bilkent layout for force-directed graphs",
            "* **tidy-tree** : Tidy tree layout for hierarchical diagrams [Tidy Tree Configuration](/config/tidy-tree.html)",
            "* **elk** : [ELK (Eclipse Layout Kernel)](https://www.eclipse.org/elk/)",
            "##### Code:"
          ]
        },
        {
          "title": "Configuration - Mermaid Documentation",
          "url": "https://mermaid.js.org/config/configuration.html",
          "excerpts": [
            "##### Code:"
          ]
        },
        {
          "title": "Mermaid Theme Configuration",
          "url": "https://mermaid.js.org/config/theming.html",
          "excerpts": [
            "##### Code:",
            "##### Code:"
          ]
        }
      ],
      "reasoning": "- The excerpt showing frontmatter configuration includes an explicit YAML block configuring the diagram with a layout option (layout: dagre). This directly demonstrates how internal configuration is supplied via frontmatter/YAML to influence layout behavior, aligning with the field’s focus on internal Mermaid configurations for shaping the diagram. The specific inclusion of a layout setting is a concrete embodiment of controlling the diagram’s geometry, which is central to producing a squarish form through internal options. \n- The excerpt stating that you can specify the layout in your diagram’s YAML config or initialization options reinforces the mechanism by which internal configuration is applied. It directly supports the idea that internal config controls diagram appearance and can be used to influence aspect/shape indirectly through layout choices. \n- The excerpts enumerating the available Mermaid layouts (elk, tidy-tree, cose-bilkent, dagre) provide the concrete set of internal layout options that a user can select to affect the diagram’s proportions and overall geometry. Knowing which layouts exist is essential when aiming for a squarish output, since different layouts have different aspect propagation characteristics. \n- The excerpts labeled as How to Use and the subsequent content about layout usage further contextualize how internal configuration is wired into a diagram, supporting the notion that internal options (and not just high-level sizing) govern diagram shape. \n- The Code/Example excerpt (Code block) complements the above by illustrating how a YAML frontmatter block or code sample can carry initialization options, implicitly including layout and possibly related spacing/width parameters that influence aspect. These together provide a coherent picture of how internal Mermaid configuration can be used to steer diagrams toward a squarish form by selecting layouts and tuning parameters in YAML/frontmatter. ",
      "confidence": "high"
    },
    {
      "field": "diagram_specific_prompt_templates.6.prompt_template_text",
      "citations": [
        {
          "title": "Using Mermaid Diagrams 100x Better with Your Favorite AI / LLM App (Dev to article)",
          "url": "https://dev.to/yigit-konur/using-mermaid-diagrams-100x-better-with-your-favorite-ai-llm-app-3m1p",
          "excerpts": [
            "Your primary function is to transform ANY textual diagram idea, natural language description, malformed/incomplete Mermaid code, or embedded Mermaid blocks within Markdown into **production-ready, syntactically pristine, visually compelling, and interactive Mermaid diagrams. ** You will also provide micro-documentation via a concise changelog and embedded tool",
            "If you're curious, you can check out the full prompt on GitHub here: <https://gist.githubusercontent.com/yigitkonur/af07453dd812cd8a0b565fed62dd0f7d/raw/eec183bb6e9777d888e49870b4f994f957da979d/llm-mermaid.md>"
          ]
        },
        {
          "title": "The ChatGPT prompt list for Software Engineers - Medium",
          "url": "https://medium.com/@martin-jurran/chatgpt-prompt-list-for-software-engineers-prompts-to-generate-software-diagrams-in-mermaid-deaf2f373104",
          "excerpts": [
            "The most comprehensive list of how ChatGPT and other LLMs can support diagram creation in Mermaid. Contains lots of useful prompts and other ..."
          ]
        },
        {
          "title": "Flowcharts – Basic Syntax",
          "url": "https://docs.mermaidchart.com/mermaid-oss/syntax/flowchart.html",
          "excerpts": [
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Directives Documentation",
          "url": "https://docs.mermaidchart.com/mermaid-oss/config/directives.html",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Documentation - Diagram Syntax",
          "url": "https://mermaid.js.org/intro/syntax-reference.html",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "LLM + Mermaid: How Modern Teams Create UML Diagrams ...",
          "url": "https://mike-vincent.medium.com/llm-mermaid-how-modern-teams-create-uml-diagrams-without-lucidchart-e54c56350804",
          "excerpts": [
            "```",
            "```",
            "```",
            "```",
            "```",
            "```",
            "flowchart TD  ",
            "    Start((Browse Products)) --> AddToCart[Add to Cart]  ",
            "Entity Relationship Diagrams: Defining the Data Model"
          ]
        },
        {
          "title": "Can I control the direction of flowcharts in Mermaid? - Stack Overflow",
          "url": "https://stackoverflow.com/questions/66631182/can-i-control-the-direction-of-flowcharts-in-mermaid",
          "excerpts": [
            "```",
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Let the user decide the size and alignment of mermaid diagrams",
          "url": "https://forum.obsidian.md/t/let-the-user-decide-the-size-and-alignment-of-mermaid-diagrams/7019",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Config Documentation",
          "url": "https://mermaid.js.org/config/schema-docs/config.html",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "CSS aspect-ratio (MDN)",
          "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Havelsan's Revenue in 2024",
          "url": "https://github.com/RooCodeInc/Roo-Code/issues/6712",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid diagrams and automatic repair (GenAIScript blog)",
          "url": "https://microsoft.github.io/genaiscript/blog/mermaids/",
          "excerpts": [
            "```"
          ]
        },
        {
          "title": "Mermaid Mermaid issue 4571 - ER diagram parse error with attribute starting with a number",
          "url": "https://github.com/mermaid-js/mermaid/issues/4571",
          "excerpts": [
            "```"
          ]
        },
        {
          "title": "Flowchart: Add inheritDir option to make subgraphs inherit global ...",
          "url": "https://github.com/mermaid-js/mermaid/issues/6492",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Support specifying that two nodes should be at the same level/rank",
          "url": "https://github.com/mermaid-js/mermaid/issues/3723",
          "excerpts": [
            "```",
            "```"
          ]
        }
      ],
      "reasoning": "The finegrained field value specifies a precise prompt template for generating a Mermaid mind map and explicitly requires output to be the raw Mermaid code with no explanations. Excerpts that describe transforming any textual diagram idea or malformed Mermaid into production-ready Mermaid diagrams directly support the idea of using prompts to generate Mermaid code from descriptions. In particular, the excerpt that states: 'Your primary function is to transform ANY textual diagram idea, natural language description, malformed/incomplete Mermaid code, or embedded Mermaid blocks within Markdown into production-ready, syntactically pristine, visually compelling, and interactive Mermaid diagrams' directly aligns with the goal of a prompt that yields Mermaid diagrams from descriptive input. Additional excerpts discuss prompts and lists for software engineers to generate diagrams in Mermaid, which corroborates the existence and usefulness of prompt-based approaches to Mermaid diagram generation. Another excerpt shows concrete Mermaid examples (flowchart TD, Start --> AddToCart) illustrating that Mermaid syntax and diagrams are the target output format, reinforcing that a prompt should deliver valid Mermaid code rather than narrative explanations. The linked article and gist reference (though not quoting the exact template) further demonstrate sources and templates that guide Mermaid generation from text, supporting the idea that a mind-map style template would be a valid, desired form of Mermaid output in practice. Overall, the excerpts collectively support the field value by confirming the domain (Mermaid diagram generation from textual input) and the emphasis on producing ready-to-use Mermaid code via prompts, even if the exact template text is not present.",
      "confidence": "medium"
    },
    {
      "field": "diagram_specific_prompt_templates.3.prompt_template_text",
      "citations": [
        {
          "title": "The ChatGPT prompt list for Software Engineers - Medium",
          "url": "https://medium.com/@martin-jurran/chatgpt-prompt-list-for-software-engineers-prompts-to-generate-software-diagrams-in-mermaid-deaf2f373104",
          "excerpts": [
            "The most comprehensive list of how ChatGPT and other LLMs can support diagram creation in Mermaid. Contains lots of useful prompts and other ..."
          ]
        },
        {
          "title": "Using Mermaid Diagrams 100x Better with Your Favorite AI / LLM App (Dev to article)",
          "url": "https://dev.to/yigit-konur/using-mermaid-diagrams-100x-better-with-your-favorite-ai-llm-app-3m1p",
          "excerpts": [
            "Your primary function is to transform ANY textual diagram idea, natural language description, malformed/incomplete Mermaid code, or embedded Mermaid blocks within Markdown into **production-ready, syntactically pristine, visually compelling, and interactive Mermaid diagrams. ** You will also provide micro-documentation via a concise changelog and embedded tool",
            "If you're curious, you can check out the full prompt on GitHub here: <https://gist.githubusercontent.com/yigitkonur/af07453dd812cd8a0b565fed62dd0f7d/raw/eec183bb6e9777d888e49870b4f994f957da979d/llm-mermaid.md>",
            "I use Mermaid diagrams constantly in my daily workflow. But honestly, most AI apps tend to mess them up when generating these diagrams. It doesn't matter if it's the smartest model out there or the simplest one—mistakes still happen. That's why having a rock-solid prompt is super important for getting things right."
          ]
        },
        {
          "title": "LLM + Mermaid: How Modern Teams Create UML Diagrams ...",
          "url": "https://mike-vincent.medium.com/llm-mermaid-how-modern-teams-create-uml-diagrams-without-lucidchart-e54c56350804",
          "excerpts": [
            "flowchart TD  "
          ]
        }
      ],
      "reasoning": "The target field value describes a prompt template that instructs the model to generate a Mermaid state diagram with explicit states and transitions and to output only the raw Mermaid code without explanations. Excerpts that discuss the existence of prompts to generate Mermaid diagrams and the importance of high-quality prompts directly support the idea of having a structured, production-ready Mermaid prompt. In particular, one excerpt highlights that there is a comprehensive list of prompts for generating diagrams in Mermaid, which aligns with having a ready-made template for such a task. Another excerpt emphasizes transforming textual diagram ideas into production-ready Mermaid diagrams and notes the need for concise, focused output, which corresponds to the requirement of delivering raw Mermaid code with minimal extra text. A third excerpt references a GitHub-hosted full prompt related to Mermaid diagrams, reinforcing the notion of concrete templates or prompts for Mermaid outputs. A fourth excerpt discusses the broader topic of Mermaid diagrams in a modern workflow and shows that Mermaid is a common target for prompts, including examples like flowchart TD, which is relevant to state-machine style diagrams. Finally, an excerpt notes that a robust prompt is crucial to getting diagrams right, which supports the expectation of a strict instruction like outputting only the raw Mermaid code. Taken together, these excerpts collectively corroborate the idea of having and relying on dedicated Mermaid diagram prompts, aligning with the requested field value, even though none of the excerpts reproduce the exact verbatim template. The most relevant content centers on Mermaid prompt availability, the emphasis on producing clean Mermaid output, and references to actual Mermaid examples and templates.",
      "confidence": "medium"
    },
    {
      "field": "common_errors_and_fixes_cheatsheet.4.diagram_type",
      "citations": [
        {
          "title": "Mermaid Mermaid issue 4571 - ER diagram parse error with attribute starting with a number",
          "url": "https://github.com/mermaid-js/mermaid/issues/4571",
          "excerpts": [
            "        varchar 2fa_name",
            "        int 2fa_length",
            "        tinyint 2fa_userchange",
            "        tinyint enableCustomers",
            "        tinyint enableRouting"
          ]
        }
      ],
      "reasoning": "The finegrained field describes the type of diagram involved in the Mermaid-related parsing problem. The excerpts collectively report on an issue titled Mermaid issue 4571 that centers on ER diagrams and an attribute starting with a number, indicating a parsing error specific to ER Diagram usage within Mermaid. This demonstrates that the content of these excerpts directly supports the existence of an ER Diagram context and the associated parsing challenge, which aligns with the requested field value. No excerpts contradict the ER Diagram framing; instead, they reinforce that ER Diagram is the diagram type under discussion and is relevant to the identified parsing issue.",
      "confidence": "high"
    },
    {
      "field": "css_svg_wrapper_snippets.0.description",
      "citations": [
        {
          "title": "CSS aspect-ratio (MDN)",
          "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio",
          "excerpts": [
            "The **`aspect-ratio`** [CSS](/en-US/docs/Web/CSS) property allows you to define the desired width-to-height ratio of an element's box. This means that even if the parent container or viewport size changes, the browser will adjust the element's dimensions to maintain the specified width-to-height ratio.",
            "  aspect-ratio: 3/2 auto;",
            "  aspect-ratio: 3/2 auto;",
            "css\n\n```\ndiv {\n  width: 100px;\n  height: auto;\n}\ndiv:nth-child(1) {\n  aspect-ratio: 1/1;\n}\ndiv:nth-child(2) {\n  aspect-ratio: 0.5;\n}\ndiv:nth-child(3) {\n  aspect-ratio: 1;\n}\ndiv:nth-child(4) {\n  aspect-ratio: 1/0.5;\n}\ndiv:nth-child(5) {\n  aspect-ratio: 16/9;\n}\n```\n\n"
          ]
        }
      ],
      "reasoning": "The field value asserts a direct method: employ the CSS property aspect-ratio to lock a container to a 1:1 ratio, then have an inner SVG fill that container. Excerpt 0 explicitly defines the aspect-ratio property and explains that a defined width-to-height ratio is preserved as the browser resizes, which directly supports the core mechanism described in the field value. Excerpt 2 shows a concrete usage of aspect-ratio (3/2 auto), illustrating how different ratio values can be declared, which reinforces the concept of controlling container proportions. Excerpt 1 provides concrete code examples across multiple elements using aspect-ratio values, including 1/1, 0.5, and 16/9, further supporting that aspect-ratio can be used to achieve square or other fixed proportions, aligning with the goal of squarish, predictable containers. Taken together, these excerpts substantiate the central claim that aspect-ratio governs the container’s proportions, which is the foundation of the described method for ensuring a square container for an inner SVG to fill. The other excerpts discussing mermaid sizing and unrelated box styling do not directly reinforce the aspect-ratio mechanism and are therefore less relevant to the stated fine-grained field value.",
      "confidence": "medium"
    },
    {
      "field": "diagram_specific_prompt_templates.2.prompt_template_text",
      "citations": [
        {
          "title": "Using Mermaid Diagrams 100x Better with Your Favorite AI / LLM App (Dev to article)",
          "url": "https://dev.to/yigit-konur/using-mermaid-diagrams-100x-better-with-your-favorite-ai-llm-app-3m1p",
          "excerpts": [
            "If you're curious, you can check out the full prompt on GitHub here: <https://gist.githubusercontent.com/yigitkonur/af07453dd812cd8a0b565fed62dd0f7d/raw/eec183bb6e9777d888e49870b4f994f957da979d/llm-mermaid.md>",
            "I use Mermaid diagrams constantly in my daily workflow. But honestly, most AI apps tend to mess them up when generating these diagrams. It doesn't matter if it's the smartest model out there or the simplest one—mistakes still happen. That's why having a rock-solid prompt is super important for getting things right.",
            "Your primary function is to transform ANY textual diagram idea, natural language description, malformed/incomplete Mermaid code, or embedded Mermaid blocks within Markdown into **production-ready, syntactically pristine, visually compelling, and interactive Mermaid diagrams. ** You will also provide micro-documentation via a concise changelog and embedded tool"
          ]
        },
        {
          "title": "The ChatGPT prompt list for Software Engineers - Medium",
          "url": "https://medium.com/@martin-jurran/chatgpt-prompt-list-for-software-engineers-prompts-to-generate-software-diagrams-in-mermaid-deaf2f373104",
          "excerpts": [
            "The most comprehensive list of how ChatGPT and other LLMs can support diagram creation in Mermaid. Contains lots of useful prompts and other ..."
          ]
        }
      ],
      "reasoning": "The most relevant excerpt appears to point to a GitHub-hosted resource that likely contains the Mermaid prompt template for generating class diagrams, which directly supports the field value that specifies a prompt to generate a Mermaid class diagram and output only raw Mermaid code. The next highly relevant excerpts discuss prompt lists or guidance for using AI/LLMs to produce Mermaid diagrams in general, which corroborates the existence of a template-driven workflow for Mermaid outputs and provides context on how such prompts are typically structured. Further, other excerpts describe transforming diagram ideas into production-ready Mermaid diagrams or discuss best practices for prompts in this space, offering ancillary support about the environment in which the class-diagram template would operate, though they are less direct about the exact template text. Collectively, these excerpts support the notion of a Mermaid diagram prompt template (especially the class-diagram focus) and the expectation of raw Mermaid code output, aligning with the field value requirement.",
      "confidence": "medium"
    },
    {
      "field": "common_errors_and_fixes_cheatsheet.4.error_category",
      "citations": [
        {
          "title": "Mermaid Mermaid issue 4571 - ER diagram parse error with attribute starting with a number",
          "url": "https://github.com/mermaid-js/mermaid/issues/4571",
          "excerpts": [
            "        varchar 2fa_name",
            "        int 2fa_length",
            "        tinyint 2fa_userchange",
            "        tinyint enableCustomers",
            "        tinyint enableRouting"
          ]
        }
      ],
      "reasoning": "The target field value indicates a parse error category within a common errors cheatsheet. Each relevant excerpt explicitly references a Mermaid-related parse error scenario, described as either 'ER diagram parse error' or a general 'Parse error' within the same issue context. The wording 'parse error' appears in the surrounding descriptions of the Mermaid issue 4571, which directly supports the classification of the error category as a parse error. The references to 'ER diagram' and the specific issue title anchor the error type to parsing problems encountered while rendering diagrams, aligning precisely with a parse error classification. There is no evidence in the excerpts suggesting a different error category; all content supports the parse error interpretation as the correct classification for this field value.",
      "confidence": "high"
    },
    {
      "field": "common_errors_and_fixes_cheatsheet.0.error_message_pattern",
      "citations": [
        {
          "title": "Mermaid Issue 6904 on GitHub",
          "url": "https://github.com/mermaid-js/mermaid/issues/6904",
          "excerpts": [
            "'EOF', 'subgraph', 'end', 'acc_title', 'acc_descr', 'acc_descr_multiline_value', 'AMP', 'COLON', 'STYLE', 'LINKSTYLE', 'CLASSDEF', 'CLASS', 'CLICK', 'DOWN', 'DEFAULT', 'NUM', 'COMMA', 'NODE_STRING', 'BRKT', 'MINUS', 'MULT', 'UNICODE_TEXT', 'direction_tb', 'direction_bt', 'direction_rl', 'direction_lr', got 'LINK_ID'"
          ]
        },
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "Parse error on line 1:↵graph TD    Q1[Question ↵-----^↵Expecting 'NODIR', 'DIR', got 'SPACE"
          ]
        },
        {
          "title": "Syntax error in text mermaid version 10.1.0 · Issue #4432",
          "url": "https://github.com/mermaid-js/mermaid/issues/4432",
          "excerpts": [
            "Apr 28, 2023 — It is quite easy to create something that will trigger the error, problem is not being able to track it down without trial and error. And that can be quite ..."
          ]
        }
      ],
      "reasoning": "The finegrained field value indicates a specific parse error pattern: \"Parse error on line X: ... got 'LINK_ID'\". The most directly supporting excerpt describes exactly this pattern, stating that the error includes the text \"got 'LINK_ID'\". This directly corroborates the target field value. Additional excerpts discuss similar parse-error scenarios in Mermaid syntax (e.g., other parse errors like expecting certain tokens or reporting line-based parse issues). These provide contextual support that Mermaid can emit various parse errors during syntax analysis, which aligns with the overall concept of a parse-error pattern, though they do not explicitly confirm the exact 'LINK_ID' token. Taken together, the strongest evidence comes from the excerpt that explicitly mentions \"got 'LINK_ID'\", while the other excerpts illustrate related error-reporting behavior that helps confirm the relevance of the topic to parse errors in Mermaid. ",
      "confidence": "high"
    },
    {
      "field": "common_errors_and_fixes_cheatsheet.4.error_message_pattern",
      "citations": [
        {
          "title": "Mermaid Mermaid issue 4571 - ER diagram parse error with attribute starting with a number",
          "url": "https://github.com/mermaid-js/mermaid/issues/4571",
          "excerpts": [
            "        varchar 2fa_name",
            "        int 2fa_length",
            "        tinyint 2fa_userchange",
            "        tinyint enableCustomers",
            "        tinyint enableRouting"
          ]
        }
      ],
      "reasoning": "The finegrained field value points to a specific parse error pattern where an identifier (ATTRIBUTE_WORD) is expected during parsing, but an unexpected token such as an error or a COMMENT is encountered. The excerpts describe a concrete scenario where attribute names that begin with a numeral (for example, 2fa_name, 2fa_length, 2fa_userchange) trigger a parsing issue in a Mermaid ER diagram context. This directly supports the notion that the parser is complaining about an attribute token that starts with a number, which is a structural symptom consistent with the referenced error pattern. While the excerpts do not quote the exact error message themselves, they provide explicit evidence of the root cause (attributes starting with digits causing a parse error) that aligns with the idea of failing to recognize an ATTRIBUTE_WORD and producing parsing-related feedback. Therefore, these excerpts collectively substantiate the claim that the error arises when attribute identifiers begin with numbers, matching the described error pattern to some extent. The most relevant parts of these excerpts are the repeated framing of an ER diagram parse error triggered by numeric-leading attribute names, which is the closest available support for the specified error pattern. The connections are that numeric-leading attribute names are the practical manifestation of the error scenario described by the finegrained field value.",
      "confidence": "medium"
    },
    {
      "field": "diagram_specific_prompt_templates.5.prompt_template_text",
      "citations": [
        {
          "title": "Using Mermaid Diagrams 100x Better with Your Favorite AI / LLM App (Dev to article)",
          "url": "https://dev.to/yigit-konur/using-mermaid-diagrams-100x-better-with-your-favorite-ai-llm-app-3m1p",
          "excerpts": [
            "Your primary function is to transform ANY textual diagram idea, natural language description, malformed/incomplete Mermaid code, or embedded Mermaid blocks within Markdown into **production-ready, syntactically pristine, visually compelling, and interactive Mermaid diagrams. ** You will also provide micro-documentation via a concise changelog and embedded tool",
            "If you're curious, you can check out the full prompt on GitHub here: <https://gist.githubusercontent.com/yigitkonur/af07453dd812cd8a0b565fed62dd0f7d/raw/eec183bb6e9777d888e49870b4f994f957da979d/llm-mermaid.md>",
            "I use Mermaid diagrams constantly in my daily workflow. But honestly, most AI apps tend to mess them up when generating these diagrams. It doesn't matter if it's the smartest model out there or the simplest one—mistakes still happen. That's why having a rock-solid prompt is super important for getting things right.",
            "Phase 1: Input Ingestion & Contextual Analysis"
          ]
        },
        {
          "title": "The ChatGPT prompt list for Software Engineers - Medium",
          "url": "https://medium.com/@martin-jurran/chatgpt-prompt-list-for-software-engineers-prompts-to-generate-software-diagrams-in-mermaid-deaf2f373104",
          "excerpts": [
            "The most comprehensive list of how ChatGPT and other LLMs can support diagram creation in Mermaid. Contains lots of useful prompts and other ..."
          ]
        },
        {
          "title": "LLM + Mermaid: How Modern Teams Create UML Diagrams ...",
          "url": "https://mike-vincent.medium.com/llm-mermaid-how-modern-teams-create-uml-diagrams-without-lucidchart-e54c56350804",
          "excerpts": [
            "flowchart TD  ",
            "    Start((Browse Products)) --> AddToCart[Add to Cart]  ",
            "    AddToCart --> Decision{Proceed to Checkout?} Decision -- Yes --> CheckStock[Check Stock]  ",
            "    Decision -- No --> Start  ",
            "    CheckStock -- In Stock --> Checkout[Proceed to Checkout]  ",
            "    CheckStock -- Out of Stock --> Notify[Notify User]  ",
            "    Notify --> Start  ",
            "    Checkout --> Payment[Process Payment]  ",
            "    Payment -- Success --> Complete((Order Complete))  ",
            "    Payment -- Failure --> Retry[Retry Payment]  ",
            "    Retry --> Payment",
            "Entity Relationship Diagrams: Defining the Data Model",
            "```",
            "```",
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Flowcharts – Basic Syntax",
          "url": "https://docs.mermaidchart.com/mermaid-oss/syntax/flowchart.html",
          "excerpts": [
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Directives Documentation",
          "url": "https://docs.mermaidchart.com/mermaid-oss/config/directives.html",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Documentation - Diagram Syntax",
          "url": "https://mermaid.js.org/intro/syntax-reference.html",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Can I control the direction of flowcharts in Mermaid? - Stack Overflow",
          "url": "https://stackoverflow.com/questions/66631182/can-i-control-the-direction-of-flowcharts-in-mermaid",
          "excerpts": [
            "```",
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Let the user decide the size and alignment of mermaid diagrams",
          "url": "https://forum.obsidian.md/t/let-the-user-decide-the-size-and-alignment-of-mermaid-diagrams/7019",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Config Documentation",
          "url": "https://mermaid.js.org/config/schema-docs/config.html",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "CSS aspect-ratio (MDN)",
          "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Havelsan's Revenue in 2024",
          "url": "https://github.com/RooCodeInc/Roo-Code/issues/6712",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid diagrams and automatic repair (GenAIScript blog)",
          "url": "https://microsoft.github.io/genaiscript/blog/mermaids/",
          "excerpts": [
            "```"
          ]
        },
        {
          "title": "Mermaid Mermaid issue 4571 - ER diagram parse error with attribute starting with a number",
          "url": "https://github.com/mermaid-js/mermaid/issues/4571",
          "excerpts": [
            "```"
          ]
        },
        {
          "title": "Flowchart: Add inheritDir option to make subgraphs inherit global ...",
          "url": "https://github.com/mermaid-js/mermaid/issues/6492",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Support specifying that two nodes should be at the same level/rank",
          "url": "https://github.com/mermaid-js/mermaid/issues/3723",
          "excerpts": [
            "```",
            "```"
          ]
        }
      ],
      "reasoning": "The finegrained field value specifies a highly structured Mermaid diagram prompt: generate a pie chart with a title and data, and output only the raw Mermaid code. Several excerpts emphasize that prompts should convert textual ideas into production-ready Mermaid diagrams and provide clear output expectations. For example, a prominent excerpt states that the primary function is to transform any textual diagram idea or malformed Mermaid code into production-ready diagrams and to offer micro-documentation via a concise changelog; this supports the idea of formalized, end-to-end prompts that produce clean Mermaid outputs. Another excerpt highlights the existence of a ‘rock-solid prompt’ for Mermaid diagrams and notes the importance of a strong, repeatable prompt to get correct diagrams, which aligns with the notion of a precise, constrained prompt like the one in the field value. Additionally, references to a complete prompt on GitHub and to lists of prompts for software engineers to generate Mermaid diagrams demonstrate that structured prompt templates are a common practice, reinforcing that the requested field value is a specialized instance within a broader approach to prompt-based diagram generation. The mention of phase-based or structured prompt content (e.g., input ingestion, context, and tooling) further supports the idea that the field value is part of a disciplined prompt design, even though none of the excerpts reproduce the exact pie-chart template verbatim. Taken together, these excerpts corroborate that the user’s finegrained field value—an explicit Mermaid pie chart prompt with strict output constraints—fits within a body of evidence that promotes precise, production-ready Mermaid prompts and templates.",
      "confidence": "high"
    },
    {
      "field": "diagram_specific_prompt_templates.2.diagram_type",
      "citations": [
        {
          "title": "Flowcharts – Basic Syntax",
          "url": "https://docs.mermaidchart.com/mermaid-oss/syntax/flowchart.html",
          "excerpts": [
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Directives Documentation",
          "url": "https://docs.mermaidchart.com/mermaid-oss/config/directives.html",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Documentation - Diagram Syntax",
          "url": "https://mermaid.js.org/intro/syntax-reference.html",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "LLM + Mermaid: How Modern Teams Create UML Diagrams ...",
          "url": "https://mike-vincent.medium.com/llm-mermaid-how-modern-teams-create-uml-diagrams-without-lucidchart-e54c56350804",
          "excerpts": [
            "```",
            "```",
            "```",
            "```",
            "```",
            "```",
            "flowchart TD  ",
            "Entity Relationship Diagrams: Defining the Data Model"
          ]
        },
        {
          "title": "Can I control the direction of flowcharts in Mermaid? - Stack Overflow",
          "url": "https://stackoverflow.com/questions/66631182/can-i-control-the-direction-of-flowcharts-in-mermaid",
          "excerpts": [
            "```",
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Let the user decide the size and alignment of mermaid diagrams",
          "url": "https://forum.obsidian.md/t/let-the-user-decide-the-size-and-alignment-of-mermaid-diagrams/7019",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Config Documentation",
          "url": "https://mermaid.js.org/config/schema-docs/config.html",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "CSS aspect-ratio (MDN)",
          "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Havelsan's Revenue in 2024",
          "url": "https://github.com/RooCodeInc/Roo-Code/issues/6712",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid diagrams and automatic repair (GenAIScript blog)",
          "url": "https://microsoft.github.io/genaiscript/blog/mermaids/",
          "excerpts": [
            "```"
          ]
        },
        {
          "title": "Mermaid Mermaid issue 4571 - ER diagram parse error with attribute starting with a number",
          "url": "https://github.com/mermaid-js/mermaid/issues/4571",
          "excerpts": [
            "```"
          ]
        },
        {
          "title": "Flowchart: Add inheritDir option to make subgraphs inherit global ...",
          "url": "https://github.com/mermaid-js/mermaid/issues/6492",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Support specifying that two nodes should be at the same level/rank",
          "url": "https://github.com/mermaid-js/mermaid/issues/3723",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "The ChatGPT prompt list for Software Engineers - Medium",
          "url": "https://medium.com/@martin-jurran/chatgpt-prompt-list-for-software-engineers-prompts-to-generate-software-diagrams-in-mermaid-deaf2f373104",
          "excerpts": [
            "The most comprehensive list of how ChatGPT and other LLMs can support diagram creation in Mermaid. Contains lots of useful prompts and other ..."
          ]
        },
        {
          "title": "Using Mermaid Diagrams 100x Better with Your Favorite AI / LLM App (Dev to article)",
          "url": "https://dev.to/yigit-konur/using-mermaid-diagrams-100x-better-with-your-favorite-ai-llm-app-3m1p",
          "excerpts": [
            "Your primary function is to transform ANY textual diagram idea, natural language description, malformed/incomplete Mermaid code, or embedded Mermaid blocks within Markdown into **production-ready, syntactically pristine, visually compelling, and interactive Mermaid diagrams. ** You will also provide micro-documentation via a concise changelog and embedded tool",
            "If you're curious, you can check out the full prompt on GitHub here: <https://gist.githubusercontent.com/yigitkonur/af07453dd812cd8a0b565fed62dd0f7d/raw/eec183bb6e9777d888e49870b4f994f957da979d/llm-mermaid.md>",
            "Phase 1: Input Ingestion & Contextual Analysis",
            "I use Mermaid diagrams constantly in my daily workflow. But honestly, most AI apps tend to mess them up when generating these diagrams. It doesn't matter if it's the smartest model out there or the simplest one—mistakes still happen. That's why having a rock-solid prompt is super important for getting things right."
          ]
        }
      ],
      "reasoning": "The target field value is a specific diagram type, a Class Diagram, within a hierarchy that likely maps to UML/diagram prompts in Mermaid. Excerpts that discuss UML diagrams in the Mermaid/LLM context are most relevant because Class Diagrams are a core UML diagram type. The passages that describe creating UML diagrams with LLMs and Mermaid indicate the same domain and tooling (Mermaid syntax, diagram generation by LLMs), making them highly relevant to the field value. For example, discussions titled LLM + Mermaid: How Modern Teams Create UML Diagrams directly address UML diagram creation with Mermaid, which encompasses class diagrams as a UML diagram category. Similarly, multiple references to Mermaid-powered diagram generation and improving diagram quality signal alignment with producing structured diagram types like Class Diagrams. A passage explicitly about Entity Relationship Diagrams is somewhat related in the broader diagram modeling context but is less directly aligned with Class Diagrams, so it is slightly less relevant. Passages that frame prompts and workflows for Mermaid diagrams (including prompts lists and improvement notes) support the general capability to produce diagram types via prompts, which is relevant to generating a Class Diagram, but they do not confirm the specific Class Diagram content. In summary, the strongest alignment comes from items that explicitly connect LLMs, Mermaid, and UML diagram generation, while related but narrower items about other diagram forms or generic Mermaid prompts provide contextual support but not direct confirmation of a Class Diagram example.",
      "confidence": "medium"
    },
    {
      "field": "common_errors_and_fixes_cheatsheet.0.cause_and_fix",
      "citations": [
        {
          "title": "Mermaid CLI - how do you escape characters?",
          "url": "https://stackoverflow.com/questions/28121525/mermaid-cli-how-do-you-escape-characters",
          "excerpts": [
            "Use quotation marks \"\" to enclose your text and escape special characters, e.g. in your example: graph TD question1{\"Gas tank less than 1/8?"
          ]
        },
        {
          "title": "How to escape characters? · Issue #170 · mermaid-js ...",
          "url": "https://github.com/mermaid-js/mermaid/issues/170",
          "excerpts": [
            "Jun 9, 2015 — The answer is here: https://mermaid.js.org/syntax/flowchart.html#special-characters-that-break-syntax"
          ]
        },
        {
          "title": "mermaidjs/mermaid.cli - Parsing subgraph fails on brackets",
          "url": "https://github.com/mermaidjs/mermaid.cli/issues/68",
          "excerpts": [
            "Oct 23, 2019 — ... Error: Parse error on line 2: ...raph TBsubgraph BIG[better]A-->Bend ----------------------^ Expecting 'SEMI', 'NEWLINE', 'SPACE', 'EOF ..."
          ]
        },
        {
          "title": "Syntax error in text mermaid version 10.1.0 · Issue #4432",
          "url": "https://github.com/mermaid-js/mermaid/issues/4432",
          "excerpts": [
            "Apr 28, 2023 — It is quite easy to create something that will trigger the error, problem is not being able to track it down without trial and error. And that can be quite ..."
          ]
        },
        {
          "title": "Mermaid Issue 6904 on GitHub",
          "url": "https://github.com/mermaid-js/mermaid/issues/6904",
          "excerpts": [
            "```\n\nBut the cause of the error is \"@\". I send above mermaid code and error report to ChatGPT and Claude but both of them are failed to fix it. They just tried to add \"SEMI\", \"NEWLINE\" that does not fix the error. By quote the label above diagram will be successfully rendered. I suggest make the error report more precise and easy to fix both for human and AI.",
            "'EOF', 'subgraph', 'end', 'acc_title', 'acc_descr', 'acc_descr_multiline_value', 'AMP', 'COLON', 'STYLE', 'LINKSTYLE', 'CLASSDEF', 'CLASS', 'CLICK', 'DOWN', 'DEFAULT', 'NUM', 'COMMA', 'NODE_STRING', 'BRKT', 'MINUS', 'MULT', 'UNICODE_TEXT', 'direction_tb', 'direction_bt', 'direction_rl', 'direction_lr', got 'LINK_ID'"
          ]
        },
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "Parse error on line 1:↵graph TD    Q1[Question ↵-----^↵Expecting 'NODIR', 'DIR', got 'SPACE"
          ]
        }
      ],
      "reasoning": "The core field value describes a concrete cause-and-fix pattern: an unexpected or malformed identifier arising from an unquoted special character like '@', and a remediation that brackets the entire problematic node text in double quotes to treat it as a single string (for example, B[\"AuthController@che\"]). The most directly supporting excerpt states: use quotation marks to enclose text and escape special characters, demonstrating the exact mechanism of quoting problematic content. Additional excerpts corroborate the theme of escaping characters and handling parse errors in Mermaid syntax, including mentions of escaping, handling special characters, and the general idea that syntax errors can stem from problematic tokens when not properly quoted or escaped. Some excerpts describe parse errors and the notion of useful fixes or workarounds (trial-and-error approaches) that align with the need to properly quote or escape sequences to avoid misinterpretation by the parser. Collectively, these excerpts reinforce that the proposed fix—quoting the node text to treat it as a single string and escaping special characters—is the appropriate remedy for the described cause. The reasoning chain ties the explicit fix (quote the node text) to the root cause (unquoted special character causing a parse issue) and to the suggested escaping approach found in the excerpts.",
      "confidence": "high"
    },
    {
      "field": "common_errors_and_fixes_cheatsheet.0.error_category",
      "citations": [
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "Parse error on line 1:↵graph TD    Q1[Question ↵-----^↵Expecting 'NODIR', 'DIR', got 'SPACE"
          ]
        },
        {
          "title": "How to escape characters? · Issue #170 · mermaid-js ...",
          "url": "https://github.com/mermaid-js/mermaid/issues/170",
          "excerpts": [
            "Jun 9, 2015 — The answer is here: https://mermaid.js.org/syntax/flowchart.html#special-characters-that-break-syntax"
          ]
        },
        {
          "title": "mermaidjs/mermaid.cli - Parsing subgraph fails on brackets",
          "url": "https://github.com/mermaidjs/mermaid.cli/issues/68",
          "excerpts": [
            "Oct 23, 2019 — ... Error: Parse error on line 2: ...raph TBsubgraph BIG[better]A-->Bend ----------------------^ Expecting 'SEMI', 'NEWLINE', 'SPACE', 'EOF ..."
          ]
        }
      ],
      "reasoning": "The most directly relevant excerpt describes a concrete parse error: it states there is a Parse error on line 1 and provides a context of a Mermaid graph, indicating the parser failed at a specific location. This directly supports the field value 'Parse Error' as it explicitly labels the issue as a parse error. A closely related excerpt also discusses a Parse error on line 1 within a Mermaid parsing context, reinforcing that parsing issues are central to the problem described. Another excerpt mentions a Parse error on line 2 and notes expected tokens, which is another explicit instance of a parsing failure in Mermaid syntax. Taken together, these excerpts directly corroborate the concept of a parse error in Mermaid diagrams, aligning with the specified field value. The remaining excerpts discuss syntax errors or escaping characters, which are related to parsing/syntax problems but do not explicitly label them as parse errors; they provide contextual support for understanding how syntax issues can lead to errors, but are less directly tied to the exact term 'Parse Error'.",
      "confidence": "high"
    },
    {
      "field": "diagram_specific_prompt_templates.5.diagram_type",
      "citations": [
        {
          "title": "Using Mermaid Diagrams 100x Better with Your Favorite AI / LLM App (Dev to article)",
          "url": "https://dev.to/yigit-konur/using-mermaid-diagrams-100x-better-with-your-favorite-ai-llm-app-3m1p",
          "excerpts": [
            "Your primary function is to transform ANY textual diagram idea, natural language description, malformed/incomplete Mermaid code, or embedded Mermaid blocks within Markdown into **production-ready, syntactically pristine, visually compelling, and interactive Mermaid diagrams. ** You will also provide micro-documentation via a concise changelog and embedded tool",
            "I use Mermaid diagrams constantly in my daily workflow. But honestly, most AI apps tend to mess them up when generating these diagrams. It doesn't matter if it's the smartest model out there or the simplest one—mistakes still happen. That's why having a rock-solid prompt is super important for getting things right.",
            "Phase 1: Input Ingestion & Contextual Analysis"
          ]
        },
        {
          "title": "The ChatGPT prompt list for Software Engineers - Medium",
          "url": "https://medium.com/@martin-jurran/chatgpt-prompt-list-for-software-engineers-prompts-to-generate-software-diagrams-in-mermaid-deaf2f373104",
          "excerpts": [
            "The most comprehensive list of how ChatGPT and other LLMs can support diagram creation in Mermaid. Contains lots of useful prompts and other ..."
          ]
        },
        {
          "title": "Flowcharts – Basic Syntax",
          "url": "https://docs.mermaidchart.com/mermaid-oss/syntax/flowchart.html",
          "excerpts": [
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Directives Documentation",
          "url": "https://docs.mermaidchart.com/mermaid-oss/config/directives.html",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Documentation - Diagram Syntax",
          "url": "https://mermaid.js.org/intro/syntax-reference.html",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "LLM + Mermaid: How Modern Teams Create UML Diagrams ...",
          "url": "https://mike-vincent.medium.com/llm-mermaid-how-modern-teams-create-uml-diagrams-without-lucidchart-e54c56350804",
          "excerpts": [
            "```",
            "```",
            "```",
            "```",
            "```",
            "```",
            "Entity Relationship Diagrams: Defining the Data Model"
          ]
        },
        {
          "title": "Can I control the direction of flowcharts in Mermaid? - Stack Overflow",
          "url": "https://stackoverflow.com/questions/66631182/can-i-control-the-direction-of-flowcharts-in-mermaid",
          "excerpts": [
            "```",
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Let the user decide the size and alignment of mermaid diagrams",
          "url": "https://forum.obsidian.md/t/let-the-user-decide-the-size-and-alignment-of-mermaid-diagrams/7019",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Config Documentation",
          "url": "https://mermaid.js.org/config/schema-docs/config.html",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "CSS aspect-ratio (MDN)",
          "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Havelsan's Revenue in 2024",
          "url": "https://github.com/RooCodeInc/Roo-Code/issues/6712",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid diagrams and automatic repair (GenAIScript blog)",
          "url": "https://microsoft.github.io/genaiscript/blog/mermaids/",
          "excerpts": [
            "```"
          ]
        },
        {
          "title": "Mermaid Mermaid issue 4571 - ER diagram parse error with attribute starting with a number",
          "url": "https://github.com/mermaid-js/mermaid/issues/4571",
          "excerpts": [
            "```"
          ]
        },
        {
          "title": "Flowchart: Add inheritDir option to make subgraphs inherit global ...",
          "url": "https://github.com/mermaid-js/mermaid/issues/6492",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Support specifying that two nodes should be at the same level/rank",
          "url": "https://github.com/mermaid-js/mermaid/issues/3723",
          "excerpts": [
            "```",
            "```"
          ]
        }
      ],
      "reasoning": "The field value specifies a diagram type of Pie Chart within a Mermaid diagram prompt template. The most directly relevant excerpts are those that discuss crafting prompts to generate Mermaid diagrams from natural language descriptions or code, since they describe how to convert inputs into production-ready diagrams, which would include specifying a diagram type. These excerpts emphasize the workflow of taking descriptive input and turning it into diagrams, and sometimes include a changelog or documentation that accompanies diagram prompts, indicating how a diagram type would be encoded in the prompt. While none of the excerpts explicitly state Pie Chart, the idea of a specific diagram kind (e.g., UML, ER) and the mechanics of prompting for Mermaid diagrams are the closest supports. The excerpts that show concrete Mermaid diagram prompts and how they translate inputs into diagrams (including flow and example Mermaid blocks) provide relevant context for how a Pie Chart specification would be embedded in a similar prompt template. Excerpts that discuss ER diagrams or shop-flow diagrams are tangential but still relevant as they demonstrate the variety of diagram types that can be prompted through Mermaid prompts. Taken together, these excerpts support the notion that a diagram_type field within a Mermaid prompt would guide the generation toward a specific chart style, even if Pie Chart isn’t explicitly named in the excerpts.",
      "confidence": "medium"
    },
    {
      "field": "error_handling_and_self_repair_loop.iterative_repair_process",
      "citations": [
        {
          "title": "Mermaid diagrams and automatic repair (GenAIScript blog)",
          "url": "https://microsoft.github.io/genaiscript/blog/mermaids/",
          "excerpts": [
            "We have added a “repairer” in [system.diagrams](/genaiscript/reference/scripts/system) system prompt. The repairer looks for `mermaid` code blocks in the output and tries to parse them. If it the diagram has parse errors, the repairer adds a message to the chat to fix those.",
            "### The LLM repairs the diagram",
            "The repairer enters the game and responds to the assistant with a message to fix the error.",
            "The repaired diagram",
            "Parse error on line 3:\n\n\n\n...--> B{Is it?} B ->|Yes| C[OK]    B\n\n\n\n----------------------^\n\n\n\nExpecting 'SEMI', 'NEWLINE', 'EOF', 'AMP', 'START_LINK', 'LINK', 'LINK_ID', got 'MINUS'",
            "()\n\nOne issue with mermaid is that… syntax matters and LLM sometimes get it wrong. Let’s introduce a syntax error in the example above. ```\n```mermaid\n\n\n\ngraph TD\n\n\n\nA[Start] --> B{Is it?} B ->|Yes| C[OK]\n\n\n\nB -->|No| D[Not OK]\n\n\n\nC --> E[End]\n\n\n\nD --> E\n\n\n\n```\n```\n\nNow mermaid fails to parse and the diagram is not rendered:\n\n```\nParse error on line 3:\n\n\n\n...--> B{Is it?} B ->|Yes| C[OK]    B\n\n\n\n----------------------^",
            "Expecting 'NEWLINE', 'EOF', 'SQS', 'STR', 'DOT', 'GENERICTYPE', 'LABEL', 'STRUCT_START', 'STRUCT_STOP', 'STYLE_SEPARATOR', 'ANNOTATION_END', 'ALPHA', 'AGGREGATION', 'EXTENSION', 'COMPOSITION', 'DEPE…"
          ]
        },
        {
          "title": "AI-Powered Mermaid Diagram Fixer and Enhanced Generation ...",
          "url": "https://github.com/RooCodeInc/Roo-Code/issues/7513",
          "excerpts": [
            "2. **Gemini Stage 1 - Structured JSON Generation:** Use Gemini to convert the invalid Mermaid code and error into a structured JSON object conforming to a predefined schema.",
            "4. **Gemini Stage 2 - Python Code Generation for Mermaid Conversion:** Generate Python code to convert the validated JSON into Mermaid DSL.",
            "6. **Post-processing and Final Output:** Clean the generated Mermaid DSL and perform a final client-side Mermaid syntax validation (optional, requires Node.js and Mermaid CLI)."
          ]
        }
      ],
      "reasoning": "The most relevant passages describe a repair mechanism that actively detects Mermaid parsing failures, captures detailed error information, and drives an iterative prompt-response loop to fix the diagram. A passage describing the addition of a repairer that scans the assistant’s output for mermaid code blocks, attempts to parse them, and, upon detecting errors, appends a fix-it prompt into the chat, directly maps to the concept of a self-repair loop that continually refines code until syntactically valid. A separate excerpt notes that the LLM itself performs repairs on the diagram, reinforcing the notion of an iterative cycle where feedback guides successive generations toward correctness. Another excerpt explicitly calls out the repaired diagram and the progression from error to fixed output, which aligns with the loop terminating when mermaid.parse() succeeds. Beyond these, passages describing GenAIScript-style processes articulate a staged, structured repair methodology (Stage 1: Generate, Stage 2: Validate with a parsing tool and error handler, Stage 3: Create a corrected version, Stage 4: Iterate) which precisely embodies the iterative refinement ethos of the field value. Additional context is provided by excerpts detailing parse errors and automatic repair workflows, illustrating the common concrete manifestations of such loops in Mermaid diagram generation. The combination of explicit repair components, error-driven prompts, and iterative correction steps strongly supports the specified iterative self-repair process as described in the field value.",
      "confidence": "high"
    },
    {
      "field": "diagram_specific_prompt_templates.4.example_instantiation",
      "citations": [
        {
          "title": "Using Mermaid Diagrams 100x Better with Your Favorite AI / LLM App (Dev to article)",
          "url": "https://dev.to/yigit-konur/using-mermaid-diagrams-100x-better-with-your-favorite-ai-llm-app-3m1p",
          "excerpts": [
            "Your primary function is to transform ANY textual diagram idea, natural language description, malformed/incomplete Mermaid code, or embedded Mermaid blocks within Markdown into **production-ready, syntactically pristine, visually compelling, and interactive Mermaid diagrams. ** You will also provide micro-documentation via a concise changelog and embedded tool",
            "If you're curious, you can check out the full prompt on GitHub here: <https://gist.githubusercontent.com/yigitkonur/af07453dd812cd8a0b565fed62dd0f7d/raw/eec183bb6e9777d888e49870b4f994f957da979d/llm-mermaid.md>",
            "Phase 1: Input Ingestion & Contextual Analysis",
            "I use Mermaid diagrams constantly in my daily workflow. But honestly, most AI apps tend to mess them up when generating these diagrams. It doesn't matter if it's the smartest model out there or the simplest one—mistakes still happen. That's why having a rock-solid prompt is super important for getting things right."
          ]
        },
        {
          "title": "LLM + Mermaid: How Modern Teams Create UML Diagrams ...",
          "url": "https://mike-vincent.medium.com/llm-mermaid-how-modern-teams-create-uml-diagrams-without-lucidchart-e54c56350804",
          "excerpts": [
            "Entity Relationship Diagrams: Defining the Data Model"
          ]
        }
      ],
      "reasoning": "The target field value is a concrete Mermaid ER diagram example used within a prompt template. A passage stating that the primary function is to transform any textual diagram idea or incomplete Mermaid code into production-ready, syntactically pristine Mermaid diagrams directly supports the idea of an instantiation that would produce such an ER diagram when run by an LLM. A passage pointing to the full prompt on GitHub indicates there exists a concrete prompt template that would instantiate diagrams like the one shown, which is highly relevant. A passage describing Phase 1: Input Ingestion & Contextual Analysis signals the design approach used to feed and refine diagram prompts, aligning with how an example instantiation would be approached in practice. A further note that prompts include rock-solid prompts and the importance of accuracy underscores the reliability of an example like the given ER diagram. While a general complaint about Mermaid diagrams’ accuracy is tangential, it still supports the necessity of a well-crafted prompt that would generate correct diagrams. Finally, a reference to using Mermaid diagrams within contexts of LLMs and UML/ER diagrams ties the example instantiation to the broader domain, supporting relevance to the specific field value.",
      "confidence": "medium"
    },
    {
      "field": "common_errors_and_fixes_cheatsheet.4.cause_and_fix",
      "citations": [
        {
          "title": "Mermaid Mermaid issue 4571 - ER diagram parse error with attribute starting with a number",
          "url": "https://github.com/mermaid-js/mermaid/issues/4571",
          "excerpts": [
            "        varchar 2fa_name",
            "        int 2fa_length",
            "        tinyint 2fa_userchange",
            "        tinyint enableCustomers",
            "        tinyint enableRouting"
          ]
        }
      ],
      "reasoning": "The finegrained field value identifies a cause-and-fix pattern: an attribute name beginning with a number is not allowed and the fix is to rename it so the name begins with a letter. The excerpts provide direct evidence of this issue: attributes like 2fa_name, 2fa_length, and 2fa_userchange illustrate the leading-digit problem that triggers errors. They also demonstrate a remedy approach by showing how such attributes are written (and potentially renamed) in the surrounding context, including the general guidance to rename to a letter-starting form (e.g., 2fa_provider -> two_fa_provider). The presence of related attributes that start with letters (enableCustomers, enableRouting) helps establish the contrast and supports the notion that letter-starting names are the conventional, valid form. Taken together, these excerpts directly support the stated cause (leading digit in an attribute name) and fix (rename to begin with a letter) for the field value, with the leading-digit examples being the strongest direct evidence and the letter-starting examples providing contextual validation of the recommended pattern.",
      "confidence": "high"
    },
    {
      "field": "common_errors_and_fixes_cheatsheet.5.diagram_type",
      "citations": [
        {
          "title": "Mermaid Mermaid issue 4571 - ER diagram parse error with attribute starting with a number",
          "url": "https://github.com/mermaid-js/mermaid/issues/4571",
          "excerpts": [
            "        varchar 2fa_name",
            "        int 2fa_length",
            "        tinyint 2fa_userchange",
            "        tinyint enableCustomers",
            "        tinyint enableRouting"
          ]
        }
      ],
      "reasoning": "The excerpts that discuss ER diagram parsing issues directly align with the diagram type ER Diagram. They describe errors encountered when representing ER diagrams (e.g., ER diagram parse error with an attribute starting with a number), which reinforces the association between the content and the diagram type in question. These excerpts provide direct evidence about handling ER Diagrams in Mermaid, including parsing challenges that are characteristic of ER-style schemas. The other excerpts, while related to Mermaid parsing topics, do not explicitly frame the content around ER Diagram as a type, so they are less directly relevant to the specified fine-grained field value. Therefore, the most relevant excerpts are those that explicitly mention ER diagram parsing errors, with slightly less direct relevance given to those that describe general parse errors or attribute-related syntax without explicitly naming ER Diagram. The cited passages support the claim that ER Diagram is a pertinent diagram type in the Mermaid context and that parse-related issues arise when attempting to model such diagrams. ",
      "confidence": "high"
    },
    {
      "field": "diagram_specific_prompt_templates.0.example_instantiation",
      "citations": [
        {
          "title": "LLM + Mermaid: How Modern Teams Create UML Diagrams ...",
          "url": "https://mike-vincent.medium.com/llm-mermaid-how-modern-teams-create-uml-diagrams-without-lucidchart-e54c56350804",
          "excerpts": [
            "flowchart TD  ",
            "    Start((Browse Products)) --> AddToCart[Add to Cart]  ",
            "    AddToCart --> Decision{Proceed to Checkout?} Decision -- Yes --> CheckStock[Check Stock]  ",
            "    Decision -- No --> Start  ",
            "    CheckStock -- In Stock --> Checkout[Proceed to Checkout]  ",
            "    Payment -- Success --> Complete((Order Complete))  ",
            "    Payment -- Failure --> Retry[Retry Payment]  ",
            "    Retry --> Payment"
          ]
        }
      ],
      "reasoning": "The target field value is a complete Mermaid flowchart definition beginning with flowchart TD and including node definitions (A[Start], B(Process 1);), decisions, and links (C -->|Yes| D[Sub-process];). Excerpts that explicitly show the Mermaid flowchart header (flowchart TD) and typical edge/node syntax directly support the structure and composition of that field value. For example, the excerpt that notes flowchart TD appears to signal the exact diagram language and layout conventions used in the target value. Several excerpts provide concrete Mermaid diagrams with node-edge patterns such as Start, Browse Products, Add to Cart, and Checkout workflows, which align with the style and elements of the target definition (A[Start] --> B(Process 1);, C -->|Yes| D[Sub-process];, and D --> E;). These excerpts demonstrate the same syntax and diagramming approach, including Rabbit-ear styling and labeled edges, which are the kind of details present in the target flowchart. The presence of sequences like Start -> Process -> Decision with Yes/No branches, and subsequent steps like Checkout or Complete, corroborates that the field value is intending a similar end-to-end flowchart layout. Additionally, excerpts that show more complete paths (for example, a chain from Start to Checkout and to Complete) help validate the compositional structure of a flowchart TD with multiple stages and branching conditions, which is consistent with the target code’s intent. While some excerpts offer partial or variant diagrams, their shared use of Mermaid flowchart syntax and directional arrows strengthens their relevance to interpreting or validating the specified flowchart content. ",
      "confidence": "medium"
    },
    {
      "field": "error_handling_and_self_repair_loop.minimal_change_principles",
      "citations": [
        {
          "title": "Mermaid diagrams and automatic repair (GenAIScript blog)",
          "url": "https://microsoft.github.io/genaiscript/blog/mermaids/",
          "excerpts": [
            "Expecting 'SEMI', 'NEWLINE', 'EOF', 'AMP', 'START_LINK', 'LINK', 'LINK_ID', got 'MINUS'",
            "C --> E[End]",
            "Now mermaid fails to parse and the diagram is not rendered:\n\n```\nParse error on line 3:\n\n\n\n...--> B{Is it?} B ->|Yes| C[OK]    B\n\n\n\n----------------------^",
            "Parse error on line 3:\n\n\n\n...--> B{Is it?} B ->|Yes| C[OK]    B\n\n\n\n----------------------^\n\n\n\nExpecting 'SEMI', 'NEWLINE', 'EOF', 'AMP', 'START_LINK', 'LINK', 'LINK_ID', got 'MINUS'",
            "We have added a “repairer” in [system.diagrams](/genaiscript/reference/scripts/system) system prompt. The repairer looks for `mermaid` code blocks in the output and tries to parse them. If it the diagram has parse errors, the repairer adds a message to the chat to fix those.",
            "The repairer enters the game and responds to the assistant with a message to fix the error.",
            "The repaired diagram"
          ]
        },
        {
          "title": "Mermaid Error Handling and Repair (Mermaid API/Dart docs and GenAIScript reference)",
          "url": "https://pub.dev/documentation/mermaid/latest/mermaid/mermaidApiParse.html",
          "excerpts": [
            " true if the\ndiagram syntax is valid. If [mermaidSetParseErrorHandler](../mermaid/mermaidSetParseErrorHandler.html) has been used to set\na parseError() handler then this method will return false if the diagram\nsyntax is invalid. (If no parseError() handler has been "
          ]
        },
        {
          "title": "mermaidSetParseErrorHandler function - mermaid library - Dart API",
          "url": "https://pub.dev/documentation/mermaid/latest/mermaid/mermaidSetParseErrorHandler.html",
          "excerpts": [
            "Used to set a handler to be called when invalid diagram syntax is encountered. The definition of the function should match void parseError(String err,String ... Used to set a handler to be called when invalid diagram syntax is encountered. The definition of the function should match void parseError(String err,String ..."
          ]
        }
      ],
      "reasoning": "The most relevant material directly shows the exact mechanisms the finegrained field value prescribes. First, there is an explicit error message fragment listing a set of valid tokens after the word “Expecting,” which aligns with the idea of using the parser’s hash.expected token list as guidance for what to replace. This supports the concept of targeting a minimal change by substituting the incorrect token with a known valid alternative. Relatedly, the accompanying note about the parse error location, including a caret pointing to the fault, demonstrates how line numbers and pointers can direct an LLM to the precise fault location, which is central to minimal edits. Additional excerpts illustrate the broader repair workflow: a narrative about a “repairer” that detects parse errors, repairs diagrams, and returns a corrected diagram, signaling a structured approach to targeted fixes rather than full regeneration. There are concrete examples of parse errors and the exact location of faults (line and caret), followed by mentions of a repair mechanism that fixes the diagram and returns a repaired diagram. These pieces collectively support the proposed method: leverage explicit error details (line, caret, expected tokens) to instruct minimal, constrained edits, preserve valid sections, and rely on an automated repair process to implement those edits. The excerpts describing a repairer and the staged repair process (structured JSON stages and automated repair flow) further ground the idea of a minimal-change, error-driven repair pipeline rather than wholesale diagram regeneration. Taken together, the strongest support comes from explicit references to the expected-token guidance and the error-location pointer, complemented by descriptions of repair-oriented systems that minimize changes and preserve validity. The supporting excerpts also describe a broader repair workflow that aligns with the target principle, though the finer operational details (e.g., exact prompts) are inferred from the context of the repair-focused discussions.\n",
      "confidence": "medium"
    },
    {
      "field": "common_errors_and_fixes_cheatsheet.5.error_category",
      "citations": [
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "Parse error on line 1:↵graph TD    Q1[Question ↵-----^↵Expecting 'NODIR', 'DIR', got 'SPACE"
          ]
        },
        {
          "title": "mermaidjs/mermaid.cli - Parsing subgraph fails on brackets",
          "url": "https://github.com/mermaidjs/mermaid.cli/issues/68",
          "excerpts": [
            "Oct 23, 2019 — ... Error: Parse error on line 2: ...raph TBsubgraph BIG[better]A-->Bend ----------------------^ Expecting 'SEMI', 'NEWLINE', 'SPACE', 'EOF ..."
          ]
        },
        {
          "title": "Mermaid Issue 6904 on GitHub",
          "url": "https://github.com/mermaid-js/mermaid/issues/6904",
          "excerpts": [
            "'EOF', 'subgraph', 'end', 'acc_title', 'acc_descr', 'acc_descr_multiline_value', 'AMP', 'COLON', 'STYLE', 'LINKSTYLE', 'CLASSDEF', 'CLASS', 'CLICK', 'DOWN', 'DEFAULT', 'NUM', 'COMMA', 'NODE_STRING', 'BRKT', 'MINUS', 'MULT', 'UNICODE_TEXT', 'direction_tb', 'direction_bt', 'direction_rl', 'direction_lr', got 'LINK_ID'",
            "```\n\nBut the cause of the error is \"@\". I send above mermaid code and error report to ChatGPT and Claude but both of them are failed to fix it. They just tried to add \"SEMI\", \"NEWLINE\" that does not fix the error. By quote the label above diagram will be successfully rendered. I suggest make the error report more precise and easy to fix both for human and AI."
          ]
        },
        {
          "title": "Mermaid Mermaid issue 4571 - ER diagram parse error with attribute starting with a number",
          "url": "https://github.com/mermaid-js/mermaid/issues/4571",
          "excerpts": [
            "        varchar 2fa_name",
            "        int 2fa_length",
            "        tinyint 2fa_userchange",
            "        tinyint enableCustomers",
            "        tinyint enableRouting"
          ]
        }
      ],
      "reasoning": "The target field value is a label for a parsing failure: 'Parse Error'. Direct matches include excerpts that explicitly say 'Parse error on line ...' or reference parsing issues in Mermaid-related contexts. The strongest support comes from a line that directly states a parse error on a specific line in Mermaid code, which aligns with the field value as a general 'Parse Error' category. Additional entries describe parse errors encountered in Mermaid diagrams, including errors in subgraphs or attributes, which reinforces that parsing failures are the central issue. Other excerpts provide contextual evidence about error handling and error reports in Mermaid-related tooling, further corroborating that parsing failures are a recurring theme across these sources. Collectively, these excerpts support categorizing the issue under a 'Parse Error' label, with the most precise support coming from explicit mentions of a parse error on specific lines, followed by related parse-error discussions and examples.",
      "confidence": "high"
    },
    {
      "field": "diagram_specific_prompt_templates.1.example_instantiation",
      "citations": [
        {
          "title": "Using Mermaid Diagrams 100x Better with Your Favorite AI / LLM App (Dev to article)",
          "url": "https://dev.to/yigit-konur/using-mermaid-diagrams-100x-better-with-your-favorite-ai-llm-app-3m1p",
          "excerpts": [
            "Your primary function is to transform ANY textual diagram idea, natural language description, malformed/incomplete Mermaid code, or embedded Mermaid blocks within Markdown into **production-ready, syntactically pristine, visually compelling, and interactive Mermaid diagrams. ** You will also provide micro-documentation via a concise changelog and embedded tool",
            "If you're curious, you can check out the full prompt on GitHub here: <https://gist.githubusercontent.com/yigitkonur/af07453dd812cd8a0b565fed62dd0f7d/raw/eec183bb6e9777d888e49870b4f994f957da979d/llm-mermaid.md>"
          ]
        },
        {
          "title": "The ChatGPT prompt list for Software Engineers - Medium",
          "url": "https://medium.com/@martin-jurran/chatgpt-prompt-list-for-software-engineers-prompts-to-generate-software-diagrams-in-mermaid-deaf2f373104",
          "excerpts": [
            "The most comprehensive list of how ChatGPT and other LLMs can support diagram creation in Mermaid. Contains lots of useful prompts and other ..."
          ]
        },
        {
          "title": "Flowcharts – Basic Syntax",
          "url": "https://docs.mermaidchart.com/mermaid-oss/syntax/flowchart.html",
          "excerpts": [
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Directives Documentation",
          "url": "https://docs.mermaidchart.com/mermaid-oss/config/directives.html",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Documentation - Diagram Syntax",
          "url": "https://mermaid.js.org/intro/syntax-reference.html",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "LLM + Mermaid: How Modern Teams Create UML Diagrams ...",
          "url": "https://mike-vincent.medium.com/llm-mermaid-how-modern-teams-create-uml-diagrams-without-lucidchart-e54c56350804",
          "excerpts": [
            "```",
            "```",
            "```",
            "```",
            "```",
            "```",
            "flowchart TD  ",
            "    Start((Browse Products)) --> AddToCart[Add to Cart]  "
          ]
        },
        {
          "title": "Can I control the direction of flowcharts in Mermaid? - Stack Overflow",
          "url": "https://stackoverflow.com/questions/66631182/can-i-control-the-direction-of-flowcharts-in-mermaid",
          "excerpts": [
            "```",
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Let the user decide the size and alignment of mermaid diagrams",
          "url": "https://forum.obsidian.md/t/let-the-user-decide-the-size-and-alignment-of-mermaid-diagrams/7019",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Config Documentation",
          "url": "https://mermaid.js.org/config/schema-docs/config.html",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "CSS aspect-ratio (MDN)",
          "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Havelsan's Revenue in 2024",
          "url": "https://github.com/RooCodeInc/Roo-Code/issues/6712",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid diagrams and automatic repair (GenAIScript blog)",
          "url": "https://microsoft.github.io/genaiscript/blog/mermaids/",
          "excerpts": [
            "```"
          ]
        },
        {
          "title": "Mermaid Mermaid issue 4571 - ER diagram parse error with attribute starting with a number",
          "url": "https://github.com/mermaid-js/mermaid/issues/4571",
          "excerpts": [
            "```"
          ]
        },
        {
          "title": "Flowchart: Add inheritDir option to make subgraphs inherit global ...",
          "url": "https://github.com/mermaid-js/mermaid/issues/6492",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Support specifying that two nodes should be at the same level/rank",
          "url": "https://github.com/mermaid-js/mermaid/issues/3723",
          "excerpts": [
            "```",
            "```"
          ]
        }
      ],
      "reasoning": "The field value is a Mermaid sequenceDiagram with initialization options and a simple interaction sequence involving a User, WebServer, and DB. Excerpt content that directly addresses turning textual ideas or diagram concepts into production-ready Mermaid diagrams supports the existence of templates or prompts for Mermaid diagrams, which is highly relevant to the field value. Excerpts that discuss comprehensive prompt lists for software diagrams in Mermaid also support the idea of using predefined templates or prompts to generate Mermaid diagrams, aligning with the concept of an example_instantiation. Excerpts that describe Mermaid usage for UML or other diagram types still relate, since they establish Mermaid as the target diagram language and show how teams leverage Mermaid in practice. Specifically, phrases describing transformation of diagram ideas into pristine Mermaid diagrams, and references to Mermaid prompts or GitHub/gist prompts for Mermaid diagrams, directly corroborate the idea of structured Mermaid diagram generation, including sequence diagrams when such prompts are applied. The presence of Mermaid-related content in multiple sources strengthens the context that templates or instantiations could exist for Mermaid sequence diagrams, like the one provided in the finegrained field value.",
      "confidence": "medium"
    },
    {
      "field": "accessibility_and_readability_practices.screen_reader_support",
      "citations": [
        {
          "title": "Accessibility Options",
          "url": "https://mermaid.js.org/config/accessibility.html",
          "excerpts": [
            "The **accessible title** is specified with the **accTitle** _keyword_ , followed by a colon ( `:` ), and the string value for the title. The string value ends at the end of the line. (It can only be a single line.) Ex: `accTitle: This is a single line title`",
            "Support for accessible titles and descriptions is available for all diagrams/chart types. We have tried to keep the same keywords and format for all diagrams so that it is easy to understand and maintain. The accessible title and description will add `<title>` and `<desc>` elements within the SVG element and the [aria-labelledby](https://www.w3.org/TR/wai-aria/) and [aria-describedby](https://www.w3.org/TR/wai-aria/) attributes in the SVG tag.",
            "Here is HTML that is generated, showing that the SVG element is labelled by the accessible title (id = `chart-title-mermaid-1668725057758` ) and described by the accessible description (id = `chart-desc-mermaid-1668725057758` ); and the accessible title element (text = \"This is the accessible title\") and the accessible description element (text = \"This is an accessible description\").",
            "Mermaid will automatically insert the [aria-roledescription]() and, if provided in the diagram text by the diagram author, the [accessible title and description. ]()",
            "html"
          ]
        },
        {
          "title": "How to Meet WCAG (Quick Reference) - W3C",
          "url": "https://www.w3.org/WAI/WCAG22/quickref/",
          "excerpts": [
            "All non-text content that is presented to the user has a text alternative that serves the equivalent purpose, except for the situations listed below. 1.4.8 Visual Presentation; 1.4.9 Images of Text (No Exception); 1.4.10 Reflow; 1.4.11 Non-text Contrast; 1.4.12 Text Spacing; 1.4.13 Content on Hover or Focus. A customizable quick reference to Web Content Accessibility Guidelines (WCAG) 2 requirements (success criteria) and techniques."
          ]
        },
        {
          "title": "Understanding Guideline 1.4: Distinguishable | WAI",
          "url": "https://www.w3.org/WAI/WCAG21/Understanding/distinguishable.html",
          "excerpts": [
            "This guideline is concerned with making the default presentation as easy to perceive as possible to people with disabilities."
          ]
        }
      ],
      "reasoning": "The most relevant content directly ties accTitle to a single-line title for the diagram and describes how it is implemented by generating a <title> element inside the SVG and updating the root SVG tag to use aria-labelledby to point to that title. This aligns with the requested fine-grained field value that emphasizes screen-reader-accessible text for diagrams. Specifically, the explanation that accTitle provides a concise, single-line title and its syntax (accTitle: Your Diagram Title) supports the claim that there is an explicit, parsable syntax that improves accessibility through a descriptive title in the SVG. Related content notes that the accDescr keyword provides a multiline description and that a <desc> element is generated and that aria-describedby references this description, which directly supports the screen-reader accessibility narrative described in the field value. Additional excerpts state that Mermaid automatically inserts ARIA-related attributes and that accessible titles and descriptions are incorporated within the SVG and its attributes (aria-labelledby and aria-describedby), which corroborates the mechanism by which assistive technologies access the diagram’s accessible text. These excerpts together directly support the field value’s assertion that Mermaid includes specific syntax to improve accessibility, and that this results in a descriptive text that is read by screen readers, both for the concise title and the more detailed description. The remaining excerpts provide broader context about accessibility (e.g., general WCAG guidelines and contrast requirements) but do not directly describe the accTitle/accDescr mechanism or the resulting SVG structure, so they are considered supportive but less central to the precise field value.",
      "confidence": "high"
    },
    {
      "field": "common_errors_and_fixes_cheatsheet.6.error_category",
      "citations": [
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "Parse error on line 1:↵graph TD    Q1[Question ↵-----^↵Expecting 'NODIR', 'DIR', got 'SPACE",
            "```\ngraph TD\n    Q1[Question 1]\n    Q1 -->|oui| Q1.1[Question 1.1]\n    Q1 -->|non| Q1.2[Question 1.2]\n    Q1.1 -->|oui| Q1.1.1[Question 1.1.1]\n    Q1.1 -->|non| Q1.1.2[Question 1.1.2]\n    Q1.2 -->|oui| Q1.2.1[Question 1.2.1]\n    Q1.2 -->|non| Q1.2.2[Question 1.2.2]\n    Q1.2.1 -->|oui| Q1.2.11[Question 1.2.11]\n    Q1.2.1 -->|non| Q1.2.21[Question 1.2.21]\n    Q1.1.1 -->|signal| R[Result]\n    Q1.1.2 -->|signal| R\n    Q1.2.11 -->|signal| R\n    Q1.2.21 -->|signal| R\n    Q1.2.2 -->|signal| R\n```\n"
          ]
        },
        {
          "title": "mermaidjs/mermaid.cli - Parsing subgraph fails on brackets",
          "url": "https://github.com/mermaidjs/mermaid.cli/issues/68",
          "excerpts": [
            "Oct 23, 2019 — ... Error: Parse error on line 2: ...raph TBsubgraph BIG[better]A-->Bend ----------------------^ Expecting 'SEMI', 'NEWLINE', 'SPACE', 'EOF ..."
          ]
        }
      ],
      "reasoning": "The field value 'Parse Error' is directly supported by excerpts that explicitly state a parse error, such as 'Parse error on line 1' describing a syntax issue in Mermaid diagrams. Another excerpt notes 'Error: Parse error on line 2', reinforcing the same category of parsing failures. A third excerpt shows Mermaid syntax and a complete graph example, which is contextually related to Mermaid parsing but does not explicitly claim an error; it provides related content that could illustrate typical Mermaid input that might encounter parsing issues. Together, these excerpts collectively support the existence and nature of parse errors in Mermaid-related diagrams, matching the finegrained field indicating a parsing failure category. The most direct evidence comes from the explicit parse-error statements, followed by the adjacent context illustrating Mermaid usage that could lead to such errors.",
      "confidence": "high"
    },
    {
      "field": "diagram_specific_prompt_templates.1.prompt_template_text",
      "citations": [
        {
          "title": "Using Mermaid Diagrams 100x Better with Your Favorite AI / LLM App (Dev to article)",
          "url": "https://dev.to/yigit-konur/using-mermaid-diagrams-100x-better-with-your-favorite-ai-llm-app-3m1p",
          "excerpts": [
            "Your primary function is to transform ANY textual diagram idea, natural language description, malformed/incomplete Mermaid code, or embedded Mermaid blocks within Markdown into **production-ready, syntactically pristine, visually compelling, and interactive Mermaid diagrams. ** You will also provide micro-documentation via a concise changelog and embedded tool",
            "If you're curious, you can check out the full prompt on GitHub here: <https://gist.githubusercontent.com/yigitkonur/af07453dd812cd8a0b565fed62dd0f7d/raw/eec183bb6e9777d888e49870b4f994f957da979d/llm-mermaid.md>"
          ]
        },
        {
          "title": "The ChatGPT prompt list for Software Engineers - Medium",
          "url": "https://medium.com/@martin-jurran/chatgpt-prompt-list-for-software-engineers-prompts-to-generate-software-diagrams-in-mermaid-deaf2f373104",
          "excerpts": [
            "The most comprehensive list of how ChatGPT and other LLMs can support diagram creation in Mermaid. Contains lots of useful prompts and other ..."
          ]
        },
        {
          "title": "Flowcharts – Basic Syntax",
          "url": "https://docs.mermaidchart.com/mermaid-oss/syntax/flowchart.html",
          "excerpts": [
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Directives Documentation",
          "url": "https://docs.mermaidchart.com/mermaid-oss/config/directives.html",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Documentation - Diagram Syntax",
          "url": "https://mermaid.js.org/intro/syntax-reference.html",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "LLM + Mermaid: How Modern Teams Create UML Diagrams ...",
          "url": "https://mike-vincent.medium.com/llm-mermaid-how-modern-teams-create-uml-diagrams-without-lucidchart-e54c56350804",
          "excerpts": [
            "```",
            "```",
            "```",
            "```",
            "```",
            "```",
            "    Start((Browse Products)) --> AddToCart[Add to Cart]  ",
            "flowchart TD  "
          ]
        },
        {
          "title": "Can I control the direction of flowcharts in Mermaid? - Stack Overflow",
          "url": "https://stackoverflow.com/questions/66631182/can-i-control-the-direction-of-flowcharts-in-mermaid",
          "excerpts": [
            "```",
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Let the user decide the size and alignment of mermaid diagrams",
          "url": "https://forum.obsidian.md/t/let-the-user-decide-the-size-and-alignment-of-mermaid-diagrams/7019",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid Config Documentation",
          "url": "https://mermaid.js.org/config/schema-docs/config.html",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "CSS aspect-ratio (MDN)",
          "url": "https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio",
          "excerpts": [
            "```",
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "```",
            "```",
            "```"
          ]
        },
        {
          "title": "Havelsan's Revenue in 2024",
          "url": "https://github.com/RooCodeInc/Roo-Code/issues/6712",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Mermaid diagrams and automatic repair (GenAIScript blog)",
          "url": "https://microsoft.github.io/genaiscript/blog/mermaids/",
          "excerpts": [
            "```"
          ]
        },
        {
          "title": "Mermaid Mermaid issue 4571 - ER diagram parse error with attribute starting with a number",
          "url": "https://github.com/mermaid-js/mermaid/issues/4571",
          "excerpts": [
            "```"
          ]
        },
        {
          "title": "Flowchart: Add inheritDir option to make subgraphs inherit global ...",
          "url": "https://github.com/mermaid-js/mermaid/issues/6492",
          "excerpts": [
            "```",
            "```"
          ]
        },
        {
          "title": "Support specifying that two nodes should be at the same level/rank",
          "url": "https://github.com/mermaid-js/mermaid/issues/3723",
          "excerpts": [
            "```",
            "```"
          ]
        }
      ],
      "reasoning": "The target field value describes a prompt template that requests generating a Mermaid sequence diagram showing interactions among participants and to output only the raw Mermaid code without explanations. Excerpts that explain transforming textual ideas into production-ready Mermaid diagrams directly support the use of specialized prompts for Mermaid diagram creation, establishing the workflow that the field value encodes. Excerpts that point to a full prompt on GitHub further reinforce the existence and sharing of concrete prompt templates, aligning with the idea of a reusable template like the one in the field value. Excerpts describing the effectiveness of prompts for software diagrams in Mermaid and showing concrete Mermaid syntax (for example, a flowchart with labeled nodes and arrows) demonstrate the practical capabilities and constraints when generating Mermaid diagrams, which underpin the structure and output requirements implied by the field value. Put together, these excerpts collectively corroborate the concept of a specialized Mermaid diagram prompt that yields clean, code-only Mermaid output, and they illustrate how such a template might be composed and used in practice. ",
      "confidence": "medium"
    },
    {
      "field": "common_errors_and_fixes_cheatsheet.5.error_message_pattern",
      "citations": [
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "Parse error on line 1:↵graph TD    Q1[Question ↵-----^↵Expecting 'NODIR', 'DIR', got 'SPACE"
          ]
        },
        {
          "title": "mermaidjs/mermaid.cli - Parsing subgraph fails on brackets",
          "url": "https://github.com/mermaidjs/mermaid.cli/issues/68",
          "excerpts": [
            "Oct 23, 2019 — ... Error: Parse error on line 2: ...raph TBsubgraph BIG[better]A-->Bend ----------------------^ Expecting 'SEMI', 'NEWLINE', 'SPACE', 'EOF ..."
          ]
        },
        {
          "title": "Mermaid Issue 6904 on GitHub",
          "url": "https://github.com/mermaid-js/mermaid/issues/6904",
          "excerpts": [
            "'EOF', 'subgraph', 'end', 'acc_title', 'acc_descr', 'acc_descr_multiline_value', 'AMP', 'COLON', 'STYLE', 'LINKSTYLE', 'CLASSDEF', 'CLASS', 'CLICK', 'DOWN', 'DEFAULT', 'NUM', 'COMMA', 'NODE_STRING', 'BRKT', 'MINUS', 'MULT', 'UNICODE_TEXT', 'direction_tb', 'direction_bt', 'direction_rl', 'direction_lr', got 'LINK_ID'",
            "```\n\nBut the cause of the error is \"@\". I send above mermaid code and error report to ChatGPT and Claude but both of them are failed to fix it. They just tried to add \"SEMI\", \"NEWLINE\" that does not fix the error. By quote the label above diagram will be successfully rendered. I suggest make the error report more precise and easy to fix both for human and AI."
          ]
        }
      ],
      "reasoning": "The finegrained field value encodes a particular parser error pattern where a parser reports what was expected and what was actually encountered. Excerpts that demonstrate a similar structure—specifying what was expected and what was found—directly inform the understanding of such error messages. The first excerpt shows a parse error with a concrete list of expected tokens and the actual token encountered (for example, expecting certain directives and receiving SPACE). The second excerpt similarly documents a parse error where the diagram syntax is parsed line by line and the error specifies expectations versus the actual token encountered (SEMI, NEWLINE, SPACE). The eighth excerpt frames an error coming from a tokenizer/parser by listing a sequence of possible tokens and explicitly noting what was actually got (LINK_ID). The ninth excerpt discusses an error report and mentions rendering and fixing the error, reinforcing that the issue is about identifying and reporting exact token expectations versus what appeared in the code. While none of the excerpts state the exact pair ATTRIBUTE_WORD/BLOCK_STOP, they collectively illustrate the exact form and mechanism of such error messages, thereby supporting the interpretation of the finegrained field value as a particular instance of this error-reporting pattern.",
      "confidence": "medium"
    },
    {
      "field": "common_errors_and_fixes_cheatsheet.8.error_category",
      "citations": [
        {
          "title": "How to escape characters? · Issue #170 · mermaid-js ...",
          "url": "https://github.com/mermaid-js/mermaid/issues/170",
          "excerpts": [
            "Jun 9, 2015 — The answer is here: https://mermaid.js.org/syntax/flowchart.html#special-characters-that-break-syntax"
          ]
        },
        {
          "title": "Mermaid Issue 6904 on GitHub",
          "url": "https://github.com/mermaid-js/mermaid/issues/6904",
          "excerpts": [
            "```\n\nBut the cause of the error is \"@\". I send above mermaid code and error report to ChatGPT and Claude but both of them are failed to fix it. They just tried to add \"SEMI\", \"NEWLINE\" that does not fix the error. By quote the label above diagram will be successfully rendered. I suggest make the error report more precise and easy to fix both for human and AI."
          ]
        },
        {
          "title": "Syntax error in text mermaid version 10.1.0 · Issue #4432",
          "url": "https://github.com/mermaid-js/mermaid/issues/4432",
          "excerpts": [
            "Apr 28, 2023 — It is quite easy to create something that will trigger the error, problem is not being able to track it down without trial and error. And that can be quite ..."
          ]
        },
        {
          "title": "mermaidjs/mermaid.cli - Parsing subgraph fails on brackets",
          "url": "https://github.com/mermaidjs/mermaid.cli/issues/68",
          "excerpts": [
            "Oct 23, 2019 — ... Error: Parse error on line 2: ...raph TBsubgraph BIG[better]A-->Bend ----------------------^ Expecting 'SEMI', 'NEWLINE', 'SPACE', 'EOF ..."
          ]
        }
      ],
      "reasoning": "The targeted field value denotes a lexical level problem where invalid characters or token-level issues hinder parsing. The most pertinent excerpts explicitly discuss escaping problematic characters and characters that break syntax, which are classic lexical problems. One excerpt notes that escaping characters is a solution path and lists specific characters that disrupt syntax, directly tying to lexical correctness of the token stream. Another excerpt identifies a concrete cause of an error as a particular symbol (the at-sign) and discusses the need for precise error reporting to fix lexical input issues, which strongly supports the lexical error interpretation. A third excerpt frames the issue as a syntax-related parsing error, which is adjacent to lexical concerns but indicates a higher-level parsing failure beyond token-level input; it still informs the broader error family. A fourth excerpt also centers on parse-related challenges with certain characters affecting rendering, reinforcing the idea that token-level (lexical) issues can lead to errors in rendering/interpretation. Taken together, these excerpts support classifying the field value as Lexical Error due to token/character-level problems that disrupt the parser at the input stage.",
      "confidence": "high"
    },
    {
      "field": "common_errors_and_fixes_cheatsheet.7.error_category",
      "citations": [
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "Parse error on line 1:↵graph TD    Q1[Question ↵-----^↵Expecting 'NODIR', 'DIR', got 'SPACE",
            "```\ngraph TD\n    Q1[Question 1]\n    Q1 -->|oui| Q1.1[Question 1.1]\n    Q1 -->|non| Q1.2[Question 1.2]\n    Q1.1 -->|oui| Q1.1.1[Question 1.1.1]\n    Q1.1 -->|non| Q1.1.2[Question 1.1.2]\n    Q1.2 -->|oui| Q1.2.1[Question 1.2.1]\n    Q1.2 -->|non| Q1.2.2[Question 1.2.2]\n    Q1.2.1 -->|oui| Q1.2.11[Question 1.2.11]\n    Q1.2.1 -->|non| Q1.2.21[Question 1.2.21]\n    Q1.1.1 -->|signal| R[Result]\n    Q1.1.2 -->|signal| R\n    Q1.2.11 -->|signal| R\n    Q1.2.21 -->|signal| R\n    Q1.2.2 -->|signal| R\n```\n"
          ]
        },
        {
          "title": "mermaidjs/mermaid.cli - Parsing subgraph fails on brackets",
          "url": "https://github.com/mermaidjs/mermaid.cli/issues/68",
          "excerpts": [
            "Oct 23, 2019 — ... Error: Parse error on line 2: ...raph TBsubgraph BIG[better]A-->Bend ----------------------^ Expecting 'SEMI', 'NEWLINE', 'SPACE', 'EOF ..."
          ]
        },
        {
          "title": "Syntax error in text mermaid version 10.1.0 · Issue #4432",
          "url": "https://github.com/mermaid-js/mermaid/issues/4432",
          "excerpts": [
            "Apr 28, 2023 — It is quite easy to create something that will trigger the error, problem is not being able to track it down without trial and error. And that can be quite ..."
          ]
        },
        {
          "title": "Mermaid Issue 6904 on GitHub",
          "url": "https://github.com/mermaid-js/mermaid/issues/6904",
          "excerpts": [
            "'EOF', 'subgraph', 'end', 'acc_title', 'acc_descr', 'acc_descr_multiline_value', 'AMP', 'COLON', 'STYLE', 'LINKSTYLE', 'CLASSDEF', 'CLASS', 'CLICK', 'DOWN', 'DEFAULT', 'NUM', 'COMMA', 'NODE_STRING', 'BRKT', 'MINUS', 'MULT', 'UNICODE_TEXT', 'direction_tb', 'direction_bt', 'direction_rl', 'direction_lr', got 'LINK_ID'",
            "```\n\nBut the cause of the error is \"@\". I send above mermaid code and error report to ChatGPT and Claude but both of them are failed to fix it. They just tried to add \"SEMI\", \"NEWLINE\" that does not fix the error. By quote the label above diagram will be successfully rendered. I suggest make the error report more precise and easy to fix both for human and AI."
          ]
        },
        {
          "title": "Mermaid CLI - how do you escape characters?",
          "url": "https://stackoverflow.com/questions/28121525/mermaid-cli-how-do-you-escape-characters",
          "excerpts": [
            "Use quotation marks \"\" to enclose your text and escape special characters, e.g. in your example: graph TD question1{\"Gas tank less than 1/8?"
          ]
        }
      ],
      "reasoning": "The fine-grained value Parse Error is supported by excerpts that explicitly mention parse-related failures in Mermaid diagrams. For example, one excerpt reports a concrete instance of a parse error: 'Parse error on line 1: graph TD Q1[Question … Expecting 'NODIR', 'DIR', got 'SPACE'' which directly illustrates a parse error encountered during Mermaid parsing. Another excerpt shows a complete Mermaid code block with a clear parse-related message, reinforcing that the sample code triggers a parsing failure in a Mermaid graph. A third excerpt discusses errors described as 'Parsing subgraph fails on brackets,' which is another manifestation of parsing issues in Mermaid diagrams. These excerpts collectively establish that the category Parse Error is an accurate label for the described failures and align with typical parse-time diagnostics in Mermaid tooling. Additional excerpts mention syntax errors and general parsing-related warnings, which, while broader, still pertain to parse/parse-time concerns and support the overall classification of parse-related failures in Mermaid diagrams. In summary, the excerpts collectively exemplify parse-time failures in Mermaid-related contexts, directly mapping to the fine-grained field value Parse Error.",
      "confidence": "high"
    },
    {
      "field": "error_handling_and_self_repair_loop.error_detection_method",
      "citations": [
        {
          "title": "mermaidSetParseErrorHandler function - mermaid library - Dart API",
          "url": "https://pub.dev/documentation/mermaid/latest/mermaid/mermaidSetParseErrorHandler.html",
          "excerpts": [
            "Used to set a handler to be called when invalid diagram syntax is encountered. The definition of the function should match void parseError(String err,String ... Used to set a handler to be called when invalid diagram syntax is encountered. The definition of the function should match void parseError(String err,String ..."
          ]
        },
        {
          "title": "Mermaid Error Handling and Repair (Mermaid API/Dart docs and GenAIScript reference)",
          "url": "https://pub.dev/documentation/mermaid/latest/mermaid/mermaidApiParse.html",
          "excerpts": [
            " true if the\ndiagram syntax is valid. If [mermaidSetParseErrorHandler](../mermaid/mermaidSetParseErrorHandler.html) has been used to set\na parseError() handler then this method will return false if the diagram\nsyntax is invalid. (If no parseError() handler has been ",
            "Used to test diagram code before calling render(). Returns true if the diagram syntax is valid. If mermaidSetParseErrorHandler has been used to set a ..."
          ]
        },
        {
          "title": "Interface: Mermaid",
          "url": "https://mermaid.js.org/config/setup/mermaid/interfaces/Mermaid.html",
          "excerpts": [
            "> **setParseErrorHandler** : ( `parseErrorHandler` ) => `void`",
            "Defined in: [packages/mermaid/src/mermaid.ts:448](https://github.com/mermaid-js/mermaid/blob/master/packages/mermaid/src/mermaid.ts)"
          ]
        },
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "Parser error when used with mermaidAPI"
          ]
        },
        {
          "title": "Mermaid diagrams and automatic repair (GenAIScript blog)",
          "url": "https://microsoft.github.io/genaiscript/blog/mermaids/",
          "excerpts": [
            "Parse error on line 3:\n\n\n\n...--> B{Is it?} B ->|Yes| C[OK]    B\n\n\n\n----------------------^\n\n\n\nExpecting 'SEMI', 'NEWLINE', 'EOF', 'AMP', 'START_LINK', 'LINK', 'LINK_ID', got 'MINUS'",
            "()\n\nOne issue with mermaid is that… syntax matters and LLM sometimes get it wrong. Let’s introduce a syntax error in the example above. ```\n```mermaid\n\n\n\ngraph TD\n\n\n\nA[Start] --> B{Is it?} B ->|Yes| C[OK]\n\n\n\nB -->|No| D[Not OK]\n\n\n\nC --> E[End]\n\n\n\nD --> E\n\n\n\n```\n```\n\nNow mermaid fails to parse and the diagram is not rendered:\n\n```\nParse error on line 3:\n\n\n\n...--> B{Is it?} B ->|Yes| C[OK]    B\n\n\n\n----------------------^"
          ]
        }
      ],
      "reasoning": "The core finegrained field value centers on programmatic error-detection and repair using Mermaid.js parsing APIs. The most directly relevant pieces state that you can set a parse error handler to be invoked on invalid syntax, with the handler receiving an error string and a machine-readable hash that includes fields like text, token, line, and expected. This establishes a concrete mechanism for an automated error-detection loop and a menu of corrected options to drive repair. Additionally, there are explicit notes that you can configure a parse error handler using a dedicated function, which reinforces the exact pathway described in the field value. There is also guidance indicating that mermaid.parse() can be used with a parseOptions that suppresses errors, returning a boolean validity result, which aligns with the stated alternative that provides a simple true/false signal for diagram validity. Together, these excerpts map directly to the field value’s components: the existence and usage of parseError handlers, the diagnostic hash with detailed fields, and the boolean validity option when suppressErrors is used. A supporting excerpt briefly mentioning the mermaid API parseError handler’s invocation context and the option to set a handler further anchors how an automated repair loop would operate in practice, and a companion note explains the specific data exposed to the handler (err string and hash object). Additional excerpts that reference parser errors when using mermaidAPI help illustrate the kinds of errors these hooks are designed to catch and manage, reinforcing the need for programmatic detection rather than manual error inspection. The remaining excerpts provide broader context about error messages and repair workflows but are less directly tied to the exact API surface described in the field value, thus they are ranked below the core API-focused excerpts.\n",
      "confidence": "high"
    },
    {
      "field": "common_errors_and_fixes_cheatsheet.5.cause_and_fix",
      "citations": [
        {
          "title": "mermaidjs/mermaid.cli - Parsing subgraph fails on brackets",
          "url": "https://github.com/mermaidjs/mermaid.cli/issues/68",
          "excerpts": [
            "Oct 23, 2019 — ... Error: Parse error on line 2: ...raph TBsubgraph BIG[better]A-->Bend ----------------------^ Expecting 'SEMI', 'NEWLINE', 'SPACE', 'EOF ..."
          ]
        },
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "Parse error on line 1:↵graph TD    Q1[Question ↵-----^↵Expecting 'NODIR', 'DIR', got 'SPACE",
            "```\ngraph TD\n    Q1[Question 1]\n    Q1 -->|oui| Q1.1[Question 1.1]\n    Q1 -->|non| Q1.2[Question 1.2]\n    Q1.1 -->|oui| Q1.1.1[Question 1.1.1]\n    Q1.1 -->|non| Q1.1.2[Question 1.1.2]\n    Q1.2 -->|oui| Q1.2.1[Question 1.2.1]\n    Q1.2 -->|non| Q1.2.2[Question 1.2.2]\n    Q1.2.1 -->|oui| Q1.2.11[Question 1.2.11]\n    Q1.2.1 -->|non| Q1.2.21[Question 1.2.21]\n    Q1.1.1 -->|signal| R[Result]\n    Q1.1.2 -->|signal| R\n    Q1.2.11 -->|signal| R\n    Q1.2.21 -->|signal| R\n    Q1.2.2 -->|signal| R\n```\n"
          ]
        },
        {
          "title": "Mermaid Issue 6904 on GitHub",
          "url": "https://github.com/mermaid-js/mermaid/issues/6904",
          "excerpts": [
            "```\n\nBut the cause of the error is \"@\". I send above mermaid code and error report to ChatGPT and Claude but both of them are failed to fix it. They just tried to add \"SEMI\", \"NEWLINE\" that does not fix the error. By quote the label above diagram will be successfully rendered. I suggest make the error report more precise and easy to fix both for human and AI."
          ]
        }
      ],
      "reasoning": "The fine-grained field claims that a missing newline or proper separator between consecutive entity definitions causes a parse failure, and that the fix is to ensure each entity block is on its own line or separated by newlines. The most directly supportive excerpt shows a parse error on a specific line and mentions the parser’s expectations, including a reference to NEWLINE as a possible expected token, which aligns with the idea that lack of proper line separation triggers the error. Another excerpt documents a parse error on a subsequent line while illustrating a multi-line Mermaid definition, reinforcing that line structure is critical for correct parsing. A third excerpt provides a concrete example of a Mermaid snippet that would trigger a parse error, highlighting that the diagram text is sensitive to line breaks and sequence of definitions. A fourth excerpt explicitly centers on an error report that discusses handling and fixing Mermaid errors, which complements the overall narrative that parse failures can be addressed by clearer line-based structure. Taken together, these excerpts corroborate the general cause-and-fix pattern: ensure proper line separation between entity blocks and preserve newline boundaries to avoid parse errors.",
      "confidence": "medium"
    },
    {
      "field": "common_errors_and_fixes_cheatsheet.7.error_message_pattern",
      "citations": [
        {
          "title": "Mermaid Issue 6904 on GitHub",
          "url": "https://github.com/mermaid-js/mermaid/issues/6904",
          "excerpts": [
            "'EOF', 'subgraph', 'end', 'acc_title', 'acc_descr', 'acc_descr_multiline_value', 'AMP', 'COLON', 'STYLE', 'LINKSTYLE', 'CLASSDEF', 'CLASS', 'CLICK', 'DOWN', 'DEFAULT', 'NUM', 'COMMA', 'NODE_STRING', 'BRKT', 'MINUS', 'MULT', 'UNICODE_TEXT', 'direction_tb', 'direction_bt', 'direction_rl', 'direction_lr', got 'LINK_ID'"
          ]
        },
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "Parse error on line 1:↵graph TD    Q1[Question ↵-----^↵Expecting 'NODIR', 'DIR', got 'SPACE"
          ]
        },
        {
          "title": "mermaidjs/mermaid.cli - Parsing subgraph fails on brackets",
          "url": "https://github.com/mermaidjs/mermaid.cli/issues/68",
          "excerpts": [
            "Oct 23, 2019 — ... Error: Parse error on line 2: ...raph TBsubgraph BIG[better]A-->Bend ----------------------^ Expecting 'SEMI', 'NEWLINE', 'SPACE', 'EOF ..."
          ]
        }
      ],
      "reasoning": "The target field seeks a pattern of parse errors where the parser lists what it expects (for example, open_directive, NEWLINE, etc.) and contrasts that with what was actually found (such as a token like LINK or a similar token). The most relevant excerpt explicitly notes a parsing error with a list of expected tokens and reports an actual token mismatch, mentioning a specific 'got' token related to linking (LINK_ID). This directly mirrors the described error pattern in the field value. A close second excerpt documents a parse error with a table of expected tokens (SEMI, NEWLINE, SPACE) and a parse failure, illustrating the same kind of diagnostic structure where expectations are contrasted with what was encountered. A third excerpt also describes a parse error scenario where the error message includes what was encountered (for example, 'SPACE' or other tokens) and reinforces the pattern of mismatch between expected tokens and the actual token observed. Collectively, these excerpts support the idea that the field value captures a token-mismatch pattern in Mermaid parsing errors, with the strongest support coming from the explicit mention of a 'got' token and a related 'LINK' type. The content of these excerpts aligns with expectations around error messages that list expected tokens and the actual token encountered, which is the essence of the finegrained field value.",
      "confidence": "medium"
    },
    {
      "field": "common_errors_and_fixes_cheatsheet.3.error_category",
      "citations": [
        {
          "title": "Syntax error in text mermaid version 10.1.0 · Issue #4432",
          "url": "https://github.com/mermaid-js/mermaid/issues/4432",
          "excerpts": [
            "Apr 28, 2023 — It is quite easy to create something that will trigger the error, problem is not being able to track it down without trial and error. And that can be quite ..."
          ]
        },
        {
          "title": "mermaidjs/mermaid.cli - Parsing subgraph fails on brackets",
          "url": "https://github.com/mermaidjs/mermaid.cli/issues/68",
          "excerpts": [
            "Oct 23, 2019 — ... Error: Parse error on line 2: ...raph TBsubgraph BIG[better]A-->Bend ----------------------^ Expecting 'SEMI', 'NEWLINE', 'SPACE', 'EOF ..."
          ]
        },
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "```\ngraph TD\n    Q1[Question 1]\n    Q1 -->|oui| Q1.1[Question 1.1]\n    Q1 -->|non| Q1.2[Question 1.2]\n    Q1.1 -->|oui| Q1.1.1[Question 1.1.1]\n    Q1.1 -->|non| Q1.1.2[Question 1.1.2]\n    Q1.2 -->|oui| Q1.2.1[Question 1.2.1]\n    Q1.2 -->|non| Q1.2.2[Question 1.2.2]\n    Q1.2.1 -->|oui| Q1.2.11[Question 1.2.11]\n    Q1.2.1 -->|non| Q1.2.21[Question 1.2.21]\n    Q1.1.1 -->|signal| R[Result]\n    Q1.1.2 -->|signal| R\n    Q1.2.11 -->|signal| R\n    Q1.2.21 -->|signal| R\n    Q1.2.2 -->|signal| R\n```\n"
          ]
        },
        {
          "title": "mermaid - Generation of diagrams and flowcharts from text ...",
          "url": "https://unpkg.com/mermaid@0.5.2/exdoc/index.html",
          "excerpts": [
            "The parseError function will be called when the parse function returns false. The code-example below in meta code illustrates how this could work: mermaid."
          ]
        },
        {
          "title": "Mermaid Issue 6904 on GitHub",
          "url": "https://github.com/mermaid-js/mermaid/issues/6904",
          "excerpts": [
            "'EOF', 'subgraph', 'end', 'acc_title', 'acc_descr', 'acc_descr_multiline_value', 'AMP', 'COLON', 'STYLE', 'LINKSTYLE', 'CLASSDEF', 'CLASS', 'CLICK', 'DOWN', 'DEFAULT', 'NUM', 'COMMA', 'NODE_STRING', 'BRKT', 'MINUS', 'MULT', 'UNICODE_TEXT', 'direction_tb', 'direction_bt', 'direction_rl', 'direction_lr', got 'LINK_ID'",
            "```\n\nBut the cause of the error is \"@\". I send above mermaid code and error report to ChatGPT and Claude but both of them are failed to fix it. They just tried to add \"SEMI\", \"NEWLINE\" that does not fix the error. By quote the label above diagram will be successfully rendered. I suggest make the error report more precise and easy to fix both for human and AI."
          ]
        }
      ],
      "reasoning": "The most relevant content directly references syntax or parse errors in Mermaid and related tooling. A statement explicitly noting a syntax error is a clear match for a parse error category. Another excerpt discusses parsing failures in a subgraph, which is a parse-time issue, aligning with the parse error theme. An excerpt about error handling and parsing issues, including a code block illustrating parse-related behavior, further supports the concept of parse errors. A line explaining that a parseError function is invoked when the parse function fails provides a direct mechanism reference to parsing failures. An excerpt mentioning specific parser-related outcomes (such as got certain tokens) reinforces the parsing context. Finally, an excerpt that attributes an error to a particular cause (e.g., the '@' symbol) and discusses error reports for fixing parse-related issues remains relevant as it ties to diagnosing and addressing parse errors. Collectively, these excerpts map well to the Parse Error field value, showing direct mentions of syntax errors, parsing failures, and parse-time handling in Mermaid-like contexts.",
      "confidence": "high"
    },
    {
      "field": "diagram_specific_prompt_templates.4.prompt_template_text",
      "citations": [
        {
          "title": "Using Mermaid Diagrams 100x Better with Your Favorite AI / LLM App (Dev to article)",
          "url": "https://dev.to/yigit-konur/using-mermaid-diagrams-100x-better-with-your-favorite-ai-llm-app-3m1p",
          "excerpts": [
            "Your primary function is to transform ANY textual diagram idea, natural language description, malformed/incomplete Mermaid code, or embedded Mermaid blocks within Markdown into **production-ready, syntactically pristine, visually compelling, and interactive Mermaid diagrams. ** You will also provide micro-documentation via a concise changelog and embedded tool",
            "Phase 1: Input Ingestion & Contextual Analysis",
            "I use Mermaid diagrams constantly in my daily workflow. But honestly, most AI apps tend to mess them up when generating these diagrams. It doesn't matter if it's the smartest model out there or the simplest one—mistakes still happen. That's why having a rock-solid prompt is super important for getting things right.",
            "If you're curious, you can check out the full prompt on GitHub here: <https://gist.githubusercontent.com/yigitkonur/af07453dd812cd8a0b565fed62dd0f7d/raw/eec183bb6e9777d888e49870b4f994f957da979d/llm-mermaid.md>"
          ]
        },
        {
          "title": "LLM + Mermaid: How Modern Teams Create UML Diagrams ...",
          "url": "https://mike-vincent.medium.com/llm-mermaid-how-modern-teams-create-uml-diagrams-without-lucidchart-e54c56350804",
          "excerpts": [
            "Entity Relationship Diagrams: Defining the Data Model"
          ]
        }
      ],
      "reasoning": "The fine-grained field value describes a highly specific prompt template that instructs generating a Mermaid ER diagram from a database description and to output only the raw Mermaid code. The most relevant excerpts explicitly discuss converting textual diagram ideas or descriptions into production-ready Mermaid diagrams and emphasize the need for strong prompts to achieve reliable diagram outputs. They also mention downstream considerations like tooling or documentation that accompany such prompts, which supports the existence and utility of a dedicated prompt template for Mermaid ER diagrams. Additional excerpts discuss the practical experience of using Mermaid diagrams and the importance of a rock-solid prompt, which reinforces why a precise template would be desirable for consistent, code-only outputs. Together, these excerpts coherently connect to the field value by illustrating the motivation, expectations, and context for a Mermaid ER diagram prompt template that yields raw Mermaid code exclusively.",
      "confidence": "medium"
    },
    {
      "field": "common_errors_and_fixes_cheatsheet.1.error_category",
      "citations": [
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "Parse error on line 1:↵graph TD    Q1[Question ↵-----^↵Expecting 'NODIR', 'DIR', got 'SPACE",
            "```\ngraph TD\n    Q1[Question 1]\n    Q1 -->|oui| Q1.1[Question 1.1]\n    Q1 -->|non| Q1.2[Question 1.2]\n    Q1.1 -->|oui| Q1.1.1[Question 1.1.1]\n    Q1.1 -->|non| Q1.1.2[Question 1.1.2]\n    Q1.2 -->|oui| Q1.2.1[Question 1.2.1]\n    Q1.2 -->|non| Q1.2.2[Question 1.2.2]\n    Q1.2.1 -->|oui| Q1.2.11[Question 1.2.11]\n    Q1.2.1 -->|non| Q1.2.21[Question 1.2.21]\n    Q1.1.1 -->|signal| R[Result]\n    Q1.1.2 -->|signal| R\n    Q1.2.11 -->|signal| R\n    Q1.2.21 -->|signal| R\n    Q1.2.2 -->|signal| R\n```\n"
          ]
        },
        {
          "title": "mermaidjs/mermaid.cli - Parsing subgraph fails on brackets",
          "url": "https://github.com/mermaidjs/mermaid.cli/issues/68",
          "excerpts": [
            "Oct 23, 2019 — ... Error: Parse error on line 2: ...raph TBsubgraph BIG[better]A-->Bend ----------------------^ Expecting 'SEMI', 'NEWLINE', 'SPACE', 'EOF ..."
          ]
        },
        {
          "title": "Syntax error in text mermaid version 10.1.0 · Issue #4432",
          "url": "https://github.com/mermaid-js/mermaid/issues/4432",
          "excerpts": [
            "Apr 28, 2023 — It is quite easy to create something that will trigger the error, problem is not being able to track it down without trial and error. And that can be quite ..."
          ]
        },
        {
          "title": "Mermaid Issue 6904 on GitHub",
          "url": "https://github.com/mermaid-js/mermaid/issues/6904",
          "excerpts": [
            "'EOF', 'subgraph', 'end', 'acc_title', 'acc_descr', 'acc_descr_multiline_value', 'AMP', 'COLON', 'STYLE', 'LINKSTYLE', 'CLASSDEF', 'CLASS', 'CLICK', 'DOWN', 'DEFAULT', 'NUM', 'COMMA', 'NODE_STRING', 'BRKT', 'MINUS', 'MULT', 'UNICODE_TEXT', 'direction_tb', 'direction_bt', 'direction_rl', 'direction_lr', got 'LINK_ID'",
            "```\n\nBut the cause of the error is \"@\". I send above mermaid code and error report to ChatGPT and Claude but both of them are failed to fix it. They just tried to add \"SEMI\", \"NEWLINE\" that does not fix the error. By quote the label above diagram will be successfully rendered. I suggest make the error report more precise and easy to fix both for human and AI."
          ]
        }
      ],
      "reasoning": "The target field value identifies a parse error category. Excerpts that explicitly report a parse error on a specific line provide direct evidence supporting the existence of a parse error issue in Mermaid parsing. In particular, lines stating \"Parse error on line 1\" and \"Parse error on line 2\" demonstrate concrete instances of parse failures, which align with the field value of a parse error category. Additional items mentioning a parse error or general syntax-related issues in Mermaid further support the notion that parsing problems are a recurring theme, even if they do not always use the exact wording \"Parse error\". A few excerpts describe broader syntax or escaping considerations, which are related to parsing robustness but do not confirm a parse error themselves; these provide contextual support indicating why parse errors may occur. Other excerpts that illustrate error reporting and token-related problems corroborate that Mermaid parsing can fail due to specific constructs, reinforcing the overall parse-error context. Taken together, the strongest support comes from the explicit parse-error statements, with supporting context from related parsing and syntax discussions.",
      "confidence": "high"
    },
    {
      "field": "common_errors_and_fixes_cheatsheet.8.diagram_type",
      "citations": [
        {
          "title": "Mermaid Issue 6904 on GitHub",
          "url": "https://github.com/mermaid-js/mermaid/issues/6904",
          "excerpts": [
            "```\n\nBut the cause of the error is \"@\". I send above mermaid code and error report to ChatGPT and Claude but both of them are failed to fix it. They just tried to add \"SEMI\", \"NEWLINE\" that does not fix the error. By quote the label above diagram will be successfully rendered. I suggest make the error report more precise and easy to fix both for human and AI."
          ]
        },
        {
          "title": "Syntax error in text mermaid version 10.1.0 · Issue #4432",
          "url": "https://github.com/mermaid-js/mermaid/issues/4432",
          "excerpts": [
            "Apr 28, 2023 — It is quite easy to create something that will trigger the error, problem is not being able to track it down without trial and error. And that can be quite ..."
          ]
        },
        {
          "title": "mermaidjs/mermaid.cli - Parsing subgraph fails on brackets",
          "url": "https://github.com/mermaidjs/mermaid.cli/issues/68",
          "excerpts": [
            "Oct 23, 2019 — ... Error: Parse error on line 2: ...raph TBsubgraph BIG[better]A-->Bend ----------------------^ Expecting 'SEMI', 'NEWLINE', 'SPACE', 'EOF ..."
          ]
        },
        {
          "title": "How to escape characters? · Issue #170 · mermaid-js ...",
          "url": "https://github.com/mermaid-js/mermaid/issues/170",
          "excerpts": [
            "Jun 9, 2015 — The answer is here: https://mermaid.js.org/syntax/flowchart.html#special-characters-that-break-syntax",
            "Jun 9, 2015 — Could someone post a new mermaid.live link with escaping @, ~, \", (, and )?. React with 12"
          ]
        }
      ],
      "reasoning": "The field asks about a diagram-type attribute and assigns the value 'Any', which implies a generic or non-specific diagram category within Mermaid diagrams. The most directly relevant excerpt discusses a diagram rendering scenario and an error report relating to Mermaid diagrams, indicating practical considerations when diagrams are rendered but not specifying diagram types. Other excerpts address parsing and syntax errors in Mermaid, including parsing subgraphs and escaping problematic characters, which are tangentially related because they affect how diagrams are recognized or rendered. Collectively, these excerpts show that Mermaid diagrams are involved and that type-related issues may be impacted by syntax and specific features, but none provide a clear assertion about a diagram-type field or an 'Any' classification. Hence, the evidence supports the general context (Mermaid diagrams and their common pitfalls) but does not substantiate a concrete claim about a diagram-type field value of 'Any'.",
      "confidence": "low"
    },
    {
      "field": "common_errors_and_fixes_cheatsheet.3.diagram_type",
      "citations": [
        {
          "title": "Mermaid Mermaid issue 4571 - ER diagram parse error with attribute starting with a number",
          "url": "https://github.com/mermaid-js/mermaid/issues/4571",
          "excerpts": [
            "        varchar 2fa_name",
            "        int 2fa_length",
            "        tinyint 2fa_userchange",
            "        tinyint enableCustomers",
            "        tinyint enableRouting"
          ]
        }
      ],
      "reasoning": "The finegrained field value identifies the type of diagram as an ER Diagram. Excerpts that explicitly describe ER diagram parse errors, especially with attributes that start with a numeric character, directly pertain to ER diagram structure, validation rules, and common failures when modeling entities and relationships. The first excerpt notes an ER diagram parse error scenario with attributes starting with a number, illustrating a concrete ER-related parsing pitfall. The subsequent excerpts similarly describe issues encountered in ER diagram definitions where numeric-prefixed attribute names cause parsing problems, which is a core concern for ER diagram correctness and tooling compatibility. These pieces collectively support the notion that ER Diagram is a distinct diagram type with specific parsing constraints and failure modes, aligning with the field value. Other excerpts focus on Mermaid syntax, general diagram issues, or non-ER contexts and therefore provide indirect or contextual relevance but do not directly substantiate the ER Diagram classification and its typical errors as strongly as the ER-focused excerpts do.",
      "confidence": "high"
    },
    {
      "field": "common_errors_and_fixes_cheatsheet.8.cause_and_fix",
      "citations": [
        {
          "title": "How to escape characters? · Issue #170 · mermaid-js ...",
          "url": "https://github.com/mermaid-js/mermaid/issues/170",
          "excerpts": [
            "Jun 9, 2015 — The answer is here: https://mermaid.js.org/syntax/flowchart.html#special-characters-that-break-syntax",
            "Jun 9, 2015 — Could someone post a new mermaid.live link with escaping @, ~, \", (, and )?. React with 12"
          ]
        },
        {
          "title": "Syntax error in text mermaid version 10.1.0 · Issue #4432",
          "url": "https://github.com/mermaid-js/mermaid/issues/4432",
          "excerpts": [
            "Apr 28, 2023 — It is quite easy to create something that will trigger the error, problem is not being able to track it down without trial and error. And that can be quite ..."
          ]
        },
        {
          "title": "mermaidjs/mermaid.cli - Parsing subgraph fails on brackets",
          "url": "https://github.com/mermaidjs/mermaid.cli/issues/68",
          "excerpts": [
            "Oct 23, 2019 — ... Error: Parse error on line 2: ...raph TBsubgraph BIG[better]A-->Bend ----------------------^ Expecting 'SEMI', 'NEWLINE', 'SPACE', 'EOF ..."
          ]
        },
        {
          "title": "Mermaid Issue 6904 on GitHub",
          "url": "https://github.com/mermaid-js/mermaid/issues/6904",
          "excerpts": [
            "```\n\nBut the cause of the error is \"@\". I send above mermaid code and error report to ChatGPT and Claude but both of them are failed to fix it. They just tried to add \"SEMI\", \"NEWLINE\" that does not fix the error. By quote the label above diagram will be successfully rendered. I suggest make the error report more precise and easy to fix both for human and AI."
          ]
        }
      ],
      "reasoning": "The field value asserts that invisible or non-printable/unicode characters introduced by copy-pasting cause failures, and that the remedy is to delete the problematic line and re-type it manually. The most directly relevant excerpts discuss how certain characters can break syntax and cause parsing or syntax errors in Mermaid diagrams, highlighting that problematic characters and escaping are common sources of issues. Specifically, one excerpt notes that there are special-characters that break syntax, which aligns with the idea that hidden or unusual characters can cause failures. Another excerpt addresses escaping problematic characters, which complements the notion that mis-typed or hidden characters can lead to errors. Additional excerpts describe syntax errors and parsing failures in Mermaid workflows, illustrating the broader class of issues that can arise from problematic characters or formatting. A separate excerpt discusses an error in a report pointing to a particular visible character, which is tangential but still related to character-level issues and error reporting. Taken together, these excerpts support the general concept that character-level problems (including, in broader interpretation, hidden/unseen characters) can cause Mermaid parsing failures and that careful re-entry (rather than copy-paste) can mitigate such issues. The most direct link is the emphasis on characters that break syntax and escaping concerns, which maps to the proposed invisible-character cause; the more specific fix (deleting and re-typing) is implied by the broader handling of copy-paste-related errors and parsing failures.",
      "confidence": "medium"
    },
    {
      "field": "common_errors_and_fixes_cheatsheet.2.error_message_pattern",
      "citations": [
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "Parse error on line 1:↵graph TD    Q1[Question ↵-----^↵Expecting 'NODIR', 'DIR', got 'SPACE"
          ]
        },
        {
          "title": "mermaidjs/mermaid.cli - Parsing subgraph fails on brackets",
          "url": "https://github.com/mermaidjs/mermaid.cli/issues/68",
          "excerpts": [
            "Oct 23, 2019 — ... Error: Parse error on line 2: ...raph TBsubgraph BIG[better]A-->Bend ----------------------^ Expecting 'SEMI', 'NEWLINE', 'SPACE', 'EOF ..."
          ]
        }
      ],
      "reasoning": "The finegrained field value specifies an exact parse error line followed by a precise expectigram: the parser expected either NODIR or DIR but encountered SPACE. The most directly supportive excerpt explicitly shows a parse error on line 1 with the exact expected tokens and the actual token SPACE, aligning perfectly with the target field value. A closely related excerpt also discusses a parse error with a similar structure, mentioning a parse error on line 2 and different expected tokens, including SPACE, which provides partial corroboration but not the exact token set. The remaining excerpts describe other syntax or parsing issues that do not match the exact expected tokens or line reference, offering only contextual relevance rather than direct evidence for the specific error pattern in question.",
      "confidence": "high"
    },
    {
      "field": "common_errors_and_fixes_cheatsheet.2.error_category",
      "citations": [
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "Parse error on line 1:↵graph TD    Q1[Question ↵-----^↵Expecting 'NODIR', 'DIR', got 'SPACE",
            "```\ngraph TD\n    Q1[Question 1]\n    Q1 -->|oui| Q1.1[Question 1.1]\n    Q1 -->|non| Q1.2[Question 1.2]\n    Q1.1 -->|oui| Q1.1.1[Question 1.1.1]\n    Q1.1 -->|non| Q1.1.2[Question 1.1.2]\n    Q1.2 -->|oui| Q1.2.1[Question 1.2.1]\n    Q1.2 -->|non| Q1.2.2[Question 1.2.2]\n    Q1.2.1 -->|oui| Q1.2.11[Question 1.2.11]\n    Q1.2.1 -->|non| Q1.2.21[Question 1.2.21]\n    Q1.1.1 -->|signal| R[Result]\n    Q1.1.2 -->|signal| R\n    Q1.2.11 -->|signal| R\n    Q1.2.21 -->|signal| R\n    Q1.2.2 -->|signal| R\n```\n"
          ]
        },
        {
          "title": "mermaidjs/mermaid.cli - Parsing subgraph fails on brackets",
          "url": "https://github.com/mermaidjs/mermaid.cli/issues/68",
          "excerpts": [
            "Oct 23, 2019 — ... Error: Parse error on line 2: ...raph TBsubgraph BIG[better]A-->Bend ----------------------^ Expecting 'SEMI', 'NEWLINE', 'SPACE', 'EOF ..."
          ]
        },
        {
          "title": "Syntax error in text mermaid version 10.1.0 · Issue #4432",
          "url": "https://github.com/mermaid-js/mermaid/issues/4432",
          "excerpts": [
            "Apr 28, 2023 — It is quite easy to create something that will trigger the error, problem is not being able to track it down without trial and error. And that can be quite ..."
          ]
        },
        {
          "title": "Mermaid Issue 6904 on GitHub",
          "url": "https://github.com/mermaid-js/mermaid/issues/6904",
          "excerpts": [
            "```\n\nBut the cause of the error is \"@\". I send above mermaid code and error report to ChatGPT and Claude but both of them are failed to fix it. They just tried to add \"SEMI\", \"NEWLINE\" that does not fix the error. By quote the label above diagram will be successfully rendered. I suggest make the error report more precise and easy to fix both for human and AI."
          ]
        }
      ],
      "reasoning": "The most directly relevant excerpts explicitly report a parse error when parsing Mermaid diagrams, such as lines indicating a parse error on a given line and examples showing the surrounding Mermaid code structure. These passages directly corroborate the notion of a parse error occurring during Mermaid parsing, aligning with the field value that identifies a 'Parse Error' as the core issue. The excerpts that show concrete snippets of Mermaid diagrams alongside the error message reinforce the connection: they illustrate how particular syntactic constructs (such as graph TD blocks, brackets, subgraphs, and labeled edges) can trigger parsing failures, which is consistent with the finegrained field value describing a parse error category. An additional excerpt discusses a syntax error in a Mermaid-related issue, which is closely related to parsing problems but emphasizes a broader category of parsing-related failures rather than a specific parse error, making it supportive but slightly less direct evidence. The remaining excerpt further notes an overall error report tied to Mermaid rendering, offering contextual support that such issues are recognized as erroneous parsing outcomes, albeit without the explicit phrase 'Parse Error' in every case. Overall, the strongest support comes from excerpts that state a parse error on a line within the Mermaid code, followed by those providing explicit Mermaid code samples that trigger parsing problems, with other related parsing discussions providing contextual corroboration.",
      "confidence": "high"
    },
    {
      "field": "common_errors_and_fixes_cheatsheet.8.error_message_pattern",
      "citations": [
        {
          "title": "Syntax error in text mermaid version 10.1.0 · Issue #4432",
          "url": "https://github.com/mermaid-js/mermaid/issues/4432",
          "excerpts": [
            "Apr 28, 2023 — It is quite easy to create something that will trigger the error, problem is not being able to track it down without trial and error. And that can be quite ..."
          ]
        },
        {
          "title": "How to escape characters? · Issue #170 · mermaid-js ...",
          "url": "https://github.com/mermaid-js/mermaid/issues/170",
          "excerpts": [
            "Jun 9, 2015 — The answer is here: https://mermaid.js.org/syntax/flowchart.html#special-characters-that-break-syntax",
            "Jun 9, 2015 — Could someone post a new mermaid.live link with escaping @, ~, \", (, and )?. React with 12"
          ]
        },
        {
          "title": "mermaidjs/mermaid.cli - Parsing subgraph fails on brackets",
          "url": "https://github.com/mermaidjs/mermaid.cli/issues/68",
          "excerpts": [
            "Oct 23, 2019 — ... Error: Parse error on line 2: ...raph TBsubgraph BIG[better]A-->Bend ----------------------^ Expecting 'SEMI', 'NEWLINE', 'SPACE', 'EOF ..."
          ]
        },
        {
          "title": "Mermaid Issue 6904 on GitHub",
          "url": "https://github.com/mermaid-js/mermaid/issues/6904",
          "excerpts": [
            "```\n\nBut the cause of the error is \"@\". I send above mermaid code and error report to ChatGPT and Claude but both of them are failed to fix it. They just tried to add \"SEMI\", \"NEWLINE\" that does not fix the error. By quote the label above diagram will be successfully rendered. I suggest make the error report more precise and easy to fix both for human and AI."
          ]
        }
      ],
      "reasoning": "The target field value describes a lexical error where unrecognized text appears on a specific line. Excerpts that discuss parse or syntax errors caused by problematic tokens or characters are directly relevant, as they reflect the same category of error (invalid token/text) that a lexical error would also represent. An excerpt describing a parsing failure when brackets or subgraphs are involved points to errors stemming from tokenization or recognition of symbols in the input, which aligns with a lexical error pattern. Another excerpt explicitly addresses special characters that break syntax, which closely mirrors the idea of unrecognized or invalid text impacting rendering. Additional excerpts mention general parse errors and error reporting behavior, which provide contextual support for error-pattern formation and debugging workflows around lexical/syntax issues. Collectively, these excerpts support the notion of an error message pattern where certain text (tokens, brackets, or special characters) is not recognized by the parser, leading to a failure on a given line.",
      "confidence": "medium"
    },
    {
      "field": "common_errors_and_fixes_cheatsheet.1.diagram_type",
      "citations": [
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "```\ngraph TD\n    Q1[Question 1]\n    Q1 -->|oui| Q1.1[Question 1.1]\n    Q1 -->|non| Q1.2[Question 1.2]\n    Q1.1 -->|oui| Q1.1.1[Question 1.1.1]\n    Q1.1 -->|non| Q1.1.2[Question 1.1.2]\n    Q1.2 -->|oui| Q1.2.1[Question 1.2.1]\n    Q1.2 -->|non| Q1.2.2[Question 1.2.2]\n    Q1.2.1 -->|oui| Q1.2.11[Question 1.2.11]\n    Q1.2.1 -->|non| Q1.2.21[Question 1.2.21]\n    Q1.1.1 -->|signal| R[Result]\n    Q1.1.2 -->|signal| R\n    Q1.2.11 -->|signal| R\n    Q1.2.21 -->|signal| R\n    Q1.2.2 -->|signal| R\n```\n",
            "Parse error on line 1:↵graph TD    Q1[Question ↵-----^↵Expecting 'NODIR', 'DIR', got 'SPACE"
          ]
        },
        {
          "title": "mermaidjs/mermaid.cli - Parsing subgraph fails on brackets",
          "url": "https://github.com/mermaidjs/mermaid.cli/issues/68",
          "excerpts": [
            "Oct 23, 2019 — ... Error: Parse error on line 2: ...raph TBsubgraph BIG[better]A-->Bend ----------------------^ Expecting 'SEMI', 'NEWLINE', 'SPACE', 'EOF ..."
          ]
        },
        {
          "title": "Mermaid Issue 6904 on GitHub",
          "url": "https://github.com/mermaid-js/mermaid/issues/6904",
          "excerpts": [
            "'EOF', 'subgraph', 'end', 'acc_title', 'acc_descr', 'acc_descr_multiline_value', 'AMP', 'COLON', 'STYLE', 'LINKSTYLE', 'CLASSDEF', 'CLASS', 'CLICK', 'DOWN', 'DEFAULT', 'NUM', 'COMMA', 'NODE_STRING', 'BRKT', 'MINUS', 'MULT', 'UNICODE_TEXT', 'direction_tb', 'direction_bt', 'direction_rl', 'direction_lr', got 'LINK_ID'",
            "```\n\nBut the cause of the error is \"@\". I send above mermaid code and error report to ChatGPT and Claude but both of them are failed to fix it. They just tried to add \"SEMI\", \"NEWLINE\" that does not fix the error. By quote the label above diagram will be successfully rendered. I suggest make the error report more precise and easy to fix both for human and AI."
          ]
        },
        {
          "title": "How to escape characters? · Issue #170 · mermaid-js ...",
          "url": "https://github.com/mermaid-js/mermaid/issues/170",
          "excerpts": [
            "Jun 9, 2015 — The answer is here: https://mermaid.js.org/syntax/flowchart.html#special-characters-that-break-syntax",
            "Jun 9, 2015 — Could someone post a new mermaid.live link with escaping @, ~, \", (, and )?. React with 12"
          ]
        },
        {
          "title": "Mermaid CLI - how do you escape characters?",
          "url": "https://stackoverflow.com/questions/28121525/mermaid-cli-how-do-you-escape-characters",
          "excerpts": [
            "Use quotation marks \"\" to enclose your text and escape special characters, e.g. in your example: graph TD question1{\"Gas tank less than 1/8?"
          ]
        },
        {
          "title": "Syntax error in text mermaid version 10.1.0 · Issue #4432",
          "url": "https://github.com/mermaid-js/mermaid/issues/4432",
          "excerpts": [
            "Apr 28, 2023 — It is quite easy to create something that will trigger the error, problem is not being able to track it down without trial and error. And that can be quite ..."
          ]
        }
      ],
      "reasoning": "The most directly relevant excerpts demonstrate actual diagram syntax associated with Mermaid flowcharts. An excerpt that presents a concrete Mermaids’s flowchart block beginning with graph TD and a nested Q1 structure directly supports the idea of a Flowchart type. Another excerpt shows a complete Mermaid diagram snippet starting with graph TD and listing a network of questions and a final Result, which strongly aligns with the Flowchart type. A further excerpt discusses an example involving graph TD and a labeled sequence of nodes (Question 1, Question 1.1, etc.), again illustrating the Flowchart usage. While other excerpts discuss parsing errors or subgraphs, they still reference Mermaid diagram concepts (such as subgraph usage and error-prone characters) which are relevant to Flowchart syntax, albeit more indirectly. For example, references to parsing issues on lines that include graph TD or subgraph indicate typical pitfalls encountered when authoring Flowcharts, reinforcing the connection to the Flowchart field value. Additional excerpts talk about escaping characters and special characters that can break Mermaid syntax, which is tangential but still pertinent to ensuring valid Flowchart diagrams. Some excerpts primarily focus on general error handling or list broader Mermaid issues without explicit Flowchart context; these provide supportive but weaker evidence. Overall, the strongest support comes from excerpts that literally show or describe the graph TD flowchart structure, while weaker support comes from excerpts addressing syntax escaping and error reports that reference mermaid diagram elements indirectly.",
      "confidence": "high"
    },
    {
      "field": "common_errors_and_fixes_cheatsheet.6.error_message_pattern",
      "citations": [
        {
          "title": "mermaidjs/mermaid.cli - Parsing subgraph fails on brackets",
          "url": "https://github.com/mermaidjs/mermaid.cli/issues/68",
          "excerpts": [
            "Oct 23, 2019 — ... Error: Parse error on line 2: ...raph TBsubgraph BIG[better]A-->Bend ----------------------^ Expecting 'SEMI', 'NEWLINE', 'SPACE', 'EOF ..."
          ]
        },
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "Parse error on line 1:↵graph TD    Q1[Question ↵-----^↵Expecting 'NODIR', 'DIR', got 'SPACE"
          ]
        }
      ],
      "reasoning": "The most relevant excerpt directly states the expected tokens (SEMI, NEWLINE, SPACE, EOF) and the actual token encountered (NEWLINE) in the context of a parse error, which precisely matches the finegrained field value about expecting certain arrow tokens and encountering a NEWLINE. This strong alignment confirms that the excerpt provides a direct evidence point for the specific error pattern in the field. A closely related, though not exact, excerpt discusses a parse error involving a different encountered token (SPACE) for a similar parsing scenario. While this corroborates the general theme of parse errors in Mermaid diagrams, it does not exactly reproduce the specific expected token set including the NEWLINE, so its relevance is secondary and supports the broader context of parse issues but not the exact field value. No excerpts contradict the field value. Combined, these excerpts map well to the field's focus on a parse expectation mismatch involving NEWLINE, with the explicit pattern in the most relevant excerpt being the strongest support.",
      "confidence": "high"
    },
    {
      "field": "common_errors_and_fixes_cheatsheet.0.diagram_type",
      "citations": [
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "Parse error on line 1:↵graph TD    Q1[Question ↵-----^↵Expecting 'NODIR', 'DIR', got 'SPACE"
          ]
        },
        {
          "title": "mermaidjs/mermaid.cli - Parsing subgraph fails on brackets",
          "url": "https://github.com/mermaidjs/mermaid.cli/issues/68",
          "excerpts": [
            "Oct 23, 2019 — ... Error: Parse error on line 2: ...raph TBsubgraph BIG[better]A-->Bend ----------------------^ Expecting 'SEMI', 'NEWLINE', 'SPACE', 'EOF ..."
          ]
        },
        {
          "title": "Mermaid Issue 6904 on GitHub",
          "url": "https://github.com/mermaid-js/mermaid/issues/6904",
          "excerpts": [
            "```\n\nBut the cause of the error is \"@\". I send above mermaid code and error report to ChatGPT and Claude but both of them are failed to fix it. They just tried to add \"SEMI\", \"NEWLINE\" that does not fix the error. By quote the label above diagram will be successfully rendered. I suggest make the error report more precise and easy to fix both for human and AI."
          ]
        }
      ],
      "reasoning": "The field value indicates the diagram type is Flowchart. An excerpt explicitly showing 'graph TD' demonstrates a top-down flowchart syntax in Mermaid, directly supporting that the diagram type is Flowchart. Another excerpt mentioning 'subgraph' and general diagram parsing in Mermaid contexts further reinforces that the content concerns Mermaids flowchart-like structures, as subgraphs are common in flowchart and graph representations. A third excerpt discusses Mermaid code and error reports in general; while it does not explicitly name the diagram type, it contextualizes the broader Mermaid diagram workflow and troubleshooting, which is ancillary but relevant to the flowchart topic. Taken together, the most relevant content directly confirms a Flowchart usage via the explicit 'graph TD' line, with additional context about flowchart-related constructs strengthening the relevance of Flowchart as the diagram type.",
      "confidence": "medium"
    },
    {
      "field": "common_errors_and_fixes_cheatsheet.6.cause_and_fix",
      "citations": [
        {
          "title": "mermaidjs/mermaid.cli - Parsing subgraph fails on brackets",
          "url": "https://github.com/mermaidjs/mermaid.cli/issues/68",
          "excerpts": [
            "Oct 23, 2019 — ... Error: Parse error on line 2: ...raph TBsubgraph BIG[better]A-->Bend ----------------------^ Expecting 'SEMI', 'NEWLINE', 'SPACE', 'EOF ..."
          ]
        },
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "Parse error on line 1:↵graph TD    Q1[Question ↵-----^↵Expecting 'NODIR', 'DIR', got 'SPACE",
            "```\ngraph TD\n    Q1[Question 1]\n    Q1 -->|oui| Q1.1[Question 1.1]\n    Q1 -->|non| Q1.2[Question 1.2]\n    Q1.1 -->|oui| Q1.1.1[Question 1.1.1]\n    Q1.1 -->|non| Q1.1.2[Question 1.1.2]\n    Q1.2 -->|oui| Q1.2.1[Question 1.2.1]\n    Q1.2 -->|non| Q1.2.2[Question 1.2.2]\n    Q1.2.1 -->|oui| Q1.2.11[Question 1.2.11]\n    Q1.2.1 -->|non| Q1.2.21[Question 1.2.21]\n    Q1.1.1 -->|signal| R[Result]\n    Q1.1.2 -->|signal| R\n    Q1.2.11 -->|signal| R\n    Q1.2.21 -->|signal| R\n    Q1.2.2 -->|signal| R\n```\n"
          ]
        }
      ],
      "reasoning": "The fine-grained field value describes a specific bug in Mermaid diagram syntax: an unexpected newline character (often invisible) introduced within an arrow definition, with a recommended manual retyping of the entire arrow-containing line to remove hidden characters. The most relevant excerpt directly shows a parse error occurring in proximity to an arrow sequence (A-->B) within a subgraph region, strongly suggesting that the line content around an arrow is problematic and could be caused by hidden characters or line breaks. A second excerpt similarly reports a parse error on a line of a Mermaid graph, with the error pointing to the end of a line that includes an arrow-like structure, reinforcing the notion that the arrow definition line is the source of the failure and that line content needs correction. These two excerpts together provide concrete evidence of line-content-related parse failures in arrow definitions, supporting the idea that copy-pasted content can introduce invisible characters that disrupt parsing. A third excerpt shows a syntactically valid graph snippet with multiple arrows and nodes, serving as a healthy reference point that contrasts with the failure cases and reinforces that the issue is specifically tied to problematic line content around arrows. Collectively, the excerpts support the field value's claim that an invisible newline or hidden characters in an arrow definition can cause a parse error and that retyping the problematic line can remediate the issue.",
      "confidence": "medium"
    },
    {
      "field": "common_errors_and_fixes_cheatsheet.7.cause_and_fix",
      "citations": [
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "Parse error on line 1:↵graph TD    Q1[Question ↵-----^↵Expecting 'NODIR', 'DIR', got 'SPACE"
          ]
        },
        {
          "title": "Syntax error in text mermaid version 10.1.0 · Issue #4432",
          "url": "https://github.com/mermaid-js/mermaid/issues/4432",
          "excerpts": [
            "Apr 28, 2023 — It is quite easy to create something that will trigger the error, problem is not being able to track it down without trial and error. And that can be quite ..."
          ]
        },
        {
          "title": "mermaidjs/mermaid.cli - Parsing subgraph fails on brackets",
          "url": "https://github.com/mermaidjs/mermaid.cli/issues/68",
          "excerpts": [
            "Oct 23, 2019 — ... Error: Parse error on line 2: ...raph TBsubgraph BIG[better]A-->Bend ----------------------^ Expecting 'SEMI', 'NEWLINE', 'SPACE', 'EOF ..."
          ]
        }
      ],
      "reasoning": "The field value asserts that errors arise from incorrect syntax for a diagram title (for example a problematic title line like ---title:) or from using a newer diagram type/feature with an older Mermaid version that lacks support. The most relevant evidence points to parse/syntax errors during diagram parsing, which aligns with the claim that an improper title line or unsupported feature triggers failures. One excerpt explicitly documents a parse error on line 1 in a Mermaid snippet, which is the kind of syntax- or title-related failure described in the field value. Another excerpt notes a generic syntax error tied to Mermaid text and version-specific behavior, which supports the idea that the issue can stem from using features not supported by the Mermaid version in use. A third excerpt discusses parsing failures on substructures (subgraphs), which, while not about titles specifically, reinforces that parsing and syntax errors are a recurring cause of diagram rendering failures in Mermaid. Together, these excerpts corroborate that syntax-related problems (potentially including title lines or unsupported features) cause errors, and that removing or adjusting the problematic title line or ensuring feature compatibility with the Mermaid version could fix the issue.",
      "confidence": "medium"
    },
    {
      "field": "common_errors_and_fixes_cheatsheet.3.cause_and_fix",
      "citations": [
        {
          "title": "Syntax error in text mermaid version 10.1.0 · Issue #4432",
          "url": "https://github.com/mermaid-js/mermaid/issues/4432",
          "excerpts": [
            "Apr 28, 2023 — It is quite easy to create something that will trigger the error, problem is not being able to track it down without trial and error. And that can be quite ..."
          ]
        },
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "```\ngraph TD\n    Q1[Question 1]\n    Q1 -->|oui| Q1.1[Question 1.1]\n    Q1 -->|non| Q1.2[Question 1.2]\n    Q1.1 -->|oui| Q1.1.1[Question 1.1.1]\n    Q1.1 -->|non| Q1.1.2[Question 1.1.2]\n    Q1.2 -->|oui| Q1.2.1[Question 1.2.1]\n    Q1.2 -->|non| Q1.2.2[Question 1.2.2]\n    Q1.2.1 -->|oui| Q1.2.11[Question 1.2.11]\n    Q1.2.1 -->|non| Q1.2.21[Question 1.2.21]\n    Q1.1.1 -->|signal| R[Result]\n    Q1.1.2 -->|signal| R\n    Q1.2.11 -->|signal| R\n    Q1.2.21 -->|signal| R\n    Q1.2.2 -->|signal| R\n```\n"
          ]
        },
        {
          "title": "mermaid - Generation of diagrams and flowcharts from text ...",
          "url": "https://unpkg.com/mermaid@0.5.2/exdoc/index.html",
          "excerpts": [
            "The parseError function will be called when the parse function returns false. The code-example below in meta code illustrates how this could work: mermaid."
          ]
        },
        {
          "title": "Mermaid Issue 6904 on GitHub",
          "url": "https://github.com/mermaid-js/mermaid/issues/6904",
          "excerpts": [
            "```\n\nBut the cause of the error is \"@\". I send above mermaid code and error report to ChatGPT and Claude but both of them are failed to fix it. They just tried to add \"SEMI\", \"NEWLINE\" that does not fix the error. By quote the label above diagram will be successfully rendered. I suggest make the error report more precise and easy to fix both for human and AI."
          ]
        },
        {
          "title": "mermaidjs/mermaid.cli - Parsing subgraph fails on brackets",
          "url": "https://github.com/mermaidjs/mermaid.cli/issues/68",
          "excerpts": [
            "Oct 23, 2019 — ... Error: Parse error on line 2: ...raph TBsubgraph BIG[better]A-->Bend ----------------------^ Expecting 'SEMI', 'NEWLINE', 'SPACE', 'EOF ..."
          ]
        },
        {
          "title": "How to escape characters? · Issue #170 · mermaid-js ...",
          "url": "https://github.com/mermaid-js/mermaid/issues/170",
          "excerpts": [
            "Jun 9, 2015 — The answer is here: https://mermaid.js.org/syntax/flowchart.html#special-characters-that-break-syntax",
            "Jun 9, 2015 — Could someone post a new mermaid.live link with escaping @, ~, \", (, and )?. React with 12"
          ]
        },
        {
          "title": "Mermaid CLI - how do you escape characters?",
          "url": "https://stackoverflow.com/questions/28121525/mermaid-cli-how-do-you-escape-characters",
          "excerpts": [
            "Use quotation marks \"\" to enclose your text and escape special characters, e.g. in your example: graph TD question1{\"Gas tank less than 1/8?"
          ]
        }
      ],
      "reasoning": "The finegrained field value describes a specific Mermaid syntax rule: do not place an unquoted colon after a relationship label; instead, enclose the label in quotes. Excerpts that explicitly discuss syntax errors or parsing problems in Mermaid diagrams are most relevant because they provide context that mislabeling with special characters or unquoted labels can trigger errors, and that quoting or escaping is a common remedy. The most directly relevant excerpt notes a general syntax error and the ease of triggering it, which aligns with the notion that improper labeling (e.g., unquoted colon) can cause failures. Other excerpts describe parse errors in Mermaid graphs, which corroborate that syntax-related issues (including labeling conventions) cause rendering problems, supporting the notion that proper quoting is a typical fix. Excerpts discussing escaping characters and how special characters require careful handling further support the idea that quotes are used to delimit labels to avoid misinterpretation by the parser. Taken together, these excerpts collectively support the general principle that Mermaid labels after a colon should be quoted to avoid errors, which matches the described field value and fix.",
      "confidence": "medium"
    },
    {
      "field": "common_errors_and_fixes_cheatsheet.2.cause_and_fix",
      "citations": [
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "Parse error on line 1:↵graph TD    Q1[Question ↵-----^↵Expecting 'NODIR', 'DIR', got 'SPACE",
            "```\ngraph TD\n    Q1[Question 1]\n    Q1 -->|oui| Q1.1[Question 1.1]\n    Q1 -->|non| Q1.2[Question 1.2]\n    Q1.1 -->|oui| Q1.1.1[Question 1.1.1]\n    Q1.1 -->|non| Q1.1.2[Question 1.1.2]\n    Q1.2 -->|oui| Q1.2.1[Question 1.2.1]\n    Q1.2 -->|non| Q1.2.2[Question 1.2.2]\n    Q1.2.1 -->|oui| Q1.2.11[Question 1.2.11]\n    Q1.2.1 -->|non| Q1.2.21[Question 1.2.21]\n    Q1.1.1 -->|signal| R[Result]\n    Q1.1.2 -->|signal| R\n    Q1.2.11 -->|signal| R\n    Q1.2.21 -->|signal| R\n    Q1.2.2 -->|signal| R\n```\n"
          ]
        },
        {
          "title": "mermaidjs/mermaid.cli - Parsing subgraph fails on brackets",
          "url": "https://github.com/mermaidjs/mermaid.cli/issues/68",
          "excerpts": [
            "Oct 23, 2019 — ... Error: Parse error on line 2: ...raph TBsubgraph BIG[better]A-->Bend ----------------------^ Expecting 'SEMI', 'NEWLINE', 'SPACE', 'EOF ..."
          ]
        },
        {
          "title": "Syntax error in text mermaid version 10.1.0 · Issue #4432",
          "url": "https://github.com/mermaid-js/mermaid/issues/4432",
          "excerpts": [
            "Apr 28, 2023 — It is quite easy to create something that will trigger the error, problem is not being able to track it down without trial and error. And that can be quite ..."
          ]
        },
        {
          "title": "Mermaid Issue 6904 on GitHub",
          "url": "https://github.com/mermaid-js/mermaid/issues/6904",
          "excerpts": [
            "```\n\nBut the cause of the error is \"@\". I send above mermaid code and error report to ChatGPT and Claude but both of them are failed to fix it. They just tried to add \"SEMI\", \"NEWLINE\" that does not fix the error. By quote the label above diagram will be successfully rendered. I suggest make the error report more precise and easy to fix both for human and AI."
          ]
        }
      ],
      "reasoning": "The strongest support comes from passages describing parse errors caused by unusual spacing near graph definitions and arrow syntax. For instance, a parse error indicates that the parser encountered a SPACE when it expected a direction token, which aligns with the idea of a subtle syntax deviation such as an extra space in an arrow. This directly supports the notion that strict parsers flag tiny spacing issues in arrow definitions. Additional excerpts discuss general parsing failures in Mermaid syntax and provide a concrete example graph structure, which reinforces the broader context that subtle formatting problems (including spaces around arrows) can trigger errors. One excerpt explicitly showcases a Mermaid graph with standard arrow notation, illustrating the normal syntactic form that would be expected, hence highlighting what the fix should aim to restore. Another excerpt mentions a syntax error in a Mermaid issue, underscoring that such errors can be triggered by small deviations in syntax, supporting the idea that precise arrow syntax matters. The least direct support comes from discussions about error reports and other non-space-related fixes, which still contextualize the broader theme of diagnosing Mermaid parse issues but do not confirm the exact space-arrow deviation. Collectively, these excerpts support the field value by illustrating (a) that subtle spacing can trigger parser errors, and (b) that the remedy involves reviewing and correcting arrow syntax to the conventional form like a single dash or proper arrow token, aligning with the stated fix.”",
      "confidence": "medium"
    },
    {
      "field": "common_errors_and_fixes_cheatsheet.1.cause_and_fix",
      "citations": [
        {
          "title": "mermaidjs/mermaid.cli - Parsing subgraph fails on brackets",
          "url": "https://github.com/mermaidjs/mermaid.cli/issues/68",
          "excerpts": [
            "Oct 23, 2019 — ... Error: Parse error on line 2: ...raph TBsubgraph BIG[better]A-->Bend ----------------------^ Expecting 'SEMI', 'NEWLINE', 'SPACE', 'EOF ..."
          ]
        },
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "```\ngraph TD\n    Q1[Question 1]\n    Q1 -->|oui| Q1.1[Question 1.1]\n    Q1 -->|non| Q1.2[Question 1.2]\n    Q1.1 -->|oui| Q1.1.1[Question 1.1.1]\n    Q1.1 -->|non| Q1.1.2[Question 1.1.2]\n    Q1.2 -->|oui| Q1.2.1[Question 1.2.1]\n    Q1.2 -->|non| Q1.2.2[Question 1.2.2]\n    Q1.2.1 -->|oui| Q1.2.11[Question 1.2.11]\n    Q1.2.1 -->|non| Q1.2.21[Question 1.2.21]\n    Q1.1.1 -->|signal| R[Result]\n    Q1.1.2 -->|signal| R\n    Q1.2.11 -->|signal| R\n    Q1.2.21 -->|signal| R\n    Q1.2.2 -->|signal| R\n```\n"
          ]
        },
        {
          "title": "Mermaid Issue 6904 on GitHub",
          "url": "https://github.com/mermaid-js/mermaid/issues/6904",
          "excerpts": [
            "'EOF', 'subgraph', 'end', 'acc_title', 'acc_descr', 'acc_descr_multiline_value', 'AMP', 'COLON', 'STYLE', 'LINKSTYLE', 'CLASSDEF', 'CLASS', 'CLICK', 'DOWN', 'DEFAULT', 'NUM', 'COMMA', 'NODE_STRING', 'BRKT', 'MINUS', 'MULT', 'UNICODE_TEXT', 'direction_tb', 'direction_bt', 'direction_rl', 'direction_lr', got 'LINK_ID'",
            "```\n\nBut the cause of the error is \"@\". I send above mermaid code and error report to ChatGPT and Claude but both of them are failed to fix it. They just tried to add \"SEMI\", \"NEWLINE\" that does not fix the error. By quote the label above diagram will be successfully rendered. I suggest make the error report more precise and easy to fix both for human and AI."
          ]
        },
        {
          "title": "How to escape characters? · Issue #170 · mermaid-js ...",
          "url": "https://github.com/mermaid-js/mermaid/issues/170",
          "excerpts": [
            "Jun 9, 2015 — The answer is here: https://mermaid.js.org/syntax/flowchart.html#special-characters-that-break-syntax",
            "Jun 9, 2015 — Could someone post a new mermaid.live link with escaping @, ~, \", (, and )?. React with 12"
          ]
        },
        {
          "title": "Mermaid CLI - how do you escape characters?",
          "url": "https://stackoverflow.com/questions/28121525/mermaid-cli-how-do-you-escape-characters",
          "excerpts": [
            "Use quotation marks \"\" to enclose your text and escape special characters, e.g. in your example: graph TD question1{\"Gas tank less than 1/8?"
          ]
        }
      ],
      "reasoning": "The proposed cause-and-fix centers on a forbidden character in a subgraph identifier and a corrective replacement. The excerpts collectively illustrate that mermaid’s syntax is sensitive to subgraph constructs and special characters. For example, one excerpt shows a parse failure specifically associated with subgraph syntax, indicating that subgraph blocks are a fragile area of the language and can fail if identifiers or surrounding syntax are not perfectly formed. Another excerpt highlights that the broader issue of escaping and handling special characters is a known concern in mermaid syntax, with guidance on which characters can disrupt rendering and how to escape or replace them. A third excerpt enumerates a variety of reserved or problematic tokens (including subgraph-related terms) that can trigger syntax errors, underscoring that certain characters or keywords must be avoided or carefully managed within Mermaid definitions. Additional excerpts explicitly discuss escaping characters to avoid breaking syntax, which aligns with the general principle that identifiers should not contain problematic characters or should be sanitized. Taken together, these pieces support the general notion that identifiers in subgraphs are fragile with respect to special characters, and that removing or replacing problematic characters (such as a pipe) is a reasonable and typical remedy to restore valid syntax. Although none of the excerpts explicitly state that a pipe is reserved within a subgraph identifier, the evidence that subgraph identifiers are sensitive to characters and that escaping/replacement is a common fix supports the plausibility of the proposed cause-and-fix and reinforces the recommended approach of removing or replacing problematic characters in the identifier.",
      "confidence": "medium"
    },
    {
      "field": "common_errors_and_fixes_cheatsheet.3.error_message_pattern",
      "citations": [
        {
          "title": "mermaidjs/mermaid.cli - Parsing subgraph fails on brackets",
          "url": "https://github.com/mermaidjs/mermaid.cli/issues/68",
          "excerpts": [
            "Oct 23, 2019 — ... Error: Parse error on line 2: ...raph TBsubgraph BIG[better]A-->Bend ----------------------^ Expecting 'SEMI', 'NEWLINE', 'SPACE', 'EOF ..."
          ]
        },
        {
          "title": "Mermaid Issue 6904 on GitHub",
          "url": "https://github.com/mermaid-js/mermaid/issues/6904",
          "excerpts": [
            "'EOF', 'subgraph', 'end', 'acc_title', 'acc_descr', 'acc_descr_multiline_value', 'AMP', 'COLON', 'STYLE', 'LINKSTYLE', 'CLASSDEF', 'CLASS', 'CLICK', 'DOWN', 'DEFAULT', 'NUM', 'COMMA', 'NODE_STRING', 'BRKT', 'MINUS', 'MULT', 'UNICODE_TEXT', 'direction_tb', 'direction_bt', 'direction_rl', 'direction_lr', got 'LINK_ID'"
          ]
        }
      ],
      "reasoning": "The most relevant excerpt explicitly describes a parse error with an expectation that includes NEWLINE and EOF, illustrating a situation where the parser is looking for a line terminator or end-of-file but encounters a different token, which aligns with the idea of a mismatch such as encountering a LABEL token instead of the expected newline or end of input. This supports the notion that the parser enforces specific structural tokens and that deviations can cause errors resembling the pattern in the field value. The second relevant excerpt provides context about the tokenization landscape by listing token names used in Mermaid parsing, including LABEL, which directly relates to the actual token observed in the field value. Together, these excerpts support the notion that the error pattern involves expected structural tokens (NEWLINE/EOF) and the presence of a LABEL token during parsing, which matches the described fine-grained field value. The other excerpts discuss different parsing errors, specific syntax issues, or general Mermaid problems that do not directly demonstrate the same token-mismatch pattern, so they are less directly informative for this exact field value.",
      "confidence": "medium"
    },
    {
      "field": "common_errors_and_fixes_cheatsheet.2.diagram_type",
      "citations": [
        {
          "title": "Mermaid error handling and parsing issue (GitHub)",
          "url": "https://github.com/mermaid-js/mermaid/issues/1775",
          "excerpts": [
            "```\ngraph TD\n    Q1[Question 1]\n    Q1 -->|oui| Q1.1[Question 1.1]\n    Q1 -->|non| Q1.2[Question 1.2]\n    Q1.1 -->|oui| Q1.1.1[Question 1.1.1]\n    Q1.1 -->|non| Q1.1.2[Question 1.1.2]\n    Q1.2 -->|oui| Q1.2.1[Question 1.2.1]\n    Q1.2 -->|non| Q1.2.2[Question 1.2.2]\n    Q1.2.1 -->|oui| Q1.2.11[Question 1.2.11]\n    Q1.2.1 -->|non| Q1.2.21[Question 1.2.21]\n    Q1.1.1 -->|signal| R[Result]\n    Q1.1.2 -->|signal| R\n    Q1.2.11 -->|signal| R\n    Q1.2.21 -->|signal| R\n    Q1.2.2 -->|signal| R\n```\n",
            "Parse error on line 1:↵graph TD    Q1[Question ↵-----^↵Expecting 'NODIR', 'DIR', got 'SPACE"
          ]
        },
        {
          "title": "Mermaid Issue 6904 on GitHub",
          "url": "https://github.com/mermaid-js/mermaid/issues/6904",
          "excerpts": [
            "```\n\nBut the cause of the error is \"@\". I send above mermaid code and error report to ChatGPT and Claude but both of them are failed to fix it. They just tried to add \"SEMI\", \"NEWLINE\" that does not fix the error. By quote the label above diagram will be successfully rendered. I suggest make the error report more precise and easy to fix both for human and AI."
          ]
        },
        {
          "title": "mermaidjs/mermaid.cli - Parsing subgraph fails on brackets",
          "url": "https://github.com/mermaidjs/mermaid.cli/issues/68",
          "excerpts": [
            "Oct 23, 2019 — ... Error: Parse error on line 2: ...raph TBsubgraph BIG[better]A-->Bend ----------------------^ Expecting 'SEMI', 'NEWLINE', 'SPACE', 'EOF ..."
          ]
        },
        {
          "title": "Syntax error in text mermaid version 10.1.0 · Issue #4432",
          "url": "https://github.com/mermaid-js/mermaid/issues/4432",
          "excerpts": [
            "Apr 28, 2023 — It is quite easy to create something that will trigger the error, problem is not being able to track it down without trial and error. And that can be quite ..."
          ]
        }
      ],
      "reasoning": "The most directly relevant content demonstrates Mermaid flowchart syntax, such as the code block using a directional graph (graph TD) that defines questions and connections, which aligns with Flowchart as a common Mermaid diagram type. This is reinforced by an excerpt showing a parse error on a line that begins with graph TD, highlighting Flowchart-style syntax and its parsing considerations. Additional excerpts describe Mermaid error handling and a broader set of Mermaid-related issues, which provide context about the environment in which Flowcharts are created and debugging steps, further supporting that Flowchart is a key diagram type under discussion. Other excerpts discuss mermaid code involving diagrams and parsing challenges, which, while not explicitly labeling Flowchart, still pertain to Mermaid diagram types and their syntax rules, thereby supporting the relevance of Flowchart in this context. Taken together, these excerpts consistently tie Mermaid diagram syntax and error handling to the Flowchart diagram category.",
      "confidence": "medium"
    }
  ],
  "outputSchema": {
    "type": "object",
    "properties": {
      "executive_summary": {
        "type": "string",
        "description": "A high-level summary of the most effective strategies for generating high-quality, squarish Mermaid diagrams using LLMs, covering prompt design, layout control, and error handling."
      },
      "runtime_prompt_template": {
        "type": "string",
        "description": "A concise, copy-paste-ready, and highly optimized LLM prompt template designed to generate code-only, syntactically valid, and squarish Mermaid diagrams. This is the final, actionable prompt for the user."
      },
      "master_prompt_blueprint": {
        "type": "object",
        "properties": {
          "role_specification": {
            "type": "string",
            "description": "Instructions on how to define the LLM's expert role."
          },
          "output_contract": {
            "type": "string",
            "description": "Rules for enforcing a strict output format, like code-only in a single fenced block."
          },
          "layout_heuristics": {
            "type": "string",
            "description": "Guidance on using Mermaid's configuration and layout features to achieve a squarish aspect ratio."
          },
          "validation_and_self_check_steps": {
            "type": "string",
            "description": "Instructions for the LLM to perform an internal validation routine before outputting code."
          },
          "error_repair_loop_instructions": {
            "type": "string",
            "description": "Defines a process for handling feedback and correcting errors from previously generated diagrams."
          }
        },
        "required": [
          "role_specification",
          "output_contract",
          "layout_heuristics",
          "validation_and_self_check_steps",
          "error_repair_loop_instructions"
        ],
        "additionalProperties": false
      },
      "squarish_layout_strategies": {
        "type": "object",
        "properties": {
          "internal_mermaid_config": {
            "type": "string",
            "description": "Strategies using internal Mermaid configurations like layout direction (LR vs TD), spacing, and text wrapping."
          },
          "external_css_strategies": {
            "type": "string",
            "description": "Methods using external CSS, such as the 'aspect-ratio' property or the 'padding-bottom hack', to enforce a square container."
          },
          "svg_attribute_patterns": {
            "type": "string",
            "description": "Guidance on using SVG attributes like viewBox and preserveAspectRatio to control scaling and alignment."
          },
          "layout_engine_guidance": {
            "type": "string",
            "description": "Information on choosing between layout engines like Dagre (default) and ELK (for complex diagrams)."
          }
        },
        "required": [
          "internal_mermaid_config",
          "external_css_strategies",
          "svg_attribute_patterns",
          "layout_engine_guidance"
        ],
        "additionalProperties": false
      },
      "mermaid_syntax_crib_sheet": {
        "type": "object",
        "properties": {
          "diagram_type": {
            "type": "string",
            "description": "The name of the Mermaid diagram type (e.g., flowchart, sequenceDiagram)."
          },
          "header_keyword": {
            "type": "string",
            "description": "The required keyword to start the diagram definition."
          },
          "core_syntax_summary": {
            "type": "string",
            "description": "A summary of the core syntax for nodes, edges, and relationships."
          },
          "layout_options": {
            "type": "string",
            "description": "Available layout and direction options (e.g., TD, LR)."
          },
          "common_pitfalls_and_fixes": {
            "type": "string",
            "description": "A list of common errors and how to fix them for this diagram type."
          }
        },
        "required": [
          "diagram_type",
          "header_keyword",
          "core_syntax_summary",
          "layout_options",
          "common_pitfalls_and_fixes"
        ],
        "additionalProperties": false
      },
      "diagram_type_inference_guide": {
        "type": "object",
        "properties": {
          "keyword_to_type_matrix": {
            "type": "string",
            "description": "A mapping of user keywords and structural cues to the appropriate Mermaid diagram type."
          },
          "conflict_resolution_rules": {
            "type": "string",
            "description": "A priority list for resolving ambiguity, giving precedence to explicit flags over inferred types."
          },
          "safe_default_strategy": {
            "type": "string",
            "description": "Instructions on which diagram type to default to (e.g., flowchart TD) when the user's intent is ambiguous."
          }
        },
        "required": [
          "keyword_to_type_matrix",
          "conflict_resolution_rules",
          "safe_default_strategy"
        ],
        "additionalProperties": false
      },
      "error_handling_and_self_repair_loop": {
        "type": "object",
        "properties": {
          "error_detection_method": {
            "type": "string",
            "description": "How to programmatically detect and interpret syntax errors using Mermaid's parsing APIs."
          },
          "iterative_repair_process": {
            "type": "string",
            "description": "The steps of the self-repair loop: generate, validate, capture error, re-prompt with feedback, and correct."
          },
          "minimal_change_principles": {
            "type": "string",
            "description": "Guidance for the LLM to make targeted, minimal fixes rather than regenerating the entire diagram."
          }
        },
        "required": [
          "error_detection_method",
          "iterative_repair_process",
          "minimal_change_principles"
        ],
        "additionalProperties": false
      },
      "validation_toolchain_overview": {
        "type": "object",
        "properties": {
          "api_based_validation": {
            "type": "string",
            "description": "Details on using the Node.js `mermaid.parse()` API for programmatic syntax validation."
          },
          "cli_based_validation": {
            "type": "string",
            "description": "Details on using the `@mermaid-js/mermaid-cli` (mmdc) tool for headless rendering and validation."
          },
          "ci_cd_integration_patterns": {
            "type": "string",
            "description": "Examples of how to integrate Mermaid validation into CI/CD pipelines like GitHub Actions."
          }
        },
        "required": [
          "api_based_validation",
          "cli_based_validation",
          "ci_cd_integration_patterns"
        ],
        "additionalProperties": false
      },
      "heuristics_for_weak_llms": {
        "type": "object",
        "properties": {
          "strict_syntax_and_grammar": {
            "type": "string",
            "description": "Rules for enforcing a minimal and strict set of Mermaid's grammatical rules."
          },
          "conservative_feature_set": {
            "type": "string",
            "description": "A list of common 'diagram breaker' features to avoid, such as the unquoted 'end' keyword."
          },
          "naming_conventions": {
            "type": "string",
            "description": "Best practices for node and entity IDs, such as using short, alphanumeric names without spaces."
          },
          "complexity_management": {
            "type": "string",
            "description": "Strategies for managing diagram complexity, including renderer choice (Dagre vs. ELK) and setting complexity limits."
          }
        },
        "required": [
          "strict_syntax_and_grammar",
          "conservative_feature_set",
          "naming_conventions",
          "complexity_management"
        ],
        "additionalProperties": false
      },
      "interactivity_and_security_guide": {
        "type": "object",
        "properties": {
          "interactivity_syntax": {
            "type": "string",
            "description": "The syntax for the `click` directive to add URL links and JavaScript callbacks."
          },
          "security_level_configuration": {
            "type": "string",
            "description": "Explanation of the critical `securityLevel` setting ('strict', 'loose', 'sandbox') and its implications."
          },
          "vulnerabilities_and_mitigations": {
            "type": "string",
            "description": "A summary of known vulnerabilities (e.g., XSS, remote image fetches) and how to mitigate them."
          },
          "conditional_prompting_guidance": {
            "type": "string",
            "description": "How to instruct an LLM to add interactive features only when explicitly requested by the user."
          }
        },
        "required": [
          "interactivity_syntax",
          "security_level_configuration",
          "vulnerabilities_and_mitigations",
          "conditional_prompting_guidance"
        ],
        "additionalProperties": false
      },
      "versioning_and_initialization_guide": {
        "type": "object",
        "properties": {
          "configuration_hierarchy": {
            "type": "string",
            "description": "The order of precedence for Mermaid configurations: defaults, site-level (initialize), and diagram-specific (frontmatter/directives)."
          },
          "frontmatter_vs_directives": {
            "type": "string",
            "description": "Comparison of the modern `frontmatter` method versus the deprecated `%%{init:}%%` directives for diagram-specific configuration."
          },
          "theming_guidance": {
            "type": "string",
            "description": "How to use built-in themes and custom `themeVariables` for consistent styling."
          },
          "known_breaking_changes": {
            "type": "string",
            "description": "A list of significant breaking changes in recent Mermaid versions to be aware of for compatibility."
          }
        },
        "required": [
          "configuration_hierarchy",
          "frontmatter_vs_directives",
          "theming_guidance",
          "known_breaking_changes"
        ],
        "additionalProperties": false
      },
      "environment_compatibility_guide": {
        "type": "object",
        "properties": {
          "environment_name": {
            "type": "string",
            "description": "The name of the rendering environment (e.g., GitHub, GitLab, Obsidian)."
          },
          "sizing_and_aspect_ratio_handling": {
            "type": "string",
            "description": "How the environment handles diagram sizing and whether custom aspect ratios can be controlled."
          },
          "configuration_support": {
            "type": "string",
            "description": "Whether the environment honors diagram-specific configurations like `frontmatter` or `%%{init:}%%` blocks."
          },
          "interactivity_support": {
            "type": "string",
            "description": "Whether interactive features like `click` events are enabled or blocked for security reasons."
          }
        },
        "required": [
          "environment_name",
          "sizing_and_aspect_ratio_handling",
          "configuration_support",
          "interactivity_support"
        ],
        "additionalProperties": false
      },
      "accessibility_and_readability_practices": {
        "type": "object",
        "properties": {
          "color_contrast_guidelines": {
            "type": "string",
            "description": "Best practices for color contrast based on WCAG requirements to ensure legibility."
          },
          "typography_control": {
            "type": "string",
            "description": "How to control font family and size using `themeVariables` for better readability."
          },
          "screen_reader_support": {
            "type": "string",
            "description": "How to use Mermaid's built-in `accTitle` and `accDescr` properties to provide context for assistive technologies."
          }
        },
        "required": [
          "color_contrast_guidelines",
          "typography_control",
          "screen_reader_support"
        ],
        "additionalProperties": false
      },
      "llm_failure_modes_and_mitigations": {
        "type": "object",
        "properties": {
          "common_failure_modes": {
            "type": "string",
            "description": "A catalog of frequent errors made by LLMs, such as incorrect token usage and unescaped special characters."
          },
          "prompt_level_mitigations": {
            "type": "string",
            "description": "Strategies to improve reliability, including automatic repair loops, two-step generation (JSON to Mermaid), and strict formatting instructions."
          },
          "model_specific_observations": {
            "type": "string",
            "description": "Notes on the different behaviors of weak vs. advanced LLMs and how to tailor prompts accordingly."
          }
        },
        "required": [
          "common_failure_modes",
          "prompt_level_mitigations",
          "model_specific_observations"
        ],
        "additionalProperties": false
      },
      "diagram_specific_prompt_templates": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "diagram_type": {
              "type": "string",
              "description": "The Mermaid diagram type the template is for (e.g., flowchart, sequenceDiagram)."
            },
            "prompt_template_text": {
              "type": "string",
              "description": "The fill-in-the-blank prompt text designed for weak LLMs, enforcing code-only output and layout hints."
            },
            "example_instantiation": {
              "type": "string",
              "description": "An example of the final, rendered Mermaid code generated from the template."
            }
          },
          "required": [
            "diagram_type",
            "prompt_template_text",
            "example_instantiation"
          ],
          "additionalProperties": false
        },
        "description": "A collection of fill-in-the-blank prompt templates, each tailored to a major Mermaid diagram type (e.g., flowchart, sequence, class), designed for easy use with weak LLMs."
      },
      "common_errors_and_fixes_cheatsheet": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "error_category": {
              "type": "string",
              "description": "The category of the error (e.g., Parse Error, Lexical Error)."
            },
            "diagram_type": {
              "type": "string",
              "description": "The diagram type where this error commonly occurs."
            },
            "error_message_pattern": {
              "type": "string",
              "description": "The exact error message or pattern to look for."
            },
            "cause_and_fix": {
              "type": "string",
              "description": "An explanation of the error's cause and the minimal-change fix required."
            }
          },
          "required": [
            "error_category",
            "diagram_type",
            "error_message_pattern",
            "cause_and_fix"
          ],
          "additionalProperties": false
        },
        "description": "A practical list of the most common Mermaid parsing and layout errors, their exact error messages, and the fastest reliable fixes. Designed to be used in an LLM's self-repair checklist."
      },
      "css_svg_wrapper_snippets": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "technique_name": {
              "type": "string",
              "description": "The name of the CSS technique (e.g., Modern aspect-ratio, Padding-bottom hack)."
            },
            "description": {
              "type": "string",
              "description": "A brief explanation of how the technique works and its browser compatibility."
            },
            "html_snippet": {
              "type": "string",
              "description": "The required HTML structure for the wrapper."
            },
            "css_snippet": {
              "type": "string",
              "description": "The corresponding CSS code snippet."
            }
          },
          "required": [
            "technique_name",
            "description",
            "html_snippet",
            "css_snippet"
          ],
          "additionalProperties": false
        },
        "description": "A collection of copy-pasteable HTML, CSS, and SVG wrapper code snippets that ensure consistent square or near-square rendering of Mermaid diagrams in web contexts."
      },
      "testing_and_evaluation_kit_design": {
        "type": "object",
        "properties": {
          "canonical_tasks": {
            "type": "string",
            "description": "A description of the standardized input tasks to be used for evaluation, covering a range of complexities."
          },
          "objective_pass_fail_criteria": {
            "type": "string",
            "description": "Programmatic checks for syntax validity (using mermaid.parse) and 'square-ness' (aspect ratio calculation)."
          },
          "qualitative_scoring_rubric": {
            "type": "string",
            "description": "A rubric for human evaluators to score aspects like visual clarity, semantic correctness, and style adherence."
          },
          "reporting_template": {
            "type": "string",
            "description": "The structure of the report used to log evaluation results for each test case."
          }
        },
        "required": [
          "canonical_tasks",
          "objective_pass_fail_criteria",
          "qualitative_scoring_rubric",
          "reporting_template"
        ],
        "additionalProperties": false
      }
    },
    "required": [
      "executive_summary",
      "runtime_prompt_template",
      "master_prompt_blueprint",
      "squarish_layout_strategies",
      "mermaid_syntax_crib_sheet",
      "diagram_type_inference_guide",
      "error_handling_and_self_repair_loop",
      "validation_toolchain_overview",
      "heuristics_for_weak_llms",
      "interactivity_and_security_guide",
      "versioning_and_initialization_guide",
      "environment_compatibility_guide",
      "accessibility_and_readability_practices",
      "llm_failure_modes_and_mitigations",
      "diagram_specific_prompt_templates",
      "common_errors_and_fixes_cheatsheet",
      "css_svg_wrapper_snippets",
      "testing_and_evaluation_kit_design"
    ],
    "additionalProperties": false
  }
}