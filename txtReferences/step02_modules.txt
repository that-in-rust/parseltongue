+// IMPORTANT: All step*.txt files are for meta-problem-solving
+// DO NOT TOUCH OR DELETE WITHOUT EXPLICIT PERMISSION
+// ===================================================
+
 ## Module Structure (Safety-First Design)

src/
├── lib/            // Public API Layer
│   ├── mod.rs      // Main library interface
│   ├── prelude.rs  // Re-exports of common types
│   └── error.rs    // Central error types
│
├── main/           // CLI Layer
│   ├── mod.rs      // Main binary interface
│   └── cli/        // Isolated CLI handling
│       ├── mod.rs  // CLI coordination
│       ├── args.rs // Clap argument parsing
│       └── config.rs // Configuration types
│
├── zip/            // ZIP Processing Layer
│   ├── mod.rs      // Public ZIP API
│   ├── reader.rs   // Safe ZIP reading
│   ├── stream.rs   // Stream implementation
│   └── guard.rs    // RAII cleanup guards
│
├── storage/        // Database Layer
│   ├── mod.rs      // Public storage API
│   ├── sled.rs     // sled implementation
│   └── guard.rs    // Connection guards
│
├── runtime/        // Tokio Runtime Layer
│   ├── mod.rs      // Runtime coordination
│   ├── worker.rs   // Worker pool management
│   └── shutdown.rs // Graceful shutdown
│
└── metrics/        // Metrics Layer
    ├── mod.rs      // Metrics coordination
    ├── console.rs  // tokio-console metrics
    └── task.rs     // Task performance data

tests/             // Testing Layer
├── common/        // Shared test utilities
└── integration/   // Integration tests

Key Design Principles:
1. Tokio-first architecture
2. Proper backpressure handling
3. Graceful shutdown paths
4. Structured concurrency
5. Resource-aware operations

Implementation Notes:
- All I/O uses tokio async
- Backpressure via Semaphore
- Metrics via tokio-console
- Graceful task cancellation
- Proper resource cleanup
- Benchmarking deferred to future phase
